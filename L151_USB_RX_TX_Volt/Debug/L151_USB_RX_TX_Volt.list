
L151_USB_RX_TX_Volt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e70  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08009fac  08009fac  00019fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a018  0800a018  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a018  0800a018  0001a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a020  0800a020  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a020  0800a020  0001a020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a024  0800a024  0001a024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015e0  20000184  0800a1ac  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001764  0800a1ac  00021764  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015be6  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004170  00000000  00000000  00035d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00039f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  0003b1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d61  00000000  00000000  0003c258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab5c  00000000  00000000  00054fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083aca  00000000  00000000  0006fb15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f35df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b10  00000000  00000000  000f3630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000184 	.word	0x20000184
 8000158:	00000000 	.word	0x00000000
 800015c:	08009f94 	.word	0x08009f94

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000188 	.word	0x20000188
 8000178:	08009f94 	.word	0x08009f94

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b976 	b.w	800093c <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9e08      	ldr	r6, [sp, #32]
 800066e:	460d      	mov	r5, r1
 8000670:	4604      	mov	r4, r0
 8000672:	4688      	mov	r8, r1
 8000674:	2b00      	cmp	r3, #0
 8000676:	d14d      	bne.n	8000714 <__udivmoddi4+0xac>
 8000678:	428a      	cmp	r2, r1
 800067a:	4694      	mov	ip, r2
 800067c:	d968      	bls.n	8000750 <__udivmoddi4+0xe8>
 800067e:	fab2 f282 	clz	r2, r2
 8000682:	b152      	cbz	r2, 800069a <__udivmoddi4+0x32>
 8000684:	fa01 f302 	lsl.w	r3, r1, r2
 8000688:	f1c2 0120 	rsb	r1, r2, #32
 800068c:	fa20 f101 	lsr.w	r1, r0, r1
 8000690:	fa0c fc02 	lsl.w	ip, ip, r2
 8000694:	ea41 0803 	orr.w	r8, r1, r3
 8000698:	4094      	lsls	r4, r2
 800069a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800069e:	fbb8 f7f1 	udiv	r7, r8, r1
 80006a2:	fa1f fe8c 	uxth.w	lr, ip
 80006a6:	fb01 8817 	mls	r8, r1, r7, r8
 80006aa:	fb07 f00e 	mul.w	r0, r7, lr
 80006ae:	0c23      	lsrs	r3, r4, #16
 80006b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006b4:	4298      	cmp	r0, r3
 80006b6:	d90a      	bls.n	80006ce <__udivmoddi4+0x66>
 80006b8:	eb1c 0303 	adds.w	r3, ip, r3
 80006bc:	f107 35ff 	add.w	r5, r7, #4294967295
 80006c0:	f080 811e 	bcs.w	8000900 <__udivmoddi4+0x298>
 80006c4:	4298      	cmp	r0, r3
 80006c6:	f240 811b 	bls.w	8000900 <__udivmoddi4+0x298>
 80006ca:	3f02      	subs	r7, #2
 80006cc:	4463      	add	r3, ip
 80006ce:	1a1b      	subs	r3, r3, r0
 80006d0:	fbb3 f0f1 	udiv	r0, r3, r1
 80006d4:	fb01 3310 	mls	r3, r1, r0, r3
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	b2a4      	uxth	r4, r4
 80006de:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e2:	45a6      	cmp	lr, r4
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x94>
 80006e6:	eb1c 0404 	adds.w	r4, ip, r4
 80006ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ee:	f080 8109 	bcs.w	8000904 <__udivmoddi4+0x29c>
 80006f2:	45a6      	cmp	lr, r4
 80006f4:	f240 8106 	bls.w	8000904 <__udivmoddi4+0x29c>
 80006f8:	4464      	add	r4, ip
 80006fa:	3802      	subs	r0, #2
 80006fc:	2100      	movs	r1, #0
 80006fe:	eba4 040e 	sub.w	r4, r4, lr
 8000702:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000706:	b11e      	cbz	r6, 8000710 <__udivmoddi4+0xa8>
 8000708:	2300      	movs	r3, #0
 800070a:	40d4      	lsrs	r4, r2
 800070c:	e9c6 4300 	strd	r4, r3, [r6]
 8000710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000714:	428b      	cmp	r3, r1
 8000716:	d908      	bls.n	800072a <__udivmoddi4+0xc2>
 8000718:	2e00      	cmp	r6, #0
 800071a:	f000 80ee 	beq.w	80008fa <__udivmoddi4+0x292>
 800071e:	2100      	movs	r1, #0
 8000720:	e9c6 0500 	strd	r0, r5, [r6]
 8000724:	4608      	mov	r0, r1
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	fab3 f183 	clz	r1, r3
 800072e:	2900      	cmp	r1, #0
 8000730:	d14a      	bne.n	80007c8 <__udivmoddi4+0x160>
 8000732:	42ab      	cmp	r3, r5
 8000734:	d302      	bcc.n	800073c <__udivmoddi4+0xd4>
 8000736:	4282      	cmp	r2, r0
 8000738:	f200 80fc 	bhi.w	8000934 <__udivmoddi4+0x2cc>
 800073c:	1a84      	subs	r4, r0, r2
 800073e:	eb65 0303 	sbc.w	r3, r5, r3
 8000742:	2001      	movs	r0, #1
 8000744:	4698      	mov	r8, r3
 8000746:	2e00      	cmp	r6, #0
 8000748:	d0e2      	beq.n	8000710 <__udivmoddi4+0xa8>
 800074a:	e9c6 4800 	strd	r4, r8, [r6]
 800074e:	e7df      	b.n	8000710 <__udivmoddi4+0xa8>
 8000750:	b902      	cbnz	r2, 8000754 <__udivmoddi4+0xec>
 8000752:	deff      	udf	#255	; 0xff
 8000754:	fab2 f282 	clz	r2, r2
 8000758:	2a00      	cmp	r2, #0
 800075a:	f040 8091 	bne.w	8000880 <__udivmoddi4+0x218>
 800075e:	eba1 000c 	sub.w	r0, r1, ip
 8000762:	2101      	movs	r1, #1
 8000764:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000768:	fa1f fe8c 	uxth.w	lr, ip
 800076c:	fbb0 f3f7 	udiv	r3, r0, r7
 8000770:	fb07 0013 	mls	r0, r7, r3, r0
 8000774:	0c25      	lsrs	r5, r4, #16
 8000776:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800077a:	fb0e f003 	mul.w	r0, lr, r3
 800077e:	42a8      	cmp	r0, r5
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x12c>
 8000782:	eb1c 0505 	adds.w	r5, ip, r5
 8000786:	f103 38ff 	add.w	r8, r3, #4294967295
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x12a>
 800078c:	42a8      	cmp	r0, r5
 800078e:	f200 80ce 	bhi.w	800092e <__udivmoddi4+0x2c6>
 8000792:	4643      	mov	r3, r8
 8000794:	1a2d      	subs	r5, r5, r0
 8000796:	fbb5 f0f7 	udiv	r0, r5, r7
 800079a:	fb07 5510 	mls	r5, r7, r0, r5
 800079e:	fb0e fe00 	mul.w	lr, lr, r0
 80007a2:	b2a4      	uxth	r4, r4
 80007a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007a8:	45a6      	cmp	lr, r4
 80007aa:	d908      	bls.n	80007be <__udivmoddi4+0x156>
 80007ac:	eb1c 0404 	adds.w	r4, ip, r4
 80007b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80007b4:	d202      	bcs.n	80007bc <__udivmoddi4+0x154>
 80007b6:	45a6      	cmp	lr, r4
 80007b8:	f200 80b6 	bhi.w	8000928 <__udivmoddi4+0x2c0>
 80007bc:	4628      	mov	r0, r5
 80007be:	eba4 040e 	sub.w	r4, r4, lr
 80007c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007c6:	e79e      	b.n	8000706 <__udivmoddi4+0x9e>
 80007c8:	f1c1 0720 	rsb	r7, r1, #32
 80007cc:	408b      	lsls	r3, r1
 80007ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80007d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007d6:	fa25 fa07 	lsr.w	sl, r5, r7
 80007da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007de:	fbba f8f9 	udiv	r8, sl, r9
 80007e2:	fa20 f307 	lsr.w	r3, r0, r7
 80007e6:	fb09 aa18 	mls	sl, r9, r8, sl
 80007ea:	408d      	lsls	r5, r1
 80007ec:	fa1f fe8c 	uxth.w	lr, ip
 80007f0:	431d      	orrs	r5, r3
 80007f2:	fa00 f301 	lsl.w	r3, r0, r1
 80007f6:	fb08 f00e 	mul.w	r0, r8, lr
 80007fa:	0c2c      	lsrs	r4, r5, #16
 80007fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000800:	42a0      	cmp	r0, r4
 8000802:	fa02 f201 	lsl.w	r2, r2, r1
 8000806:	d90b      	bls.n	8000820 <__udivmoddi4+0x1b8>
 8000808:	eb1c 0404 	adds.w	r4, ip, r4
 800080c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000810:	f080 8088 	bcs.w	8000924 <__udivmoddi4+0x2bc>
 8000814:	42a0      	cmp	r0, r4
 8000816:	f240 8085 	bls.w	8000924 <__udivmoddi4+0x2bc>
 800081a:	f1a8 0802 	sub.w	r8, r8, #2
 800081e:	4464      	add	r4, ip
 8000820:	1a24      	subs	r4, r4, r0
 8000822:	fbb4 f0f9 	udiv	r0, r4, r9
 8000826:	fb09 4410 	mls	r4, r9, r0, r4
 800082a:	fb00 fe0e 	mul.w	lr, r0, lr
 800082e:	b2ad      	uxth	r5, r5
 8000830:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000834:	45a6      	cmp	lr, r4
 8000836:	d908      	bls.n	800084a <__udivmoddi4+0x1e2>
 8000838:	eb1c 0404 	adds.w	r4, ip, r4
 800083c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000840:	d26c      	bcs.n	800091c <__udivmoddi4+0x2b4>
 8000842:	45a6      	cmp	lr, r4
 8000844:	d96a      	bls.n	800091c <__udivmoddi4+0x2b4>
 8000846:	3802      	subs	r0, #2
 8000848:	4464      	add	r4, ip
 800084a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800084e:	fba0 9502 	umull	r9, r5, r0, r2
 8000852:	eba4 040e 	sub.w	r4, r4, lr
 8000856:	42ac      	cmp	r4, r5
 8000858:	46c8      	mov	r8, r9
 800085a:	46ae      	mov	lr, r5
 800085c:	d356      	bcc.n	800090c <__udivmoddi4+0x2a4>
 800085e:	d053      	beq.n	8000908 <__udivmoddi4+0x2a0>
 8000860:	2e00      	cmp	r6, #0
 8000862:	d069      	beq.n	8000938 <__udivmoddi4+0x2d0>
 8000864:	ebb3 0208 	subs.w	r2, r3, r8
 8000868:	eb64 040e 	sbc.w	r4, r4, lr
 800086c:	fa22 f301 	lsr.w	r3, r2, r1
 8000870:	fa04 f707 	lsl.w	r7, r4, r7
 8000874:	431f      	orrs	r7, r3
 8000876:	40cc      	lsrs	r4, r1
 8000878:	e9c6 7400 	strd	r7, r4, [r6]
 800087c:	2100      	movs	r1, #0
 800087e:	e747      	b.n	8000710 <__udivmoddi4+0xa8>
 8000880:	fa0c fc02 	lsl.w	ip, ip, r2
 8000884:	f1c2 0120 	rsb	r1, r2, #32
 8000888:	fa25 f301 	lsr.w	r3, r5, r1
 800088c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000890:	fa20 f101 	lsr.w	r1, r0, r1
 8000894:	4095      	lsls	r5, r2
 8000896:	430d      	orrs	r5, r1
 8000898:	fbb3 f1f7 	udiv	r1, r3, r7
 800089c:	fb07 3311 	mls	r3, r7, r1, r3
 80008a0:	fa1f fe8c 	uxth.w	lr, ip
 80008a4:	0c28      	lsrs	r0, r5, #16
 80008a6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008aa:	fb01 f30e 	mul.w	r3, r1, lr
 80008ae:	4283      	cmp	r3, r0
 80008b0:	fa04 f402 	lsl.w	r4, r4, r2
 80008b4:	d908      	bls.n	80008c8 <__udivmoddi4+0x260>
 80008b6:	eb1c 0000 	adds.w	r0, ip, r0
 80008ba:	f101 38ff 	add.w	r8, r1, #4294967295
 80008be:	d22f      	bcs.n	8000920 <__udivmoddi4+0x2b8>
 80008c0:	4283      	cmp	r3, r0
 80008c2:	d92d      	bls.n	8000920 <__udivmoddi4+0x2b8>
 80008c4:	3902      	subs	r1, #2
 80008c6:	4460      	add	r0, ip
 80008c8:	1ac0      	subs	r0, r0, r3
 80008ca:	fbb0 f3f7 	udiv	r3, r0, r7
 80008ce:	fb07 0013 	mls	r0, r7, r3, r0
 80008d2:	b2ad      	uxth	r5, r5
 80008d4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008d8:	fb03 f00e 	mul.w	r0, r3, lr
 80008dc:	42a8      	cmp	r0, r5
 80008de:	d908      	bls.n	80008f2 <__udivmoddi4+0x28a>
 80008e0:	eb1c 0505 	adds.w	r5, ip, r5
 80008e4:	f103 38ff 	add.w	r8, r3, #4294967295
 80008e8:	d216      	bcs.n	8000918 <__udivmoddi4+0x2b0>
 80008ea:	42a8      	cmp	r0, r5
 80008ec:	d914      	bls.n	8000918 <__udivmoddi4+0x2b0>
 80008ee:	3b02      	subs	r3, #2
 80008f0:	4465      	add	r5, ip
 80008f2:	1a28      	subs	r0, r5, r0
 80008f4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80008f8:	e738      	b.n	800076c <__udivmoddi4+0x104>
 80008fa:	4631      	mov	r1, r6
 80008fc:	4630      	mov	r0, r6
 80008fe:	e707      	b.n	8000710 <__udivmoddi4+0xa8>
 8000900:	462f      	mov	r7, r5
 8000902:	e6e4      	b.n	80006ce <__udivmoddi4+0x66>
 8000904:	4618      	mov	r0, r3
 8000906:	e6f9      	b.n	80006fc <__udivmoddi4+0x94>
 8000908:	454b      	cmp	r3, r9
 800090a:	d2a9      	bcs.n	8000860 <__udivmoddi4+0x1f8>
 800090c:	ebb9 0802 	subs.w	r8, r9, r2
 8000910:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000914:	3801      	subs	r0, #1
 8000916:	e7a3      	b.n	8000860 <__udivmoddi4+0x1f8>
 8000918:	4643      	mov	r3, r8
 800091a:	e7ea      	b.n	80008f2 <__udivmoddi4+0x28a>
 800091c:	4628      	mov	r0, r5
 800091e:	e794      	b.n	800084a <__udivmoddi4+0x1e2>
 8000920:	4641      	mov	r1, r8
 8000922:	e7d1      	b.n	80008c8 <__udivmoddi4+0x260>
 8000924:	46d0      	mov	r8, sl
 8000926:	e77b      	b.n	8000820 <__udivmoddi4+0x1b8>
 8000928:	4464      	add	r4, ip
 800092a:	3802      	subs	r0, #2
 800092c:	e747      	b.n	80007be <__udivmoddi4+0x156>
 800092e:	3b02      	subs	r3, #2
 8000930:	4465      	add	r5, ip
 8000932:	e72f      	b.n	8000794 <__udivmoddi4+0x12c>
 8000934:	4608      	mov	r0, r1
 8000936:	e706      	b.n	8000746 <__udivmoddi4+0xde>
 8000938:	4631      	mov	r1, r6
 800093a:	e6e9      	b.n	8000710 <__udivmoddi4+0xa8>

0800093c <__aeabi_idiv0>:
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop

08000940 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000950:	4b81      	ldr	r3, [pc, #516]	; (8000b58 <MX_ADC_Init+0x218>)
 8000952:	4a82      	ldr	r2, [pc, #520]	; (8000b5c <MX_ADC_Init+0x21c>)
 8000954:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000956:	4b80      	ldr	r3, [pc, #512]	; (8000b58 <MX_ADC_Init+0x218>)
 8000958:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800095c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800095e:	4b7e      	ldr	r3, [pc, #504]	; (8000b58 <MX_ADC_Init+0x218>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000964:	4b7c      	ldr	r3, [pc, #496]	; (8000b58 <MX_ADC_Init+0x218>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800096a:	4b7b      	ldr	r3, [pc, #492]	; (8000b58 <MX_ADC_Init+0x218>)
 800096c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000970:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000972:	4b79      	ldr	r3, [pc, #484]	; (8000b58 <MX_ADC_Init+0x218>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000978:	4b77      	ldr	r3, [pc, #476]	; (8000b58 <MX_ADC_Init+0x218>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800097e:	4b76      	ldr	r3, [pc, #472]	; (8000b58 <MX_ADC_Init+0x218>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000984:	4b74      	ldr	r3, [pc, #464]	; (8000b58 <MX_ADC_Init+0x218>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 800098a:	4b73      	ldr	r3, [pc, #460]	; (8000b58 <MX_ADC_Init+0x218>)
 800098c:	2201      	movs	r2, #1
 800098e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 14;
 8000992:	4b71      	ldr	r3, [pc, #452]	; (8000b58 <MX_ADC_Init+0x218>)
 8000994:	220e      	movs	r2, #14
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000998:	4b6f      	ldr	r3, [pc, #444]	; (8000b58 <MX_ADC_Init+0x218>)
 800099a:	2200      	movs	r2, #0
 800099c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009a0:	4b6d      	ldr	r3, [pc, #436]	; (8000b58 <MX_ADC_Init+0x218>)
 80009a2:	2210      	movs	r2, #16
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009a6:	4b6c      	ldr	r3, [pc, #432]	; (8000b58 <MX_ADC_Init+0x218>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 80009ac:	4b6a      	ldr	r3, [pc, #424]	; (8000b58 <MX_ADC_Init+0x218>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80009b4:	4868      	ldr	r0, [pc, #416]	; (8000b58 <MX_ADC_Init+0x218>)
 80009b6:	f000 fce1 	bl	800137c <HAL_ADC_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 80009c0:	f000 fb38 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80009c4:	2311      	movs	r3, #17
 80009c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_384CYCLES;
 80009cc:	2307      	movs	r3, #7
 80009ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	4619      	mov	r1, r3
 80009d4:	4860      	ldr	r0, [pc, #384]	; (8000b58 <MX_ADC_Init+0x218>)
 80009d6:	f000 ff09 	bl	80017ec <HAL_ADC_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80009e0:	f000 fb28 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009e4:	2310      	movs	r3, #16
 80009e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	4619      	mov	r1, r3
 80009f0:	4859      	ldr	r0, [pc, #356]	; (8000b58 <MX_ADC_Init+0x218>)
 80009f2:	f000 fefb 	bl	80017ec <HAL_ADC_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80009fc:	f000 fb1a 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a04:	2303      	movs	r3, #3
 8000a06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4852      	ldr	r0, [pc, #328]	; (8000b58 <MX_ADC_Init+0x218>)
 8000a0e:	f000 feed 	bl	80017ec <HAL_ADC_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ADC_Init+0xdc>
  {
    Error_Handler();
 8000a18:	f000 fb0c 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a20:	2304      	movs	r3, #4
 8000a22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	4619      	mov	r1, r3
 8000a28:	484b      	ldr	r0, [pc, #300]	; (8000b58 <MX_ADC_Init+0x218>)
 8000a2a:	f000 fedf 	bl	80017ec <HAL_ADC_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_ADC_Init+0xf8>
  {
    Error_Handler();
 8000a34:	f000 fafe 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a3c:	2305      	movs	r3, #5
 8000a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	4844      	ldr	r0, [pc, #272]	; (8000b58 <MX_ADC_Init+0x218>)
 8000a46:	f000 fed1 	bl	80017ec <HAL_ADC_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_ADC_Init+0x114>
  {
    Error_Handler();
 8000a50:	f000 faf0 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a54:	2303      	movs	r3, #3
 8000a56:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a58:	2306      	movs	r3, #6
 8000a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	483d      	ldr	r0, [pc, #244]	; (8000b58 <MX_ADC_Init+0x218>)
 8000a62:	f000 fec3 	bl	80017ec <HAL_ADC_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_ADC_Init+0x130>
  {
    Error_Handler();
 8000a6c:	f000 fae2 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a70:	2306      	movs	r3, #6
 8000a72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a74:	2307      	movs	r3, #7
 8000a76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4836      	ldr	r0, [pc, #216]	; (8000b58 <MX_ADC_Init+0x218>)
 8000a7e:	f000 feb5 	bl	80017ec <HAL_ADC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC_Init+0x14c>
  {
    Error_Handler();
 8000a88:	f000 fad4 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a90:	2308      	movs	r3, #8
 8000a92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	482f      	ldr	r0, [pc, #188]	; (8000b58 <MX_ADC_Init+0x218>)
 8000a9a:	f000 fea7 	bl	80017ec <HAL_ADC_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC_Init+0x168>
  {
    Error_Handler();
 8000aa4:	f000 fac6 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000aac:	2309      	movs	r3, #9
 8000aae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4828      	ldr	r0, [pc, #160]	; (8000b58 <MX_ADC_Init+0x218>)
 8000ab6:	f000 fe99 	bl	80017ec <HAL_ADC_ConfigChannel>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_ADC_Init+0x184>
  {
    Error_Handler();
 8000ac0:	f000 fab8 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ac4:	2309      	movs	r3, #9
 8000ac6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000ac8:	230a      	movs	r3, #10
 8000aca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4821      	ldr	r0, [pc, #132]	; (8000b58 <MX_ADC_Init+0x218>)
 8000ad2:	f000 fe8b 	bl	80017ec <HAL_ADC_ConfigChannel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_ADC_Init+0x1a0>
  {
    Error_Handler();
 8000adc:	f000 faaa 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000ae0:	2312      	movs	r3, #18
 8000ae2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000ae4:	230b      	movs	r3, #11
 8000ae6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	481a      	ldr	r0, [pc, #104]	; (8000b58 <MX_ADC_Init+0x218>)
 8000aee:	f000 fe7d 	bl	80017ec <HAL_ADC_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC_Init+0x1bc>
  {
    Error_Handler();
 8000af8:	f000 fa9c 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000afc:	2313      	movs	r3, #19
 8000afe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000b00:	230c      	movs	r3, #12
 8000b02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	4813      	ldr	r0, [pc, #76]	; (8000b58 <MX_ADC_Init+0x218>)
 8000b0a:	f000 fe6f 	bl	80017ec <HAL_ADC_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_ADC_Init+0x1d8>
  {
    Error_Handler();
 8000b14:	f000 fa8e 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_20;
 8000b18:	2314      	movs	r3, #20
 8000b1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000b1c:	230d      	movs	r3, #13
 8000b1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	480c      	ldr	r0, [pc, #48]	; (8000b58 <MX_ADC_Init+0x218>)
 8000b26:	f000 fe61 	bl	80017ec <HAL_ADC_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_ADC_Init+0x1f4>
  {
    Error_Handler();
 8000b30:	f000 fa80 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_21;
 8000b34:	2315      	movs	r3, #21
 8000b36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000b38:	230e      	movs	r3, #14
 8000b3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_ADC_Init+0x218>)
 8000b42:	f000 fe53 	bl	80017ec <HAL_ADC_ConfigChannel>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_ADC_Init+0x210>
  {
    Error_Handler();
 8000b4c:	f000 fa72 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200001a0 	.word	0x200001a0
 8000b5c:	40012400 	.word	0x40012400

08000b60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a35      	ldr	r2, [pc, #212]	; (8000c54 <HAL_ADC_MspInit+0xf4>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d164      	bne.n	8000c4c <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b82:	4b35      	ldr	r3, [pc, #212]	; (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000b84:	6a1b      	ldr	r3, [r3, #32]
 8000b86:	4a34      	ldr	r2, [pc, #208]	; (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000b88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8c:	6213      	str	r3, [r2, #32]
 8000b8e:	4b32      	ldr	r3, [pc, #200]	; (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000b90:	6a1b      	ldr	r3, [r3, #32]
 8000b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4b2f      	ldr	r3, [pc, #188]	; (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a2e      	ldr	r2, [pc, #184]	; (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	4a28      	ldr	r2, [pc, #160]	; (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	61d3      	str	r3, [r2, #28]
 8000bbe:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> ADC_IN18
    PB13     ------> ADC_IN19
    PB14     ------> ADC_IN20
    PB15     ------> ADC_IN21
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bca:	23cf      	movs	r3, #207	; 0xcf
 8000bcc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	481f      	ldr	r0, [pc, #124]	; (8000c5c <HAL_ADC_MspInit+0xfc>)
 8000bde:	f001 fbcb 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 8000be2:	f24f 0303 	movw	r3, #61443	; 0xf003
 8000be6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be8:	2303      	movs	r3, #3
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	481a      	ldr	r0, [pc, #104]	; (8000c60 <HAL_ADC_MspInit+0x100>)
 8000bf8:	f001 fbbe 	bl	8002378 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_ADC_MspInit+0x104>)
 8000bfe:	4a1a      	ldr	r2, [pc, #104]	; (8000c68 <HAL_ADC_MspInit+0x108>)
 8000c00:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_ADC_MspInit+0x104>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_ADC_MspInit+0x104>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_ADC_MspInit+0x104>)
 8000c10:	2280      	movs	r2, #128	; 0x80
 8000c12:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <HAL_ADC_MspInit+0x104>)
 8000c16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c1a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_ADC_MspInit+0x104>)
 8000c1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c22:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_ADC_MspInit+0x104>)
 8000c26:	2220      	movs	r2, #32
 8000c28:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_ADC_MspInit+0x104>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <HAL_ADC_MspInit+0x104>)
 8000c32:	f001 f9cd 	bl	8001fd0 <HAL_DMA_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8000c3c:	f000 f9fa 	bl	8001034 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_ADC_MspInit+0x104>)
 8000c44:	645a      	str	r2, [r3, #68]	; 0x44
 8000c46:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_ADC_MspInit+0x104>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40012400 	.word	0x40012400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40020400 	.word	0x40020400
 8000c64:	200001f4 	.word	0x200001f4
 8000c68:	40026008 	.word	0x40026008

08000c6c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c72:	463b      	mov	r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_DAC_Init+0x60>)
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <MX_DAC_Init+0x64>)
 8000c7e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c80:	4812      	ldr	r0, [pc, #72]	; (8000ccc <MX_DAC_Init+0x60>)
 8000c82:	f001 f92a 	bl	8001eda <HAL_DAC_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000c8c:	f000 f9d2 	bl	8001034 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480b      	ldr	r0, [pc, #44]	; (8000ccc <MX_DAC_Init+0x60>)
 8000ca0:	f001 f93d 	bl	8001f1e <HAL_DAC_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000caa:	f000 f9c3 	bl	8001034 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000cae:	463b      	mov	r3, r7
 8000cb0:	2210      	movs	r2, #16
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_DAC_Init+0x60>)
 8000cb6:	f001 f932 	bl	8001f1e <HAL_DAC_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000cc0:	f000 f9b8 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000238 	.word	0x20000238
 8000cd0:	40007400 	.word	0x40007400

08000cd4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <HAL_DAC_MspInit+0x74>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d123      	bne.n	8000d3e <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_DAC_MspInit+0x78>)
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfa:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <HAL_DAC_MspInit+0x78>)
 8000cfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d00:	6253      	str	r3, [r2, #36]	; 0x24
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_DAC_MspInit+0x78>)
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_DAC_MspInit+0x78>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_DAC_MspInit+0x78>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	61d3      	str	r3, [r2, #28]
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_DAC_MspInit+0x78>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d26:	2330      	movs	r3, #48	; 0x30
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_DAC_MspInit+0x7c>)
 8000d3a:	f001 fb1d 	bl	8002378 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	; 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40007400 	.word	0x40007400
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020000 	.word	0x40020000

08000d54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_DMA_Init+0x38>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <MX_DMA_Init+0x38>)
 8000d60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d64:	61d3      	str	r3, [r2, #28]
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_DMA_Init+0x38>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	200b      	movs	r0, #11
 8000d78:	f001 f879 	bl	8001e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d7c:	200b      	movs	r0, #11
 8000d7e:	f001 f892 	bl	8001ea6 <HAL_NVIC_EnableIRQ>

}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800

08000d90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <MX_GPIO_Init+0xe4>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	4a32      	ldr	r2, [pc, #200]	; (8000e74 <MX_GPIO_Init+0xe4>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	61d3      	str	r3, [r2, #28]
 8000db2:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <MX_GPIO_Init+0xe4>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <MX_GPIO_Init+0xe4>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a2c      	ldr	r2, [pc, #176]	; (8000e74 <MX_GPIO_Init+0xe4>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	61d3      	str	r3, [r2, #28]
 8000dca:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <MX_GPIO_Init+0xe4>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <MX_GPIO_Init+0xe4>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	4a26      	ldr	r2, [pc, #152]	; (8000e74 <MX_GPIO_Init+0xe4>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	61d3      	str	r3, [r2, #28]
 8000de2:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <MX_GPIO_Init+0xe4>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df4:	4820      	ldr	r0, [pc, #128]	; (8000e78 <MX_GPIO_Init+0xe8>)
 8000df6:	f001 fc3f 	bl	8002678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B2_Pin|B10_Pin|B11_Pin|LEDB_Pin
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f640 41c4 	movw	r1, #3268	; 0xcc4
 8000e00:	481e      	ldr	r0, [pc, #120]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000e02:	f001 fc39 	bl	8002678 <HAL_GPIO_WritePin>
                          |LEDR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A8_Pin|A9_Pin|A10_Pin|A15_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 4107 	mov.w	r1, #34560	; 0x8700
 8000e0c:	481c      	ldr	r0, [pc, #112]	; (8000e80 <MX_GPIO_Init+0xf0>)
 8000e0e:	f001 fc33 	bl	8002678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEDG_Pin;
 8000e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LEDG_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4813      	ldr	r0, [pc, #76]	; (8000e78 <MX_GPIO_Init+0xe8>)
 8000e2c:	f001 faa4 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = B2_Pin|B10_Pin|B11_Pin|LEDB_Pin
 8000e30:	f640 43c4 	movw	r3, #3268	; 0xcc4
 8000e34:	60fb      	str	r3, [r7, #12]
                          |LEDR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	4619      	mov	r1, r3
 8000e48:	480c      	ldr	r0, [pc, #48]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000e4a:	f001 fa95 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A8_Pin|A9_Pin|A10_Pin|A15_Pin;
 8000e4e:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 8000e52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <MX_GPIO_Init+0xf0>)
 8000e68:	f001 fa86 	bl	8002378 <HAL_GPIO_Init>

}
 8000e6c:	bf00      	nop
 8000e6e:	3720      	adds	r7, #32
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020800 	.word	0x40020800
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	40020000 	.word	0x40020000

08000e84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000e8a:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <MX_I2C1_Init+0x54>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000e90:	4a12      	ldr	r2, [pc, #72]	; (8000edc <MX_I2C1_Init+0x58>)
 8000e92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000ea2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ea6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000ec2:	f001 fbf1 	bl	80026a8 <HAL_I2C_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ecc:	f000 f8b2 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	2000024c 	.word	0x2000024c
 8000ed8:	40005400 	.word	0x40005400
 8000edc:	000186a0 	.word	0x000186a0

08000ee0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <HAL_I2C_MspInit+0x7c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d128      	bne.n	8000f54 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <HAL_I2C_MspInit+0x80>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	4a16      	ldr	r2, [pc, #88]	; (8000f60 <HAL_I2C_MspInit+0x80>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	61d3      	str	r3, [r2, #28]
 8000f0e:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_I2C_MspInit+0x80>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f20:	2312      	movs	r3, #18
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	480b      	ldr	r0, [pc, #44]	; (8000f64 <HAL_I2C_MspInit+0x84>)
 8000f38:	f001 fa1e 	bl	8002378 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_I2C_MspInit+0x80>)
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <HAL_I2C_MspInit+0x80>)
 8000f42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f46:	6253      	str	r3, [r2, #36]	; 0x24
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_I2C_MspInit+0x80>)
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	; 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40005400 	.word	0x40005400
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020400 	.word	0x40020400

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6c:	f000 f975 	bl	800125a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f70:	f000 f812 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f74:	f7ff ff0c 	bl	8000d90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f78:	f7ff feec 	bl	8000d54 <MX_DMA_Init>
  MX_ADC_Init();
 8000f7c:	f7ff fce0 	bl	8000940 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8000f80:	f007 fe2e 	bl	8008be0 <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 8000f84:	f7ff fe72 	bl	8000c6c <MX_DAC_Init>
  MX_I2C1_Init();
 8000f88:	f7ff ff7c 	bl	8000e84 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f8c:	f000 f858 	bl	8001040 <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  kernel_main();
 8000f90:	f008 fd8a 	bl	8009aa8 <kernel_main>
 8000f94:	e7fc      	b.n	8000f90 <main+0x28>
	...

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b092      	sub	sp, #72	; 0x48
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	2234      	movs	r2, #52	; 0x34
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f008 ffec 	bl	8009f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	463b      	mov	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <SystemClock_Config+0x98>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000fc2:	4a1b      	ldr	r2, [pc, #108]	; (8001030 <SystemClock_Config+0x98>)
 8000fc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fc8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd2:	2310      	movs	r3, #16
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000fde:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000fe2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000fe4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000fe8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 f976 	bl	80042e0 <HAL_RCC_OscConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ffa:	f000 f81b 	bl	8001034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffe:	230f      	movs	r3, #15
 8001000:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001002:	2303      	movs	r3, #3
 8001004:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001012:	463b      	mov	r3, r7
 8001014:	2101      	movs	r1, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f003 fc92 	bl	8004940 <HAL_RCC_ClockConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001022:	f000 f807 	bl	8001034 <Error_Handler>
  }
}
 8001026:	bf00      	nop
 8001028:	3748      	adds	r7, #72	; 0x48
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40007000 	.word	0x40007000

08001034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001038:	b672      	cpsid	i
}
 800103a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800103c:	e7fe      	b.n	800103c <Error_Handler+0x8>
	...

08001040 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_SPI1_Init+0x60>)
 8001046:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <MX_SPI1_Init+0x64>)
 8001048:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <MX_SPI1_Init+0x60>)
 800104c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001050:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_SPI1_Init+0x60>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_SPI1_Init+0x60>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MX_SPI1_Init+0x60>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_SPI1_Init+0x60>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <MX_SPI1_Init+0x60>)
 800106c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001070:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_SPI1_Init+0x60>)
 8001074:	2200      	movs	r2, #0
 8001076:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_SPI1_Init+0x60>)
 800107a:	2200      	movs	r2, #0
 800107c:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_SPI1_Init+0x60>)
 8001080:	2200      	movs	r2, #0
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_SPI1_Init+0x60>)
 8001086:	220a      	movs	r2, #10
 8001088:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_SPI1_Init+0x60>)
 800108c:	f003 fec8 	bl	8004e20 <HAL_SPI_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 8001096:	f7ff ffcd 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200002a0 	.word	0x200002a0
 80010a4:	40013000 	.word	0x40013000

080010a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a17      	ldr	r2, [pc, #92]	; (8001124 <HAL_SPI_MspInit+0x7c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d127      	bne.n	800111a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_SPI_MspInit+0x80>)
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	4a16      	ldr	r2, [pc, #88]	; (8001128 <HAL_SPI_MspInit+0x80>)
 80010d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010d4:	6213      	str	r3, [r2, #32]
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_SPI_MspInit+0x80>)
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_SPI_MspInit+0x80>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <HAL_SPI_MspInit+0x80>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	61d3      	str	r3, [r2, #28]
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_SPI_MspInit+0x80>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80010fa:	2338      	movs	r3, #56	; 0x38
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800110a:	2305      	movs	r3, #5
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	; (800112c <HAL_SPI_MspInit+0x84>)
 8001116:	f001 f92f 	bl	8002378 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40013000 	.word	0x40013000
 8001128:	40023800 	.word	0x40023800
 800112c:	40020400 	.word	0x40020400

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_MspInit+0x58>)
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	4a13      	ldr	r2, [pc, #76]	; (8001188 <HAL_MspInit+0x58>)
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	6253      	str	r3, [r2, #36]	; 0x24
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_MspInit+0x58>)
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_MspInit+0x58>)
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <HAL_MspInit+0x58>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6213      	str	r3, [r2, #32]
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_MspInit+0x58>)
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_MspInit+0x58>)
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_MspInit+0x58>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	6253      	str	r3, [r2, #36]	; 0x24
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_MspInit+0x58>)
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117e:	bf00      	nop
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	40023800 	.word	0x40023800

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <NMI_Handler+0x4>

08001192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <MemManage_Handler+0x4>

0800119e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <UsageFault_Handler+0x4>

080011aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr

080011b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr

080011c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d2:	f000 f895 	bl	8001300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <DMA1_Channel1_IRQHandler+0x10>)
 80011e2:	f000 ffea 	bl	80021ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200001f4 	.word	0x200001f4

080011f0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <USB_LP_IRQHandler+0x10>)
 80011f6:	f001 fc93 	bl	8002b20 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000f6c 	.word	0x20000f6c

08001204 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	; (8001248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	; (8001254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001236:	f7ff ffe5 	bl	8001204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f008 fe7f 	bl	8009f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800123e:	f7ff fe93 	bl	8000f68 <main>
  bx lr
 8001242:	4770      	bx	lr
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800124c:	0800a028 	.word	0x0800a028
  ldr r2, =_sbss
 8001250:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001254:	20001764 	.word	0x20001764

08001258 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC1_IRQHandler>

0800125a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001264:	2003      	movs	r0, #3
 8001266:	f000 fdf7 	bl	8001e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800126a:	200f      	movs	r0, #15
 800126c:	f000 f80e 	bl	800128c <HAL_InitTick>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	e001      	b.n	8001280 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800127c:	f7ff ff58 	bl	8001130 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001280:	79fb      	ldrb	r3, [r7, #7]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_InitTick+0x68>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d022      	beq.n	80012e6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_InitTick+0x6c>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_InitTick+0x68>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80012b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fe04 	bl	8001ec2 <HAL_SYSTICK_Config>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d10f      	bne.n	80012e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	d809      	bhi.n	80012da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c6:	2200      	movs	r2, #0
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	f04f 30ff 	mov.w	r0, #4294967295
 80012ce:	f000 fdce 	bl	8001e6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <HAL_InitTick+0x70>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	e007      	b.n	80012ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	e004      	b.n	80012ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e001      	b.n	80012ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000008 	.word	0x20000008
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000004 	.word	0x20000004

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_IncTick+0x1c>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_IncTick+0x20>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4413      	add	r3, r2
 800130e:	4a03      	ldr	r2, [pc, #12]	; (800131c <HAL_IncTick+0x1c>)
 8001310:	6013      	str	r3, [r2, #0]
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	200002f8 	.word	0x200002f8
 8001320:	20000008 	.word	0x20000008

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b02      	ldr	r3, [pc, #8]	; (8001334 <HAL_GetTick+0x10>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	200002f8 	.word	0x200002f8

08001338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001340:	f7ff fff0 	bl	8001324 <HAL_GetTick>
 8001344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001350:	d004      	beq.n	800135c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_Delay+0x40>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	4413      	add	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800135c:	bf00      	nop
 800135e:	f7ff ffe1 	bl	8001324 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	429a      	cmp	r2, r3
 800136c:	d8f7      	bhi.n	800135e <HAL_Delay+0x26>
  {
  }
}
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000008 	.word	0x20000008

0800137c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08e      	sub	sp, #56	; 0x38
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e127      	b.n	80015ec <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d115      	bne.n	80013d6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b8:	4b8e      	ldr	r3, [pc, #568]	; (80015f4 <HAL_ADC_Init+0x278>)
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4a8d      	ldr	r2, [pc, #564]	; (80015f4 <HAL_ADC_Init+0x278>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6213      	str	r3, [r2, #32]
 80013c4:	4b8b      	ldr	r3, [pc, #556]	; (80015f4 <HAL_ADC_Init+0x278>)
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff fbc5 	bl	8000b60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 80ff 	bne.w	80015e2 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013ec:	f023 0302 	bic.w	r3, r3, #2
 80013f0:	f043 0202 	orr.w	r2, r3, #2
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80013f8:	4b7f      	ldr	r3, [pc, #508]	; (80015f8 <HAL_ADC_Init+0x27c>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	497c      	ldr	r1, [pc, #496]	; (80015f8 <HAL_ADC_Init+0x27c>)
 8001406:	4313      	orrs	r3, r2
 8001408:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001412:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800141a:	4619      	mov	r1, r3
 800141c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001420:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	fa93 f3a3 	rbit	r3, r3
 8001428:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fab3 f383 	clz	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001436:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800143c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001444:	4619      	mov	r1, r3
 8001446:	2302      	movs	r3, #2
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144c:	fa93 f3a3 	rbit	r3, r3
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	fab3 f383 	clz	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800145e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001462:	4313      	orrs	r3, r2
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146a:	2b10      	cmp	r3, #16
 800146c:	d007      	beq.n	800147e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001476:	4313      	orrs	r3, r2
 8001478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800147a:	4313      	orrs	r3, r2
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001488:	2b40      	cmp	r3, #64	; 0x40
 800148a:	d04f      	beq.n	800152c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001492:	4313      	orrs	r3, r2
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800149e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6912      	ldr	r2, [r2, #16]
 80014a4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80014a8:	d003      	beq.n	80014b2 <HAL_ADC_Init+0x136>
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6912      	ldr	r2, [r2, #16]
 80014ae:	2a01      	cmp	r2, #1
 80014b0:	d102      	bne.n	80014b8 <HAL_ADC_Init+0x13c>
 80014b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b6:	e000      	b.n	80014ba <HAL_ADC_Init+0x13e>
 80014b8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80014ba:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80014bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014be:	4313      	orrs	r3, r2
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d125      	bne.n	8001518 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d114      	bne.n	8001500 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	3b01      	subs	r3, #1
 80014dc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80014e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	fa92 f2a2 	rbit	r2, r2
 80014e8:	617a      	str	r2, [r7, #20]
  return result;
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	fab2 f282 	clz	r2, r2
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	4093      	lsls	r3, r2
 80014f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014fa:	4313      	orrs	r3, r2
 80014fc:	633b      	str	r3, [r7, #48]	; 0x30
 80014fe:	e00b      	b.n	8001518 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	f043 0220 	orr.w	r2, r3, #32
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001510:	f043 0201 	orr.w	r2, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	4b37      	ldr	r3, [pc, #220]	; (80015fc <HAL_ADC_Init+0x280>)
 8001520:	4013      	ands	r3, r2
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001528:	430b      	orrs	r3, r1
 800152a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	4b33      	ldr	r3, [pc, #204]	; (8001600 <HAL_ADC_Init+0x284>)
 8001534:	4013      	ands	r3, r2
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6812      	ldr	r2, [r2, #0]
 800153a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800153c:	430b      	orrs	r3, r1
 800153e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001548:	d003      	beq.n	8001552 <HAL_ADC_Init+0x1d6>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d119      	bne.n	8001586 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	3b01      	subs	r3, #1
 8001562:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001566:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	fa92 f2a2 	rbit	r2, r2
 800156e:	60fa      	str	r2, [r7, #12]
  return result;
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	fab2 f282 	clz	r2, r2
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	fa03 f202 	lsl.w	r2, r3, r2
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	631a      	str	r2, [r3, #48]	; 0x30
 8001584:	e007      	b.n	8001596 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_ADC_Init+0x288>)
 800159e:	4013      	ands	r3, r2
 80015a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d10b      	bne.n	80015be <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b0:	f023 0303 	bic.w	r3, r3, #3
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80015bc:	e014      	b.n	80015e8 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	f023 0312 	bic.w	r3, r3, #18
 80015c6:	f043 0210 	orr.w	r2, r3, #16
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015d2:	f043 0201 	orr.w	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80015e0:	e002      	b.n	80015e8 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3738      	adds	r7, #56	; 0x38
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40012700 	.word	0x40012700
 80015fc:	fcfc16ff 	.word	0xfcfc16ff
 8001600:	c0fff18d 	.word	0xc0fff18d
 8001604:	bf80fffe 	.word	0xbf80fffe

08001608 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800161e:	2b01      	cmp	r3, #1
 8001620:	d101      	bne.n	8001626 <HAL_ADC_Start_DMA+0x1e>
 8001622:	2302      	movs	r3, #2
 8001624:	e074      	b.n	8001710 <HAL_ADC_Start_DMA+0x108>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 fa2c 	bl	8001a8c <ADC_Enable>
 8001634:	4603      	mov	r3, r0
 8001636:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d167      	bne.n	800170e <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001646:	f023 0301 	bic.w	r3, r3, #1
 800164a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165c:	2b00      	cmp	r3, #0
 800165e:	d007      	beq.n	8001670 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001664:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001668:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800167c:	d106      	bne.n	800168c <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001682:	f023 0206 	bic.w	r2, r3, #6
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	651a      	str	r2, [r3, #80]	; 0x50
 800168a:	e002      	b.n	8001692 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a1e      	ldr	r2, [pc, #120]	; (8001718 <HAL_ADC_Start_DMA+0x110>)
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a1d      	ldr	r2, [pc, #116]	; (800171c <HAL_ADC_Start_DMA+0x114>)
 80016a8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	4a1c      	ldr	r2, [pc, #112]	; (8001720 <HAL_ADC_Start_DMA+0x118>)
 80016b0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80016ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	3358      	adds	r3, #88	; 0x58
 80016e6:	4619      	mov	r1, r3
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f000 fcc8 	bl	8002080 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d107      	bne.n	800170e <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800170c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800170e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	08001bc7 	.word	0x08001bc7
 800171c:	08001c6f 	.word	0x08001c6f
 8001720:	08001c8b 	.word	0x08001c8b

08001724 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_ADC_Stop_DMA+0x1a>
 800173a:	2302      	movs	r3, #2
 800173c:	e03f      	b.n	80017be <HAL_ADC_Stop_DMA+0x9a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f9fc 	bl	8001b44 <ADC_ConversionStop_Disable>
 800174c:	4603      	mov	r3, r0
 800174e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d12e      	bne.n	80017b4 <HAL_ADC_Stop_DMA+0x90>
  {
    /* Disable ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001764:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d10d      	bne.n	8001790 <HAL_ADC_Stop_DMA+0x6c>
    {
      HAL_DMA_Abort(hadc->DMA_Handle);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fce1 	bl	8002140 <HAL_DMA_Abort>
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001794:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	f043 0201 	orr.w	r2, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80017b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
	...

080017ec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_ADC_ConfigChannel+0x20>
 8001808:	2302      	movs	r3, #2
 800180a:	e134      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x28a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b06      	cmp	r3, #6
 800181a:	d81c      	bhi.n	8001856 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	3b05      	subs	r3, #5
 800182e:	221f      	movs	r2, #31
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	4019      	ands	r1, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	3b05      	subs	r3, #5
 8001848:	fa00 f203 	lsl.w	r2, r0, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
 8001854:	e07e      	b.n	8001954 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b0c      	cmp	r3, #12
 800185c:	d81c      	bhi.n	8001898 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	3b23      	subs	r3, #35	; 0x23
 8001870:	221f      	movs	r2, #31
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	4019      	ands	r1, r3
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	3b23      	subs	r3, #35	; 0x23
 800188a:	fa00 f203 	lsl.w	r2, r0, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	63da      	str	r2, [r3, #60]	; 0x3c
 8001896:	e05d      	b.n	8001954 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b12      	cmp	r3, #18
 800189e:	d81c      	bhi.n	80018da <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	3b41      	subs	r3, #65	; 0x41
 80018b2:	221f      	movs	r2, #31
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	4019      	ands	r1, r3
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	3b41      	subs	r3, #65	; 0x41
 80018cc:	fa00 f203 	lsl.w	r2, r0, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	639a      	str	r2, [r3, #56]	; 0x38
 80018d8:	e03c      	b.n	8001954 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b18      	cmp	r3, #24
 80018e0:	d81c      	bhi.n	800191c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	3b5f      	subs	r3, #95	; 0x5f
 80018f4:	221f      	movs	r2, #31
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	4019      	ands	r1, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	3b5f      	subs	r3, #95	; 0x5f
 800190e:	fa00 f203 	lsl.w	r2, r0, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	635a      	str	r2, [r3, #52]	; 0x34
 800191a:	e01b      	b.n	8001954 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	3b7d      	subs	r3, #125	; 0x7d
 800192e:	221f      	movs	r2, #31
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	4019      	ands	r1, r3
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	3b7d      	subs	r3, #125	; 0x7d
 8001948:	fa00 f203 	lsl.w	r2, r0, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b09      	cmp	r3, #9
 800195a:	d81a      	bhi.n	8001992 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6959      	ldr	r1, [r3, #20]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	2207      	movs	r2, #7
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	4019      	ands	r1, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	6898      	ldr	r0, [r3, #8]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	fa00 f203 	lsl.w	r2, r0, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	615a      	str	r2, [r3, #20]
 8001990:	e042      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b13      	cmp	r3, #19
 8001998:	d81c      	bhi.n	80019d4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6919      	ldr	r1, [r3, #16]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	3b1e      	subs	r3, #30
 80019ac:	2207      	movs	r2, #7
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	4019      	ands	r1, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6898      	ldr	r0, [r3, #8]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	3b1e      	subs	r3, #30
 80019c6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	611a      	str	r2, [r3, #16]
 80019d2:	e021      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b1a      	cmp	r3, #26
 80019da:	d81c      	bhi.n	8001a16 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68d9      	ldr	r1, [r3, #12]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	3b3c      	subs	r3, #60	; 0x3c
 80019ee:	2207      	movs	r2, #7
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	4019      	ands	r1, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6898      	ldr	r0, [r3, #8]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	3b3c      	subs	r3, #60	; 0x3c
 8001a08:	fa00 f203 	lsl.w	r2, r0, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	e000      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001a16:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b10      	cmp	r3, #16
 8001a1e:	d003      	beq.n	8001a28 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a24:	2b11      	cmp	r3, #17
 8001a26:	d121      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_ADC_ConfigChannel+0x294>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d11b      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_ADC_ConfigChannel+0x294>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <HAL_ADC_ConfigChannel+0x294>)
 8001a3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a3e:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b10      	cmp	r3, #16
 8001a46:	d111      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_ADC_ConfigChannel+0x298>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <HAL_ADC_ConfigChannel+0x29c>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	0c9a      	lsrs	r2, r3, #18
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001a5e:	e002      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f9      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	40012700 	.word	0x40012700
 8001a84:	20000000 	.word	0x20000000
 8001a88:	431bde83 	.word	0x431bde83

08001a8c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa6:	2b40      	cmp	r3, #64	; 0x40
 8001aa8:	d043      	beq.n	8001b32 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 0201 	orr.w	r2, r2, #1
 8001ab8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <ADC_Enable+0xb0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a20      	ldr	r2, [pc, #128]	; (8001b40 <ADC_Enable+0xb4>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	0c9a      	lsrs	r2, r3, #18
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001ace:	e002      	b.n	8001ad6 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f9      	bne.n	8001ad0 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001adc:	f7ff fc22 	bl	8001324 <HAL_GetTick>
 8001ae0:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ae2:	e01f      	b.n	8001b24 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001ae4:	f7ff fc1e 	bl	8001324 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d918      	bls.n	8001b24 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afc:	2b40      	cmp	r3, #64	; 0x40
 8001afe:	d011      	beq.n	8001b24 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b04:	f043 0210 	orr.w	r2, r3, #16
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e007      	b.n	8001b34 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2e:	2b40      	cmp	r3, #64	; 0x40
 8001b30:	d1d8      	bne.n	8001ae4 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	431bde83 	.word	0x431bde83

08001b44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5a:	2b40      	cmp	r3, #64	; 0x40
 8001b5c:	d12e      	bne.n	8001bbc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b6e:	f7ff fbd9 	bl	8001324 <HAL_GetTick>
 8001b72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b74:	e01b      	b.n	8001bae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8001b76:	f7ff fbd5 	bl	8001324 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d914      	bls.n	8001bae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8e:	2b40      	cmp	r3, #64	; 0x40
 8001b90:	d10d      	bne.n	8001bae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	f043 0210 	orr.w	r2, r3, #16
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba2:	f043 0201 	orr.w	r2, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e007      	b.n	8001bbe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb8:	2b40      	cmp	r3, #64	; 0x40
 8001bba:	d0dc      	beq.n	8001b76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d13d      	bne.n	8001c5c <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d12c      	bne.n	8001c54 <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d127      	bne.n	8001c54 <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d006      	beq.n	8001c20 <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d119      	bne.n	8001c54 <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0220 	bic.w	r2, r2, #32
 8001c2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d105      	bne.n	8001c54 <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4c:	f043 0201 	orr.w	r2, r3, #1
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f007 fee9 	bl	8009a2c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001c5a:	e004      	b.n	8001c66 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	4798      	blx	r3
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f7ff fda2 	bl	80017c6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca8:	f043 0204 	orr.w	r2, r3, #4
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f7ff fd91 	bl	80017d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db0b      	blt.n	8001d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	4906      	ldr	r1, [pc, #24]	; (8001d58 <__NVIC_EnableIRQ+0x34>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	2001      	movs	r0, #1
 8001d46:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	e000e100 	.word	0xe000e100

08001d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	db0a      	blt.n	8001d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	490c      	ldr	r1, [pc, #48]	; (8001da8 <__NVIC_SetPriority+0x4c>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d84:	e00a      	b.n	8001d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4908      	ldr	r1, [pc, #32]	; (8001dac <__NVIC_SetPriority+0x50>)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3b04      	subs	r3, #4
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	440b      	add	r3, r1
 8001d9a:	761a      	strb	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000e100 	.word	0xe000e100
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f1c3 0307 	rsb	r3, r3, #7
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	bf28      	it	cs
 8001dce:	2304      	movcs	r3, #4
 8001dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d902      	bls.n	8001de0 <NVIC_EncodePriority+0x30>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	e000      	b.n	8001de2 <NVIC_EncodePriority+0x32>
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	401a      	ands	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	43d9      	mvns	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	4313      	orrs	r3, r2
         );
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e24:	d301      	bcc.n	8001e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00f      	b.n	8001e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <SysTick_Config+0x40>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e32:	210f      	movs	r1, #15
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	f7ff ff90 	bl	8001d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <SysTick_Config+0x40>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e42:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <SysTick_Config+0x40>)
 8001e44:	2207      	movs	r2, #7
 8001e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	e000e010 	.word	0xe000e010

08001e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ff2d 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e80:	f7ff ff42 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f7ff ff90 	bl	8001db0 <NVIC_EncodePriority>
 8001e90:	4602      	mov	r2, r0
 8001e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff5f 	bl	8001d5c <__NVIC_SetPriority>
}
 8001e9e:	bf00      	nop
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff35 	bl	8001d24 <__NVIC_EnableIRQ>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ffa2 	bl	8001e14 <SysTick_Config>
 8001ed0:	4603      	mov	r3, r0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e014      	b.n	8001f16 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	791b      	ldrb	r3, [r3, #4]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d105      	bne.n	8001f02 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7fe fee9 	bl	8000cd4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2202      	movs	r2, #2
 8001f06:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b089      	sub	sp, #36	; 0x24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <HAL_DAC_ConfigChannel+0x1c>
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e042      	b.n	8001fc4 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	795b      	ldrb	r3, [r3, #5]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_DAC_ConfigChannel+0x2c>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e03c      	b.n	8001fc4 <HAL_DAC_ConfigChannel+0xa6>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2202      	movs	r2, #2
 8001f54:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6819      	ldr	r1, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	22c0      	movs	r2, #192	; 0xc0
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43da      	mvns	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3724      	adds	r7, #36	; 0x24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e043      	b.n	800206a <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_DMA_Init+0xa4>)
 8001fea:	4413      	add	r3, r2
 8001fec:	4a22      	ldr	r2, [pc, #136]	; (8002078 <HAL_DMA_Init+0xa8>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	091b      	lsrs	r3, r3, #4
 8001ff4:	009a      	lsls	r2, r3, #2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a1f      	ldr	r2, [pc, #124]	; (800207c <HAL_DMA_Init+0xac>)
 8001ffe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800201a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002024:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002030:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	bffd9ff8 	.word	0xbffd9ff8
 8002078:	cccccccd 	.word	0xcccccccd
 800207c:	40026000 	.word	0x40026000

08002080 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_DMA_Start_IT+0x20>
 800209c:	2302      	movs	r3, #2
 800209e:	e04b      	b.n	8002138 <HAL_DMA_Start_IT+0xb8>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d13a      	bne.n	800212a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	68b9      	ldr	r1, [r7, #8]
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 f91d 	bl	8002318 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d008      	beq.n	80020f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 020e 	orr.w	r2, r2, #14
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	e00f      	b.n	8002118 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0204 	bic.w	r2, r2, #4
 8002106:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 020a 	orr.w	r2, r2, #10
 8002116:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e005      	b.n	8002136 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002132:	2302      	movs	r3, #2
 8002134:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002136:	7dfb      	ldrb	r3, [r7, #23]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d008      	beq.n	800216a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2204      	movs	r2, #4
 800215c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e022      	b.n	80021b0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 020e 	bic.w	r2, r2, #14
 8002178:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0201 	bic.w	r2, r2, #1
 8002188:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 021c 	and.w	r2, r3, #28
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f202 	lsl.w	r2, r1, r2
 800219c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 031c 	and.w	r3, r3, #28
 80021da:	2204      	movs	r2, #4
 80021dc:	409a      	lsls	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d026      	beq.n	8002234 <HAL_DMA_IRQHandler+0x7a>
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d021      	beq.n	8002234 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d107      	bne.n	800220e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0204 	bic.w	r2, r2, #4
 800220c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 021c 	and.w	r2, r3, #28
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221a:	2104      	movs	r1, #4
 800221c:	fa01 f202 	lsl.w	r2, r1, r2
 8002220:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	2b00      	cmp	r3, #0
 8002228:	d071      	beq.n	800230e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002232:	e06c      	b.n	800230e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f003 031c 	and.w	r3, r3, #28
 800223c:	2202      	movs	r2, #2
 800223e:	409a      	lsls	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d02e      	beq.n	80022a6 <HAL_DMA_IRQHandler+0xec>
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d029      	beq.n	80022a6 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10b      	bne.n	8002278 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 020a 	bic.w	r2, r2, #10
 800226e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f003 021c 	and.w	r2, r3, #28
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002284:	2102      	movs	r1, #2
 8002286:	fa01 f202 	lsl.w	r2, r1, r2
 800228a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	2b00      	cmp	r3, #0
 800229a:	d038      	beq.n	800230e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022a4:	e033      	b.n	800230e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f003 031c 	and.w	r3, r3, #28
 80022ae:	2208      	movs	r2, #8
 80022b0:	409a      	lsls	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d02a      	beq.n	8002310 <HAL_DMA_IRQHandler+0x156>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d025      	beq.n	8002310 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 020e 	bic.w	r2, r2, #14
 80022d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	f003 021c 	and.w	r2, r3, #28
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e0:	2101      	movs	r1, #1
 80022e2:	fa01 f202 	lsl.w	r2, r1, r2
 80022e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	2b00      	cmp	r3, #0
 8002304:	d004      	beq.n	8002310 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800230e:	bf00      	nop
 8002310:	bf00      	nop
}
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 021c 	and.w	r2, r3, #28
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	2101      	movs	r1, #1
 8002334:	fa01 f202 	lsl.w	r2, r1, r2
 8002338:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b10      	cmp	r3, #16
 8002348:	d108      	bne.n	800235c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800235a:	e007      	b.n	800236c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	60da      	str	r2, [r3, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr
	...

08002378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002378:	b480      	push	{r7}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800238e:	e154      	b.n	800263a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	2101      	movs	r1, #1
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	fa01 f303 	lsl.w	r3, r1, r3
 800239c:	4013      	ands	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 8146 	beq.w	8002634 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d005      	beq.n	80023c0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d130      	bne.n	8002422 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	2203      	movs	r2, #3
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80023f6:	2201      	movs	r2, #1
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	f003 0201 	and.w	r2, r3, #1
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b03      	cmp	r3, #3
 800242c:	d017      	beq.n	800245e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	2203      	movs	r2, #3
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d123      	bne.n	80024b2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	08da      	lsrs	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3208      	adds	r2, #8
 8002472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002476:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	220f      	movs	r2, #15
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4013      	ands	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	08da      	lsrs	r2, r3, #3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3208      	adds	r2, #8
 80024ac:	6939      	ldr	r1, [r7, #16]
 80024ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	2203      	movs	r2, #3
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0203 	and.w	r2, r3, #3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 80a0 	beq.w	8002634 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f4:	4b58      	ldr	r3, [pc, #352]	; (8002658 <HAL_GPIO_Init+0x2e0>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a57      	ldr	r2, [pc, #348]	; (8002658 <HAL_GPIO_Init+0x2e0>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	4b55      	ldr	r3, [pc, #340]	; (8002658 <HAL_GPIO_Init+0x2e0>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800250c:	4a53      	ldr	r2, [pc, #332]	; (800265c <HAL_GPIO_Init+0x2e4>)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002518:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	220f      	movs	r2, #15
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a4b      	ldr	r2, [pc, #300]	; (8002660 <HAL_GPIO_Init+0x2e8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d019      	beq.n	800256c <HAL_GPIO_Init+0x1f4>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a4a      	ldr	r2, [pc, #296]	; (8002664 <HAL_GPIO_Init+0x2ec>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d013      	beq.n	8002568 <HAL_GPIO_Init+0x1f0>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a49      	ldr	r2, [pc, #292]	; (8002668 <HAL_GPIO_Init+0x2f0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00d      	beq.n	8002564 <HAL_GPIO_Init+0x1ec>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a48      	ldr	r2, [pc, #288]	; (800266c <HAL_GPIO_Init+0x2f4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d007      	beq.n	8002560 <HAL_GPIO_Init+0x1e8>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a47      	ldr	r2, [pc, #284]	; (8002670 <HAL_GPIO_Init+0x2f8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d101      	bne.n	800255c <HAL_GPIO_Init+0x1e4>
 8002558:	2304      	movs	r3, #4
 800255a:	e008      	b.n	800256e <HAL_GPIO_Init+0x1f6>
 800255c:	2305      	movs	r3, #5
 800255e:	e006      	b.n	800256e <HAL_GPIO_Init+0x1f6>
 8002560:	2303      	movs	r3, #3
 8002562:	e004      	b.n	800256e <HAL_GPIO_Init+0x1f6>
 8002564:	2302      	movs	r3, #2
 8002566:	e002      	b.n	800256e <HAL_GPIO_Init+0x1f6>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_GPIO_Init+0x1f6>
 800256c:	2300      	movs	r3, #0
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	f002 0203 	and.w	r2, r2, #3
 8002574:	0092      	lsls	r2, r2, #2
 8002576:	4093      	lsls	r3, r2
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800257e:	4937      	ldr	r1, [pc, #220]	; (800265c <HAL_GPIO_Init+0x2e4>)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	3302      	adds	r3, #2
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258c:	4b39      	ldr	r3, [pc, #228]	; (8002674 <HAL_GPIO_Init+0x2fc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025b0:	4a30      	ldr	r2, [pc, #192]	; (8002674 <HAL_GPIO_Init+0x2fc>)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b6:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <HAL_GPIO_Init+0x2fc>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025da:	4a26      	ldr	r2, [pc, #152]	; (8002674 <HAL_GPIO_Init+0x2fc>)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025e0:	4b24      	ldr	r3, [pc, #144]	; (8002674 <HAL_GPIO_Init+0x2fc>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002604:	4a1b      	ldr	r2, [pc, #108]	; (8002674 <HAL_GPIO_Init+0x2fc>)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <HAL_GPIO_Init+0x2fc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43db      	mvns	r3, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800262e:	4a11      	ldr	r2, [pc, #68]	; (8002674 <HAL_GPIO_Init+0x2fc>)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3301      	adds	r3, #1
 8002638:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	f47f aea3 	bne.w	8002390 <HAL_GPIO_Init+0x18>
  }
}
 800264a:	bf00      	nop
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	40010000 	.word	0x40010000
 8002660:	40020000 	.word	0x40020000
 8002664:	40020400 	.word	0x40020400
 8002668:	40020800 	.word	0x40020800
 800266c:	40020c00 	.word	0x40020c00
 8002670:	40021000 	.word	0x40021000
 8002674:	40010400 	.word	0x40010400

08002678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
 8002684:	4613      	mov	r3, r2
 8002686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002688:	787b      	ldrb	r3, [r7, #1]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800268e:	887a      	ldrh	r2, [r7, #2]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002694:	e003      	b.n	800269e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002696:	887b      	ldrh	r3, [r7, #2]
 8002698:	041a      	lsls	r2, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	619a      	str	r2, [r3, #24]
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e12b      	b.n	8002912 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fc06 	bl	8000ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2224      	movs	r2, #36	; 0x24
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800270a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800270c:	f002 fb14 	bl	8004d38 <HAL_RCC_GetPCLK1Freq>
 8002710:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4a81      	ldr	r2, [pc, #516]	; (800291c <HAL_I2C_Init+0x274>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d807      	bhi.n	800272c <HAL_I2C_Init+0x84>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4a80      	ldr	r2, [pc, #512]	; (8002920 <HAL_I2C_Init+0x278>)
 8002720:	4293      	cmp	r3, r2
 8002722:	bf94      	ite	ls
 8002724:	2301      	movls	r3, #1
 8002726:	2300      	movhi	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	e006      	b.n	800273a <HAL_I2C_Init+0x92>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4a7d      	ldr	r2, [pc, #500]	; (8002924 <HAL_I2C_Init+0x27c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	bf94      	ite	ls
 8002734:	2301      	movls	r3, #1
 8002736:	2300      	movhi	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0e7      	b.n	8002912 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4a78      	ldr	r2, [pc, #480]	; (8002928 <HAL_I2C_Init+0x280>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	0c9b      	lsrs	r3, r3, #18
 800274c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	430a      	orrs	r2, r1
 8002760:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4a6a      	ldr	r2, [pc, #424]	; (800291c <HAL_I2C_Init+0x274>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d802      	bhi.n	800277c <HAL_I2C_Init+0xd4>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	3301      	adds	r3, #1
 800277a:	e009      	b.n	8002790 <HAL_I2C_Init+0xe8>
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	4a69      	ldr	r2, [pc, #420]	; (800292c <HAL_I2C_Init+0x284>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	099b      	lsrs	r3, r3, #6
 800278e:	3301      	adds	r3, #1
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	430b      	orrs	r3, r1
 8002796:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	495c      	ldr	r1, [pc, #368]	; (800291c <HAL_I2C_Init+0x274>)
 80027ac:	428b      	cmp	r3, r1
 80027ae:	d819      	bhi.n	80027e4 <HAL_I2C_Init+0x13c>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1e59      	subs	r1, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80027be:	1c59      	adds	r1, r3, #1
 80027c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027c4:	400b      	ands	r3, r1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_I2C_Init+0x138>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1e59      	subs	r1, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80027d8:	3301      	adds	r3, #1
 80027da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027de:	e051      	b.n	8002884 <HAL_I2C_Init+0x1dc>
 80027e0:	2304      	movs	r3, #4
 80027e2:	e04f      	b.n	8002884 <HAL_I2C_Init+0x1dc>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d111      	bne.n	8002810 <HAL_I2C_Init+0x168>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1e58      	subs	r0, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6859      	ldr	r1, [r3, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	440b      	add	r3, r1
 80027fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fe:	3301      	adds	r3, #1
 8002800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf0c      	ite	eq
 8002808:	2301      	moveq	r3, #1
 800280a:	2300      	movne	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	e012      	b.n	8002836 <HAL_I2C_Init+0x18e>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1e58      	subs	r0, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	0099      	lsls	r1, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	fbb0 f3f3 	udiv	r3, r0, r3
 8002826:	3301      	adds	r3, #1
 8002828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Init+0x196>
 800283a:	2301      	movs	r3, #1
 800283c:	e022      	b.n	8002884 <HAL_I2C_Init+0x1dc>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10e      	bne.n	8002864 <HAL_I2C_Init+0x1bc>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1e58      	subs	r0, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	440b      	add	r3, r1
 8002854:	fbb0 f3f3 	udiv	r3, r0, r3
 8002858:	3301      	adds	r3, #1
 800285a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002862:	e00f      	b.n	8002884 <HAL_I2C_Init+0x1dc>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1e58      	subs	r0, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	0099      	lsls	r1, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	fbb0 f3f3 	udiv	r3, r0, r3
 800287a:	3301      	adds	r3, #1
 800287c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002880:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	6809      	ldr	r1, [r1, #0]
 8002888:	4313      	orrs	r3, r2
 800288a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69da      	ldr	r2, [r3, #28]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6911      	ldr	r1, [r2, #16]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68d2      	ldr	r2, [r2, #12]
 80028be:	4311      	orrs	r1, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	000186a0 	.word	0x000186a0
 8002920:	001e847f 	.word	0x001e847f
 8002924:	003d08ff 	.word	0x003d08ff
 8002928:	431bde83 	.word	0x431bde83
 800292c:	10624dd3 	.word	0x10624dd3

08002930 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002932:	b08b      	sub	sp, #44	; 0x2c
 8002934:	af06      	add	r7, sp, #24
 8002936:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e0c4      	b.n	8002acc <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f006 fb64 	bl	8009024 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2203      	movs	r2, #3
 8002960:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f002 faeb 	bl	8004f44 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
 8002972:	e040      	b.n	80029f6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	440b      	add	r3, r1
 8002984:	3301      	adds	r3, #1
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	440b      	add	r3, r1
 80029ae:	3303      	adds	r3, #3
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	440b      	add	r3, r1
 80029c2:	3338      	adds	r3, #56	; 0x38
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029c8:	7bfa      	ldrb	r2, [r7, #15]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	440b      	add	r3, r1
 80029d6:	333c      	adds	r3, #60	; 0x3c
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	440b      	add	r3, r1
 80029ea:	3340      	adds	r3, #64	; 0x40
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	3301      	adds	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
 80029f6:	7bfa      	ldrb	r2, [r7, #15]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d3b9      	bcc.n	8002974 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a00:	2300      	movs	r3, #0
 8002a02:	73fb      	strb	r3, [r7, #15]
 8002a04:	e044      	b.n	8002a90 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	440b      	add	r3, r1
 8002a14:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	440b      	add	r3, r1
 8002a2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a2e:	7bfa      	ldrb	r2, [r7, #15]
 8002a30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a32:	7bfa      	ldrb	r2, [r7, #15]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	440b      	add	r3, r1
 8002a40:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	440b      	add	r3, r1
 8002a56:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a74:	7bfa      	ldrb	r2, [r7, #15]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	440b      	add	r3, r1
 8002a82:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d3b5      	bcc.n	8002a06 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	687e      	ldr	r6, [r7, #4]
 8002aa2:	466d      	mov	r5, sp
 8002aa4:	f106 0410 	add.w	r4, r6, #16
 8002aa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	602b      	str	r3, [r5, #0]
 8002ab0:	1d33      	adds	r3, r6, #4
 8002ab2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ab4:	6838      	ldr	r0, [r7, #0]
 8002ab6:	f002 fa5f 	bl	8004f78 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ad4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_PCD_Start+0x16>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e016      	b.n	8002b18 <HAL_PCD_Start+0x44>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f002 fa0e 	bl	8004f18 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002afc:	2101      	movs	r1, #1
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f006 fa72 	bl	8008fe8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f004 fcc2 	bl	8007492 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f004 fcba 	bl	80074a6 <USB_ReadInterrupts>
 8002b32:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fab1 	bl	80030a6 <PCD_EP_ISR_Handler>

    return;
 8002b44:	e0bd      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d013      	beq.n	8002b78 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b62:	b292      	uxth	r2, r2
 8002b64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f006 fad6 	bl	800911a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b6e:	2100      	movs	r1, #0
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f8a9 	bl	8002cc8 <HAL_PCD_SetAddress>

    return;
 8002b76:	e0a4      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00c      	beq.n	8002b9c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b94:	b292      	uxth	r2, r2
 8002b96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b9a:	e092      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00c      	beq.n	8002bc0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bb8:	b292      	uxth	r2, r2
 8002bba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002bbe:	e080      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d027      	beq.n	8002c1a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0204 	bic.w	r2, r2, #4
 8002bdc:	b292      	uxth	r2, r2
 8002bde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0208 	bic.w	r2, r2, #8
 8002bf4:	b292      	uxth	r2, r2
 8002bf6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f006 fac6 	bl	800918c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c12:	b292      	uxth	r2, r2
 8002c14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002c18:	e053      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d027      	beq.n	8002c74 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0208 	orr.w	r2, r2, #8
 8002c36:	b292      	uxth	r2, r2
 8002c38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c4e:	b292      	uxth	r2, r2
 8002c50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0204 	orr.w	r2, r2, #4
 8002c66:	b292      	uxth	r2, r2
 8002c68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f006 fa73 	bl	8009158 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c72:	e026      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00f      	beq.n	8002c9e <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c90:	b292      	uxth	r2, r2
 8002c92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f006 fa31 	bl	80090fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c9c:	e011      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00c      	beq.n	8002cc2 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cba:	b292      	uxth	r2, r2
 8002cbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002cc0:	bf00      	nop
  }
}
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_PCD_SetAddress+0x1a>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e013      	b.n	8002d0a <HAL_PCD_SetAddress+0x42>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f004 fbb6 	bl	800746c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	4608      	mov	r0, r1
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4603      	mov	r3, r0
 8002d22:	70fb      	strb	r3, [r7, #3]
 8002d24:	460b      	mov	r3, r1
 8002d26:	803b      	strh	r3, [r7, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	da0e      	bge.n	8002d56 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	705a      	strb	r2, [r3, #1]
 8002d54:	e00e      	b.n	8002d74 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	f003 0207 	and.w	r2, r3, #7
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d80:	883a      	ldrh	r2, [r7, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	78ba      	ldrb	r2, [r7, #2]
 8002d8a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d8c:	78bb      	ldrb	r3, [r7, #2]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d102      	bne.n	8002d98 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_PCD_EP_Open+0x94>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e00e      	b.n	8002dc4 <HAL_PCD_EP_Open+0xb2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68f9      	ldr	r1, [r7, #12]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f002 f8ff 	bl	8004fb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002dc2:	7afb      	ldrb	r3, [r7, #11]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	da0e      	bge.n	8002dfe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	4413      	add	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	705a      	strb	r2, [r3, #1]
 8002dfc:	e00e      	b.n	8002e1c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	f003 0207 	and.w	r2, r3, #7
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	4413      	add	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_PCD_EP_Close+0x6a>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e00e      	b.n	8002e54 <HAL_PCD_EP_Close+0x88>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 fc77 	bl	8005738 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e6c:	7afb      	ldrb	r3, [r7, #11]
 8002e6e:	f003 0207 	and.w	r2, r3, #7
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4413      	add	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2200      	movs	r2, #0
 8002e94:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9c:	7afb      	ldrb	r3, [r7, #11]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6979      	ldr	r1, [r7, #20]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f002 fe2e 	bl	8005b10 <USB_EPStartXfer>

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	f003 0207 	and.w	r2, r3, #7
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	440b      	add	r3, r1
 8002edc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002ee0:	681b      	ldr	r3, [r3, #0]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002efc:	7afb      	ldrb	r3, [r7, #11]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2201      	movs	r2, #1
 8002f36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f38:	7afb      	ldrb	r3, [r7, #11]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6979      	ldr	r1, [r7, #20]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f002 fde0 	bl	8005b10 <USB_EPStartXfer>

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	460b      	mov	r3, r1
 8002f64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	f003 0207 	and.w	r2, r3, #7
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d901      	bls.n	8002f78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e03e      	b.n	8002ff6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	da0e      	bge.n	8002f9e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	4413      	add	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	705a      	strb	r2, [r3, #1]
 8002f9c:	e00c      	b.n	8002fb8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_PCD_EP_SetStall+0x7e>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e00e      	b.n	8002ff6 <HAL_PCD_EP_SetStall+0x9c>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68f9      	ldr	r1, [r7, #12]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 f943 	bl	8007272 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	460b      	mov	r3, r1
 8003008:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	f003 020f 	and.w	r2, r3, #15
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	429a      	cmp	r2, r3
 8003016:	d901      	bls.n	800301c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e040      	b.n	800309e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800301c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003020:	2b00      	cmp	r3, #0
 8003022:	da0e      	bge.n	8003042 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	4413      	add	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2201      	movs	r2, #1
 800303e:	705a      	strb	r2, [r3, #1]
 8003040:	e00e      	b.n	8003060 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	f003 0207 	and.w	r2, r3, #7
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	4413      	add	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	b2da      	uxtb	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_PCD_EP_ClrStall+0x82>
 800307c:	2302      	movs	r3, #2
 800307e:	e00e      	b.n	800309e <HAL_PCD_EP_ClrStall+0xa0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68f9      	ldr	r1, [r7, #12]
 800308e:	4618      	mov	r0, r3
 8003090:	f004 f93f 	bl	8007312 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b096      	sub	sp, #88	; 0x58
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030ae:	e3bf      	b.n	8003830 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80030bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80030ca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f040 8179 	bne.w	80033c6 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80030d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d152      	bne.n	8003186 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80030ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f0:	81fb      	strh	r3, [r7, #14]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	89fb      	ldrh	r3, [r7, #14]
 80030f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003100:	b29b      	uxth	r3, r3
 8003102:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3328      	adds	r3, #40	; 0x28
 8003108:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003112:	b29b      	uxth	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	3302      	adds	r3, #2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	4413      	add	r3, r2
 8003128:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003134:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	441a      	add	r2, r3
 8003140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003142:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003144:	2100      	movs	r1, #0
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f005 ffbf 	bl	80090ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 836b 	beq.w	8003830 <PCD_EP_ISR_Handler+0x78a>
 800315a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 8366 	bne.w	8003830 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003170:	b2da      	uxtb	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	b292      	uxth	r2, r2
 8003178:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003184:	e354      	b.n	8003830 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800318c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003198:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800319c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d034      	beq.n	800320e <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	3306      	adds	r3, #6
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ce:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80031da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031dc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80031de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f004 f9b3 	bl	800754e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031f4:	4013      	ands	r3, r2
 80031f6:	823b      	strh	r3, [r7, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	8a3a      	ldrh	r2, [r7, #16]
 80031fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003202:	b292      	uxth	r2, r2
 8003204:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f005 ff32 	bl	8009070 <HAL_PCD_SetupStageCallback>
 800320c:	e310      	b.n	8003830 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800320e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003212:	2b00      	cmp	r3, #0
 8003214:	f280 830c 	bge.w	8003830 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29a      	uxth	r2, r3
 8003220:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003224:	4013      	ands	r3, r2
 8003226:	83fb      	strh	r3, [r7, #30]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	8bfa      	ldrh	r2, [r7, #30]
 800322e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003232:	b292      	uxth	r2, r2
 8003234:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800323e:	b29b      	uxth	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	3306      	adds	r3, #6
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	4413      	add	r3, r2
 8003254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800325e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003260:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d019      	beq.n	800329e <PCD_EP_ISR_Handler+0x1f8>
 800326a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d015      	beq.n	800329e <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003278:	6959      	ldr	r1, [r3, #20]
 800327a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800327e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003280:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003282:	b29b      	uxth	r3, r3
 8003284:	f004 f963 	bl	800754e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328a:	695a      	ldr	r2, [r3, #20]
 800328c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	441a      	add	r2, r3
 8003292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003294:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003296:	2100      	movs	r1, #0
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f005 fefb 	bl	8009094 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80032a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f040 82bd 	bne.w	8003830 <PCD_EP_ISR_Handler+0x78a>
 80032b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032c2:	f000 82b5 	beq.w	8003830 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	4413      	add	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	801a      	strh	r2, [r3, #0]
 80032f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b3e      	cmp	r3, #62	; 0x3e
 80032fc:	d91d      	bls.n	800333a <PCD_EP_ISR_Handler+0x294>
 80032fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	647b      	str	r3, [r7, #68]	; 0x44
 8003306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 031f 	and.w	r3, r3, #31
 800330e:	2b00      	cmp	r3, #0
 8003310:	d102      	bne.n	8003318 <PCD_EP_ISR_Handler+0x272>
 8003312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003314:	3b01      	subs	r3, #1
 8003316:	647b      	str	r3, [r7, #68]	; 0x44
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	b29a      	uxth	r2, r3
 800331e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003320:	b29b      	uxth	r3, r3
 8003322:	029b      	lsls	r3, r3, #10
 8003324:	b29b      	uxth	r3, r3
 8003326:	4313      	orrs	r3, r2
 8003328:	b29b      	uxth	r3, r3
 800332a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800332e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003332:	b29a      	uxth	r2, r3
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	801a      	strh	r2, [r3, #0]
 8003338:	e026      	b.n	8003388 <PCD_EP_ISR_Handler+0x2e2>
 800333a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <PCD_EP_ISR_Handler+0x2b2>
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800334c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003350:	b29a      	uxth	r2, r3
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	801a      	strh	r2, [r3, #0]
 8003356:	e017      	b.n	8003388 <PCD_EP_ISR_Handler+0x2e2>
 8003358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	647b      	str	r3, [r7, #68]	; 0x44
 8003360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <PCD_EP_ISR_Handler+0x2cc>
 800336c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336e:	3301      	adds	r3, #1
 8003370:	647b      	str	r3, [r7, #68]	; 0x44
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	b29a      	uxth	r2, r3
 8003378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800337a:	b29b      	uxth	r3, r3
 800337c:	029b      	lsls	r3, r3, #10
 800337e:	b29b      	uxth	r3, r3
 8003380:	4313      	orrs	r3, r2
 8003382:	b29a      	uxth	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003398:	827b      	strh	r3, [r7, #18]
 800339a:	8a7b      	ldrh	r3, [r7, #18]
 800339c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80033a0:	827b      	strh	r3, [r7, #18]
 80033a2:	8a7b      	ldrh	r3, [r7, #18]
 80033a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033a8:	827b      	strh	r3, [r7, #18]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	8a7b      	ldrh	r3, [r7, #18]
 80033b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	8013      	strh	r3, [r2, #0]
 80033c4:	e234      	b.n	8003830 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033da:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f280 80fc 	bge.w	80035dc <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80033fa:	4013      	ands	r3, r2
 80033fc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003412:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003416:	b292      	uxth	r2, r2
 8003418:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800341a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	4413      	add	r3, r2
 800342e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003432:	7b1b      	ldrb	r3, [r3, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d125      	bne.n	8003484 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003440:	b29b      	uxth	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	3306      	adds	r3, #6
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003460:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003464:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 8092 	beq.w	8003592 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003474:	6959      	ldr	r1, [r3, #20]
 8003476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003478:	88da      	ldrh	r2, [r3, #6]
 800347a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800347e:	f004 f866 	bl	800754e <USB_ReadPMA>
 8003482:	e086      	b.n	8003592 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003486:	78db      	ldrb	r3, [r3, #3]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d10a      	bne.n	80034a2 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800348c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003490:	461a      	mov	r2, r3
 8003492:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f9d9 	bl	800384c <HAL_PCD_EP_DB_Receive>
 800349a:	4603      	mov	r3, r0
 800349c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80034a0:	e077      	b.n	8003592 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034bc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	441a      	add	r2, r3
 80034ce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d024      	beq.n	800354a <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003508:	b29b      	uxth	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4413      	add	r3, r2
 8003514:	3302      	adds	r3, #2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	4413      	add	r3, r2
 800351e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003528:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800352c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003530:	2b00      	cmp	r3, #0
 8003532:	d02e      	beq.n	8003592 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800353a:	6959      	ldr	r1, [r3, #20]
 800353c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800353e:	891a      	ldrh	r2, [r3, #8]
 8003540:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003544:	f004 f803 	bl	800754e <USB_ReadPMA>
 8003548:	e023      	b.n	8003592 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003552:	b29b      	uxth	r3, r3
 8003554:	461a      	mov	r2, r3
 8003556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4413      	add	r3, r2
 800355e:	3306      	adds	r3, #6
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6812      	ldr	r2, [r2, #0]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003572:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003576:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003584:	6959      	ldr	r1, [r3, #20]
 8003586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003588:	895a      	ldrh	r2, [r3, #10]
 800358a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800358e:	f003 ffde 	bl	800754e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003594:	69da      	ldr	r2, [r3, #28]
 8003596:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800359a:	441a      	add	r2, r3
 800359c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80035a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035a8:	441a      	add	r2, r3
 80035aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ac:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80035ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <PCD_EP_ISR_Handler+0x51c>
 80035b6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80035ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d206      	bcs.n	80035d0 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80035c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	4619      	mov	r1, r3
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f005 fd63 	bl	8009094 <HAL_PCD_DataOutStageCallback>
 80035ce:	e005      	b.n	80035dc <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035d6:	4618      	mov	r0, r3
 80035d8:	f002 fa9a 	bl	8005b10 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80035dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8123 	beq.w	8003830 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80035ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4413      	add	r3, r2
 80035fc:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	b29b      	uxth	r3, r3
 8003610:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003618:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	441a      	add	r2, r3
 800362a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800362e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003636:	b29b      	uxth	r3, r3
 8003638:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800363a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363c:	78db      	ldrb	r3, [r3, #3]
 800363e:	2b01      	cmp	r3, #1
 8003640:	f040 80a2 	bne.w	8003788 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003646:	2200      	movs	r2, #0
 8003648:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800364a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800364c:	7b1b      	ldrb	r3, [r3, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 8093 	beq.w	800377a <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003654:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d046      	beq.n	80036ee <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003662:	785b      	ldrb	r3, [r3, #1]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d126      	bne.n	80036b6 <PCD_EP_ISR_Handler+0x610>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003676:	b29b      	uxth	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	4413      	add	r3, r2
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
 8003680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	011a      	lsls	r2, r3, #4
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	4413      	add	r3, r2
 800368a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800368e:	623b      	str	r3, [r7, #32]
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	b29b      	uxth	r3, r3
 8003696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800369a:	b29a      	uxth	r2, r3
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	801a      	strh	r2, [r3, #0]
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	801a      	strh	r2, [r3, #0]
 80036b4:	e061      	b.n	800377a <PCD_EP_ISR_Handler+0x6d4>
 80036b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b8:	785b      	ldrb	r3, [r3, #1]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d15d      	bne.n	800377a <PCD_EP_ISR_Handler+0x6d4>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d2:	4413      	add	r3, r2
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	011a      	lsls	r2, r3, #4
 80036dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036de:	4413      	add	r3, r2
 80036e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e8:	2200      	movs	r2, #0
 80036ea:	801a      	strh	r2, [r3, #0]
 80036ec:	e045      	b.n	800377a <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f6:	785b      	ldrb	r3, [r3, #1]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d126      	bne.n	800374a <PCD_EP_ISR_Handler+0x6a4>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800370a:	b29b      	uxth	r3, r3
 800370c:	461a      	mov	r2, r3
 800370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003710:	4413      	add	r3, r2
 8003712:	637b      	str	r3, [r7, #52]	; 0x34
 8003714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	011a      	lsls	r2, r3, #4
 800371a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371c:	4413      	add	r3, r2
 800371e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003722:	633b      	str	r3, [r7, #48]	; 0x30
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800372e:	b29a      	uxth	r2, r3
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	801a      	strh	r2, [r3, #0]
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	b29b      	uxth	r3, r3
 800373a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800373e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003742:	b29a      	uxth	r2, r3
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	801a      	strh	r2, [r3, #0]
 8003748:	e017      	b.n	800377a <PCD_EP_ISR_Handler+0x6d4>
 800374a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800374c:	785b      	ldrb	r3, [r3, #1]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d113      	bne.n	800377a <PCD_EP_ISR_Handler+0x6d4>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800375a:	b29b      	uxth	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003760:	4413      	add	r3, r2
 8003762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	011a      	lsls	r2, r3, #4
 800376a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376c:	4413      	add	r3, r2
 800376e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003772:	63bb      	str	r3, [r7, #56]	; 0x38
 8003774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003776:	2200      	movs	r2, #0
 8003778:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800377a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	4619      	mov	r1, r3
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f005 fca2 	bl	80090ca <HAL_PCD_DataInStageCallback>
 8003786:	e053      	b.n	8003830 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003788:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d146      	bne.n	8003822 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800379c:	b29b      	uxth	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	3302      	adds	r3, #2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80037c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c2:	699a      	ldr	r2, [r3, #24]
 80037c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d907      	bls.n	80037dc <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80037cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ce:	699a      	ldr	r2, [r3, #24]
 80037d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037d4:	1ad2      	subs	r2, r2, r3
 80037d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d8:	619a      	str	r2, [r3, #24]
 80037da:	e002      	b.n	80037e2 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80037dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037de:	2200      	movs	r2, #0
 80037e0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80037e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	4619      	mov	r1, r3
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f005 fc6a 	bl	80090ca <HAL_PCD_DataInStageCallback>
 80037f6:	e01b      	b.n	8003830 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80037f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003800:	441a      	add	r2, r3
 8003802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003804:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003808:	69da      	ldr	r2, [r3, #28]
 800380a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800380e:	441a      	add	r2, r3
 8003810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003812:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800381a:	4618      	mov	r0, r3
 800381c:	f002 f978 	bl	8005b10 <USB_EPStartXfer>
 8003820:	e006      	b.n	8003830 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003822:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003826:	461a      	mov	r2, r3
 8003828:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f91b 	bl	8003a66 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003838:	b29b      	uxth	r3, r3
 800383a:	b21b      	sxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	f6ff ac37 	blt.w	80030b0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3758      	adds	r7, #88	; 0x58
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	4613      	mov	r3, r2
 8003858:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d07e      	beq.n	8003962 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800386c:	b29b      	uxth	r3, r3
 800386e:	461a      	mov	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	3302      	adds	r3, #2
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800388c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	8b7b      	ldrh	r3, [r7, #26]
 8003894:	429a      	cmp	r2, r3
 8003896:	d306      	bcc.n	80038a6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	699a      	ldr	r2, [r3, #24]
 800389c:	8b7b      	ldrh	r3, [r7, #26]
 800389e:	1ad2      	subs	r2, r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	619a      	str	r2, [r3, #24]
 80038a4:	e002      	b.n	80038ac <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2200      	movs	r2, #0
 80038aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d123      	bne.n	80038fc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ce:	833b      	strh	r3, [r7, #24]
 80038d0:	8b3b      	ldrh	r3, [r7, #24]
 80038d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80038d6:	833b      	strh	r3, [r7, #24]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	441a      	add	r2, r3
 80038e6:	8b3b      	ldrh	r3, [r7, #24]
 80038e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003902:	2b00      	cmp	r3, #0
 8003904:	d01f      	beq.n	8003946 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	b29b      	uxth	r3, r3
 8003918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800391c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003920:	82fb      	strh	r3, [r7, #22]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	441a      	add	r2, r3
 8003930:	8afb      	ldrh	r3, [r7, #22]
 8003932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800393a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800393e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003942:	b29b      	uxth	r3, r3
 8003944:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003946:	8b7b      	ldrh	r3, [r7, #26]
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8087 	beq.w	8003a5c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	6959      	ldr	r1, [r3, #20]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	891a      	ldrh	r2, [r3, #8]
 800395a:	8b7b      	ldrh	r3, [r7, #26]
 800395c:	f003 fdf7 	bl	800754e <USB_ReadPMA>
 8003960:	e07c      	b.n	8003a5c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800396a:	b29b      	uxth	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	3306      	adds	r3, #6
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800398a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	699a      	ldr	r2, [r3, #24]
 8003990:	8b7b      	ldrh	r3, [r7, #26]
 8003992:	429a      	cmp	r2, r3
 8003994:	d306      	bcc.n	80039a4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	8b7b      	ldrh	r3, [r7, #26]
 800399c:	1ad2      	subs	r2, r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	619a      	str	r2, [r3, #24]
 80039a2:	e002      	b.n	80039aa <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2200      	movs	r2, #0
 80039a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d123      	bne.n	80039fa <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039cc:	83fb      	strh	r3, [r7, #30]
 80039ce:	8bfb      	ldrh	r3, [r7, #30]
 80039d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039d4:	83fb      	strh	r3, [r7, #30]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	441a      	add	r2, r3
 80039e4:	8bfb      	ldrh	r3, [r7, #30]
 80039e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d11f      	bne.n	8003a44 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1e:	83bb      	strh	r3, [r7, #28]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	441a      	add	r2, r3
 8003a2e:	8bbb      	ldrh	r3, [r7, #28]
 8003a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a44:	8b7b      	ldrh	r3, [r7, #26]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d008      	beq.n	8003a5c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	6959      	ldr	r1, [r3, #20]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	895a      	ldrh	r2, [r3, #10]
 8003a56:	8b7b      	ldrh	r3, [r7, #26]
 8003a58:	f003 fd79 	bl	800754e <USB_ReadPMA>
    }
  }

  return count;
 8003a5c:	8b7b      	ldrh	r3, [r7, #26]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3720      	adds	r7, #32
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b0a4      	sub	sp, #144	; 0x90
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	4613      	mov	r3, r2
 8003a72:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 81dd 	beq.w	8003e3a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	3302      	adds	r3, #2
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aa8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	699a      	ldr	r2, [r3, #24]
 8003ab0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d907      	bls.n	8003ac8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ac0:	1ad2      	subs	r2, r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	619a      	str	r2, [r3, #24]
 8003ac6:	e002      	b.n	8003ace <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2200      	movs	r2, #0
 8003acc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f040 80b9 	bne.w	8003c4a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	785b      	ldrb	r3, [r3, #1]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d126      	bne.n	8003b2e <HAL_PCD_EP_DB_Transmit+0xc8>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	461a      	mov	r2, r3
 8003af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af4:	4413      	add	r3, r2
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	011a      	lsls	r2, r3, #4
 8003afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b00:	4413      	add	r3, r2
 8003b02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	801a      	strh	r2, [r3, #0]
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	801a      	strh	r2, [r3, #0]
 8003b2c:	e01a      	b.n	8003b64 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	785b      	ldrb	r3, [r3, #1]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d116      	bne.n	8003b64 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	461a      	mov	r2, r3
 8003b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4a:	4413      	add	r3, r2
 8003b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	011a      	lsls	r2, r3, #4
 8003b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b56:	4413      	add	r3, r2
 8003b58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	2200      	movs	r2, #0
 8003b62:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	785b      	ldrb	r3, [r3, #1]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d126      	bne.n	8003bc0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	61fb      	str	r3, [r7, #28]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	4413      	add	r3, r2
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	011a      	lsls	r2, r3, #4
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	801a      	strh	r2, [r3, #0]
 8003bbe:	e017      	b.n	8003bf0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	785b      	ldrb	r3, [r3, #1]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d113      	bne.n	8003bf0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	4413      	add	r3, r2
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	011a      	lsls	r2, r3, #4
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	4413      	add	r3, r2
 8003be4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003be8:	623b      	str	r3, [r7, #32]
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	2200      	movs	r2, #0
 8003bee:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f005 fa67 	bl	80090ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 82fc 	beq.w	8004200 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c22:	82fb      	strh	r3, [r7, #22]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	441a      	add	r2, r3
 8003c32:	8afb      	ldrh	r3, [r7, #22]
 8003c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	8013      	strh	r3, [r2, #0]
 8003c48:	e2da      	b.n	8004200 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d021      	beq.n	8003c98 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	441a      	add	r2, r3
 8003c80:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	f040 82ae 	bne.w	8004200 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003cac:	441a      	add	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	69da      	ldr	r2, [r3, #28]
 8003cb6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003cba:	441a      	add	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	6a1a      	ldr	r2, [r3, #32]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d30b      	bcc.n	8003ce4 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	6a1a      	ldr	r2, [r3, #32]
 8003cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cdc:	1ad2      	subs	r2, r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	621a      	str	r2, [r3, #32]
 8003ce2:	e017      	b.n	8003d14 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d108      	bne.n	8003cfe <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003cec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003cf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003cfc:	e00a      	b.n	8003d14 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2200      	movs	r2, #0
 8003d12:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	785b      	ldrb	r3, [r3, #1]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d165      	bne.n	8003de8 <HAL_PCD_EP_DB_Transmit+0x382>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d30:	4413      	add	r3, r2
 8003d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	011a      	lsls	r2, r3, #4
 8003d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d42:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d52:	801a      	strh	r2, [r3, #0]
 8003d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d58:	2b3e      	cmp	r3, #62	; 0x3e
 8003d5a:	d91d      	bls.n	8003d98 <HAL_PCD_EP_DB_Transmit+0x332>
 8003d5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d102      	bne.n	8003d76 <HAL_PCD_EP_DB_Transmit+0x310>
 8003d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d72:	3b01      	subs	r3, #1
 8003d74:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	029b      	lsls	r3, r3, #10
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	4313      	orrs	r3, r2
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	801a      	strh	r2, [r3, #0]
 8003d96:	e044      	b.n	8003e22 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <HAL_PCD_EP_DB_Transmit+0x350>
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db2:	801a      	strh	r2, [r3, #0]
 8003db4:	e035      	b.n	8003e22 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dcc:	3301      	adds	r3, #1
 8003dce:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	029b      	lsls	r3, r3, #10
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	4313      	orrs	r3, r2
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	801a      	strh	r2, [r3, #0]
 8003de6:	e01c      	b.n	8003e22 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	785b      	ldrb	r3, [r3, #1]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d118      	bne.n	8003e22 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	647b      	str	r3, [r7, #68]	; 0x44
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	461a      	mov	r2, r3
 8003e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e04:	4413      	add	r3, r2
 8003e06:	647b      	str	r3, [r7, #68]	; 0x44
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	011a      	lsls	r2, r3, #4
 8003e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e10:	4413      	add	r3, r2
 8003e12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e16:	643b      	str	r3, [r7, #64]	; 0x40
 8003e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e20:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	6959      	ldr	r1, [r3, #20]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	891a      	ldrh	r2, [r3, #8]
 8003e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	f003 fb46 	bl	80074c4 <USB_WritePMA>
 8003e38:	e1e2      	b.n	8004200 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3306      	adds	r3, #6
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e62:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d307      	bcc.n	8003e82 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e7a:	1ad2      	subs	r2, r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	619a      	str	r2, [r3, #24]
 8003e80:	e002      	b.n	8003e88 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2200      	movs	r2, #0
 8003e86:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f040 80c0 	bne.w	8004012 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	785b      	ldrb	r3, [r3, #1]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d126      	bne.n	8003ee8 <HAL_PCD_EP_DB_Transmit+0x482>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003eae:	4413      	add	r3, r2
 8003eb0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	011a      	lsls	r2, r3, #4
 8003eb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003eba:	4413      	add	r3, r2
 8003ebc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ec0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed0:	801a      	strh	r2, [r3, #0]
 8003ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee4:	801a      	strh	r2, [r3, #0]
 8003ee6:	e01a      	b.n	8003f1e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	785b      	ldrb	r3, [r3, #1]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d116      	bne.n	8003f1e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f04:	4413      	add	r3, r2
 8003f06:	667b      	str	r3, [r7, #100]	; 0x64
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	011a      	lsls	r2, r3, #4
 8003f0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f10:	4413      	add	r3, r2
 8003f12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f16:	663b      	str	r3, [r7, #96]	; 0x60
 8003f18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	677b      	str	r3, [r7, #116]	; 0x74
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	785b      	ldrb	r3, [r3, #1]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d12b      	bne.n	8003f84 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f40:	4413      	add	r3, r2
 8003f42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	011a      	lsls	r2, r3, #4
 8003f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f68:	801a      	strh	r2, [r3, #0]
 8003f6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f80:	801a      	strh	r2, [r3, #0]
 8003f82:	e017      	b.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	785b      	ldrb	r3, [r3, #1]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d113      	bne.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f9a:	4413      	add	r3, r2
 8003f9c:	677b      	str	r3, [r7, #116]	; 0x74
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	011a      	lsls	r2, r3, #4
 8003fa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fac:	673b      	str	r3, [r7, #112]	; 0x70
 8003fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f005 f885 	bl	80090ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f040 811a 	bne.w	8004200 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	441a      	add	r2, r3
 8003ff8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800400c:	b29b      	uxth	r3, r3
 800400e:	8013      	strh	r3, [r2, #0]
 8004010:	e0f6      	b.n	8004200 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d121      	bne.n	8004060 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	b29b      	uxth	r3, r3
 800402e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	441a      	add	r2, r3
 8004048:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800404c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800405c:	b29b      	uxth	r3, r3
 800405e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004066:	2b01      	cmp	r3, #1
 8004068:	f040 80ca 	bne.w	8004200 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004074:	441a      	add	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	69da      	ldr	r2, [r3, #28]
 800407e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004082:	441a      	add	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	6a1a      	ldr	r2, [r3, #32]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	429a      	cmp	r2, r3
 8004092:	d30b      	bcc.n	80040ac <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	6a1a      	ldr	r2, [r3, #32]
 80040a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040a4:	1ad2      	subs	r2, r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	621a      	str	r2, [r3, #32]
 80040aa:	e017      	b.n	80040dc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d108      	bne.n	80040c6 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80040b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80040c4:	e00a      	b.n	80040dc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2200      	movs	r2, #0
 80040d2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	657b      	str	r3, [r7, #84]	; 0x54
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	785b      	ldrb	r3, [r3, #1]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d165      	bne.n	80041b6 <HAL_PCD_EP_DB_Transmit+0x750>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040fe:	4413      	add	r3, r2
 8004100:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	011a      	lsls	r2, r3, #4
 8004108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800410a:	4413      	add	r3, r2
 800410c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004110:	65bb      	str	r3, [r7, #88]	; 0x58
 8004112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800411c:	b29a      	uxth	r2, r3
 800411e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004120:	801a      	strh	r2, [r3, #0]
 8004122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004126:	2b3e      	cmp	r3, #62	; 0x3e
 8004128:	d91d      	bls.n	8004166 <HAL_PCD_EP_DB_Transmit+0x700>
 800412a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	66bb      	str	r3, [r7, #104]	; 0x68
 8004132:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004136:	f003 031f 	and.w	r3, r3, #31
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <HAL_PCD_EP_DB_Transmit+0x6de>
 800413e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004140:	3b01      	subs	r3, #1
 8004142:	66bb      	str	r3, [r7, #104]	; 0x68
 8004144:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29a      	uxth	r2, r3
 800414a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800414c:	b29b      	uxth	r3, r3
 800414e:	029b      	lsls	r3, r3, #10
 8004150:	b29b      	uxth	r3, r3
 8004152:	4313      	orrs	r3, r2
 8004154:	b29b      	uxth	r3, r3
 8004156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800415a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800415e:	b29a      	uxth	r2, r3
 8004160:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004162:	801a      	strh	r2, [r3, #0]
 8004164:	e041      	b.n	80041ea <HAL_PCD_EP_DB_Transmit+0x784>
 8004166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10a      	bne.n	8004184 <HAL_PCD_EP_DB_Transmit+0x71e>
 800416e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	b29b      	uxth	r3, r3
 8004174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800417c:	b29a      	uxth	r2, r3
 800417e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004180:	801a      	strh	r2, [r3, #0]
 8004182:	e032      	b.n	80041ea <HAL_PCD_EP_DB_Transmit+0x784>
 8004184:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004188:	085b      	lsrs	r3, r3, #1
 800418a:	66bb      	str	r3, [r7, #104]	; 0x68
 800418c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <HAL_PCD_EP_DB_Transmit+0x738>
 8004198:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800419a:	3301      	adds	r3, #1
 800419c:	66bb      	str	r3, [r7, #104]	; 0x68
 800419e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	029b      	lsls	r3, r3, #10
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	4313      	orrs	r3, r2
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041b2:	801a      	strh	r2, [r3, #0]
 80041b4:	e019      	b.n	80041ea <HAL_PCD_EP_DB_Transmit+0x784>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	785b      	ldrb	r3, [r3, #1]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d115      	bne.n	80041ea <HAL_PCD_EP_DB_Transmit+0x784>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041cc:	4413      	add	r3, r2
 80041ce:	657b      	str	r3, [r7, #84]	; 0x54
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	011a      	lsls	r2, r3, #4
 80041d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d8:	4413      	add	r3, r2
 80041da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041de:	653b      	str	r3, [r7, #80]	; 0x50
 80041e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	6959      	ldr	r1, [r3, #20]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	895a      	ldrh	r2, [r3, #10]
 80041f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f003 f962 	bl	80074c4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800421a:	82bb      	strh	r3, [r7, #20]
 800421c:	8abb      	ldrh	r3, [r7, #20]
 800421e:	f083 0310 	eor.w	r3, r3, #16
 8004222:	82bb      	strh	r3, [r7, #20]
 8004224:	8abb      	ldrh	r3, [r7, #20]
 8004226:	f083 0320 	eor.w	r3, r3, #32
 800422a:	82bb      	strh	r3, [r7, #20]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	441a      	add	r2, r3
 800423a:	8abb      	ldrh	r3, [r7, #20]
 800423c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424c:	b29b      	uxth	r3, r3
 800424e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3790      	adds	r7, #144	; 0x90
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800425a:	b480      	push	{r7}
 800425c:	b087      	sub	sp, #28
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	607b      	str	r3, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	817b      	strh	r3, [r7, #10]
 8004268:	4613      	mov	r3, r2
 800426a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800426c:	897b      	ldrh	r3, [r7, #10]
 800426e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004278:	897b      	ldrh	r3, [r7, #10]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	4613      	mov	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	e009      	b.n	80042a4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004290:	897a      	ldrh	r2, [r7, #10]
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4413      	add	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80042a4:	893b      	ldrh	r3, [r7, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d107      	bne.n	80042ba <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2200      	movs	r2, #0
 80042ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	80da      	strh	r2, [r3, #6]
 80042b8:	e00b      	b.n	80042d2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2201      	movs	r2, #1
 80042be:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	0c1b      	lsrs	r3, r3, #16
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	371c      	adds	r7, #28
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e31d      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f2:	4b94      	ldr	r3, [pc, #592]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042fc:	4b91      	ldr	r3, [pc, #580]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004304:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d07b      	beq.n	800440a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b08      	cmp	r3, #8
 8004316:	d006      	beq.n	8004326 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b0c      	cmp	r3, #12
 800431c:	d10f      	bne.n	800433e <HAL_RCC_OscConfig+0x5e>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004324:	d10b      	bne.n	800433e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004326:	4b87      	ldr	r3, [pc, #540]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d06a      	beq.n	8004408 <HAL_RCC_OscConfig+0x128>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d166      	bne.n	8004408 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e2f7      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d106      	bne.n	8004354 <HAL_RCC_OscConfig+0x74>
 8004346:	4b7f      	ldr	r3, [pc, #508]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a7e      	ldr	r2, [pc, #504]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e02d      	b.n	80043b0 <HAL_RCC_OscConfig+0xd0>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10c      	bne.n	8004376 <HAL_RCC_OscConfig+0x96>
 800435c:	4b79      	ldr	r3, [pc, #484]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a78      	ldr	r2, [pc, #480]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	4b76      	ldr	r3, [pc, #472]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a75      	ldr	r2, [pc, #468]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800436e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e01c      	b.n	80043b0 <HAL_RCC_OscConfig+0xd0>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b05      	cmp	r3, #5
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0xb8>
 800437e:	4b71      	ldr	r3, [pc, #452]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a70      	ldr	r2, [pc, #448]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	4b6e      	ldr	r3, [pc, #440]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a6d      	ldr	r2, [pc, #436]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e00b      	b.n	80043b0 <HAL_RCC_OscConfig+0xd0>
 8004398:	4b6a      	ldr	r3, [pc, #424]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a69      	ldr	r2, [pc, #420]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800439e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	4b67      	ldr	r3, [pc, #412]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a66      	ldr	r2, [pc, #408]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80043aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d013      	beq.n	80043e0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fc ffb4 	bl	8001324 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c0:	f7fc ffb0 	bl	8001324 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	; 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e2ad      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043d2:	4b5c      	ldr	r3, [pc, #368]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0xe0>
 80043de:	e014      	b.n	800440a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fc ffa0 	bl	8001324 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e8:	f7fc ff9c 	bl	8001324 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e299      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043fa:	4b52      	ldr	r3, [pc, #328]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0x108>
 8004406:	e000      	b.n	800440a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d05a      	beq.n	80044cc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b04      	cmp	r3, #4
 800441a:	d005      	beq.n	8004428 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b0c      	cmp	r3, #12
 8004420:	d119      	bne.n	8004456 <HAL_RCC_OscConfig+0x176>
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d116      	bne.n	8004456 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004428:	4b46      	ldr	r3, [pc, #280]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <HAL_RCC_OscConfig+0x160>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d001      	beq.n	8004440 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e276      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004440:	4b40      	ldr	r3, [pc, #256]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	493d      	ldr	r1, [pc, #244]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004454:	e03a      	b.n	80044cc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d020      	beq.n	80044a0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800445e:	4b3a      	ldr	r3, [pc, #232]	; (8004548 <HAL_RCC_OscConfig+0x268>)
 8004460:	2201      	movs	r2, #1
 8004462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004464:	f7fc ff5e 	bl	8001324 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800446c:	f7fc ff5a 	bl	8001324 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e257      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800447e:	4b31      	ldr	r3, [pc, #196]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f0      	beq.n	800446c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448a:	4b2e      	ldr	r3, [pc, #184]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	492a      	ldr	r1, [pc, #168]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800449a:	4313      	orrs	r3, r2
 800449c:	604b      	str	r3, [r1, #4]
 800449e:	e015      	b.n	80044cc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044a0:	4b29      	ldr	r3, [pc, #164]	; (8004548 <HAL_RCC_OscConfig+0x268>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fc ff3d 	bl	8001324 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ae:	f7fc ff39 	bl	8001324 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e236      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044c0:	4b20      	ldr	r3, [pc, #128]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f0      	bne.n	80044ae <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80b8 	beq.w	800464a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d170      	bne.n	80045c2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044e0:	4b18      	ldr	r3, [pc, #96]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_RCC_OscConfig+0x218>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e21a      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1a      	ldr	r2, [r3, #32]
 80044fc:	4b11      	ldr	r3, [pc, #68]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004504:	429a      	cmp	r2, r3
 8004506:	d921      	bls.n	800454c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fc27 	bl	8004d60 <RCC_SetFlashLatencyFromMSIRange>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e208      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	4906      	ldr	r1, [pc, #24]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800452a:	4313      	orrs	r3, r2
 800452c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800452e:	4b05      	ldr	r3, [pc, #20]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	061b      	lsls	r3, r3, #24
 800453c:	4901      	ldr	r1, [pc, #4]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800453e:	4313      	orrs	r3, r2
 8004540:	604b      	str	r3, [r1, #4]
 8004542:	e020      	b.n	8004586 <HAL_RCC_OscConfig+0x2a6>
 8004544:	40023800 	.word	0x40023800
 8004548:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800454c:	4b99      	ldr	r3, [pc, #612]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	4996      	ldr	r1, [pc, #600]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800455a:	4313      	orrs	r3, r2
 800455c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800455e:	4b95      	ldr	r3, [pc, #596]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	061b      	lsls	r3, r3, #24
 800456c:	4991      	ldr	r1, [pc, #580]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800456e:	4313      	orrs	r3, r2
 8004570:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fbf2 	bl	8004d60 <RCC_SetFlashLatencyFromMSIRange>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e1d3      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	0b5b      	lsrs	r3, r3, #13
 800458c:	3301      	adds	r3, #1
 800458e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004596:	4a87      	ldr	r2, [pc, #540]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004598:	6892      	ldr	r2, [r2, #8]
 800459a:	0912      	lsrs	r2, r2, #4
 800459c:	f002 020f 	and.w	r2, r2, #15
 80045a0:	4985      	ldr	r1, [pc, #532]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 80045a2:	5c8a      	ldrb	r2, [r1, r2]
 80045a4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80045a6:	4a85      	ldr	r2, [pc, #532]	; (80047bc <HAL_RCC_OscConfig+0x4dc>)
 80045a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045aa:	4b85      	ldr	r3, [pc, #532]	; (80047c0 <HAL_RCC_OscConfig+0x4e0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fc fe6c 	bl	800128c <HAL_InitTick>
 80045b4:	4603      	mov	r3, r0
 80045b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d045      	beq.n	800464a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	e1b5      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d029      	beq.n	800461e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045ca:	4b7e      	ldr	r3, [pc, #504]	; (80047c4 <HAL_RCC_OscConfig+0x4e4>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fc fea8 	bl	8001324 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045d8:	f7fc fea4 	bl	8001324 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e1a1      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045ea:	4b72      	ldr	r3, [pc, #456]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f6:	4b6f      	ldr	r3, [pc, #444]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	496c      	ldr	r1, [pc, #432]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004604:	4313      	orrs	r3, r2
 8004606:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004608:	4b6a      	ldr	r3, [pc, #424]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	061b      	lsls	r3, r3, #24
 8004616:	4967      	ldr	r1, [pc, #412]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004618:	4313      	orrs	r3, r2
 800461a:	604b      	str	r3, [r1, #4]
 800461c:	e015      	b.n	800464a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800461e:	4b69      	ldr	r3, [pc, #420]	; (80047c4 <HAL_RCC_OscConfig+0x4e4>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7fc fe7e 	bl	8001324 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800462c:	f7fc fe7a 	bl	8001324 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e177      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800463e:	4b5d      	ldr	r3, [pc, #372]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d030      	beq.n	80046b8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d016      	beq.n	800468c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800465e:	4b5a      	ldr	r3, [pc, #360]	; (80047c8 <HAL_RCC_OscConfig+0x4e8>)
 8004660:	2201      	movs	r2, #1
 8004662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004664:	f7fc fe5e 	bl	8001324 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800466c:	f7fc fe5a 	bl	8001324 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e157      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800467e:	4b4d      	ldr	r3, [pc, #308]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x38c>
 800468a:	e015      	b.n	80046b8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800468c:	4b4e      	ldr	r3, [pc, #312]	; (80047c8 <HAL_RCC_OscConfig+0x4e8>)
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004692:	f7fc fe47 	bl	8001324 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800469a:	f7fc fe43 	bl	8001324 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e140      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046ac:	4b41      	ldr	r3, [pc, #260]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 80046ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f0      	bne.n	800469a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 80b5 	beq.w	8004830 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c6:	2300      	movs	r3, #0
 80046c8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ca:	4b3a      	ldr	r3, [pc, #232]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10d      	bne.n	80046f2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d6:	4b37      	ldr	r3, [pc, #220]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	4a36      	ldr	r2, [pc, #216]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 80046dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e0:	6253      	str	r3, [r2, #36]	; 0x24
 80046e2:	4b34      	ldr	r3, [pc, #208]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ee:	2301      	movs	r3, #1
 80046f0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f2:	4b36      	ldr	r3, [pc, #216]	; (80047cc <HAL_RCC_OscConfig+0x4ec>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d118      	bne.n	8004730 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046fe:	4b33      	ldr	r3, [pc, #204]	; (80047cc <HAL_RCC_OscConfig+0x4ec>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a32      	ldr	r2, [pc, #200]	; (80047cc <HAL_RCC_OscConfig+0x4ec>)
 8004704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800470a:	f7fc fe0b 	bl	8001324 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004712:	f7fc fe07 	bl	8001324 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b64      	cmp	r3, #100	; 0x64
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e104      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004724:	4b29      	ldr	r3, [pc, #164]	; (80047cc <HAL_RCC_OscConfig+0x4ec>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0f0      	beq.n	8004712 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d106      	bne.n	8004746 <HAL_RCC_OscConfig+0x466>
 8004738:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473c:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800473e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004742:	6353      	str	r3, [r2, #52]	; 0x34
 8004744:	e02d      	b.n	80047a2 <HAL_RCC_OscConfig+0x4c2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10c      	bne.n	8004768 <HAL_RCC_OscConfig+0x488>
 800474e:	4b19      	ldr	r3, [pc, #100]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004752:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004758:	6353      	str	r3, [r2, #52]	; 0x34
 800475a:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800475c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475e:	4a15      	ldr	r2, [pc, #84]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004760:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004764:	6353      	str	r3, [r2, #52]	; 0x34
 8004766:	e01c      	b.n	80047a2 <HAL_RCC_OscConfig+0x4c2>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b05      	cmp	r3, #5
 800476e:	d10c      	bne.n	800478a <HAL_RCC_OscConfig+0x4aa>
 8004770:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004774:	4a0f      	ldr	r2, [pc, #60]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800477a:	6353      	str	r3, [r2, #52]	; 0x34
 800477c:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800477e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004780:	4a0c      	ldr	r2, [pc, #48]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004786:	6353      	str	r3, [r2, #52]	; 0x34
 8004788:	e00b      	b.n	80047a2 <HAL_RCC_OscConfig+0x4c2>
 800478a:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800478c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478e:	4a09      	ldr	r2, [pc, #36]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004794:	6353      	str	r3, [r2, #52]	; 0x34
 8004796:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479a:	4a06      	ldr	r2, [pc, #24]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800479c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047a0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d024      	beq.n	80047f4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047aa:	f7fc fdbb 	bl	8001324 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047b0:	e019      	b.n	80047e6 <HAL_RCC_OscConfig+0x506>
 80047b2:	bf00      	nop
 80047b4:	40023800 	.word	0x40023800
 80047b8:	0800a000 	.word	0x0800a000
 80047bc:	20000000 	.word	0x20000000
 80047c0:	20000004 	.word	0x20000004
 80047c4:	42470020 	.word	0x42470020
 80047c8:	42470680 	.word	0x42470680
 80047cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d0:	f7fc fda8 	bl	8001324 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f241 3288 	movw	r2, #5000	; 0x1388
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e0a3      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047e6:	4b54      	ldr	r3, [pc, #336]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 80047e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0ee      	beq.n	80047d0 <HAL_RCC_OscConfig+0x4f0>
 80047f2:	e014      	b.n	800481e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f4:	f7fc fd96 	bl	8001324 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047fa:	e00a      	b.n	8004812 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047fc:	f7fc fd92 	bl	8001324 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f241 3288 	movw	r2, #5000	; 0x1388
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e08d      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004812:	4b49      	ldr	r3, [pc, #292]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 8004814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1ee      	bne.n	80047fc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800481e:	7ffb      	ldrb	r3, [r7, #31]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d105      	bne.n	8004830 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004824:	4b44      	ldr	r3, [pc, #272]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	4a43      	ldr	r2, [pc, #268]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 800482a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800482e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	2b00      	cmp	r3, #0
 8004836:	d079      	beq.n	800492c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2b0c      	cmp	r3, #12
 800483c:	d056      	beq.n	80048ec <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2b02      	cmp	r3, #2
 8004844:	d13b      	bne.n	80048be <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004846:	4b3d      	ldr	r3, [pc, #244]	; (800493c <HAL_RCC_OscConfig+0x65c>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7fc fd6a 	bl	8001324 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004854:	f7fc fd66 	bl	8001324 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e063      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004866:	4b34      	ldr	r3, [pc, #208]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004872:	4b31      	ldr	r3, [pc, #196]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	4319      	orrs	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	430b      	orrs	r3, r1
 800488a:	492b      	ldr	r1, [pc, #172]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 800488c:	4313      	orrs	r3, r2
 800488e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004890:	4b2a      	ldr	r3, [pc, #168]	; (800493c <HAL_RCC_OscConfig+0x65c>)
 8004892:	2201      	movs	r2, #1
 8004894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004896:	f7fc fd45 	bl	8001324 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800489e:	f7fc fd41 	bl	8001324 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e03e      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048b0:	4b21      	ldr	r3, [pc, #132]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0f0      	beq.n	800489e <HAL_RCC_OscConfig+0x5be>
 80048bc:	e036      	b.n	800492c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048be:	4b1f      	ldr	r3, [pc, #124]	; (800493c <HAL_RCC_OscConfig+0x65c>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7fc fd2e 	bl	8001324 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048cc:	f7fc fd2a 	bl	8001324 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e027      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048de:	4b16      	ldr	r3, [pc, #88]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x5ec>
 80048ea:	e01f      	b.n	800492c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e01a      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	429a      	cmp	r2, r3
 800490a:	d10d      	bne.n	8004928 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004916:	429a      	cmp	r2, r3
 8004918:	d106      	bne.n	8004928 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d001      	beq.n	800492c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3720      	adds	r7, #32
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800
 800493c:	42470060 	.word	0x42470060

08004940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e11a      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004954:	4b8f      	ldr	r3, [pc, #572]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d919      	bls.n	8004996 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d105      	bne.n	8004974 <HAL_RCC_ClockConfig+0x34>
 8004968:	4b8a      	ldr	r3, [pc, #552]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a89      	ldr	r2, [pc, #548]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 800496e:	f043 0304 	orr.w	r3, r3, #4
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	4b87      	ldr	r3, [pc, #540]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f023 0201 	bic.w	r2, r3, #1
 800497c:	4985      	ldr	r1, [pc, #532]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004984:	4b83      	ldr	r3, [pc, #524]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d001      	beq.n	8004996 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e0f9      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d008      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a2:	4b7d      	ldr	r3, [pc, #500]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	497a      	ldr	r1, [pc, #488]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 808e 	beq.w	8004ade <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049ca:	4b73      	ldr	r3, [pc, #460]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d121      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e0d7      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d107      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049e2:	4b6d      	ldr	r3, [pc, #436]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d115      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e0cb      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d107      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049fa:	4b67      	ldr	r3, [pc, #412]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e0bf      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004a0a:	4b63      	ldr	r3, [pc, #396]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e0b7      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a1a:	4b5f      	ldr	r3, [pc, #380]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f023 0203 	bic.w	r2, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	495c      	ldr	r1, [pc, #368]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a2c:	f7fc fc7a 	bl	8001324 <HAL_GetTick>
 8004a30:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d112      	bne.n	8004a60 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a3a:	e00a      	b.n	8004a52 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a3c:	f7fc fc72 	bl	8001324 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e09b      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a52:	4b51      	ldr	r3, [pc, #324]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d1ee      	bne.n	8004a3c <HAL_RCC_ClockConfig+0xfc>
 8004a5e:	e03e      	b.n	8004ade <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d112      	bne.n	8004a8e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a68:	e00a      	b.n	8004a80 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a6a:	f7fc fc5b 	bl	8001324 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e084      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a80:	4b45      	ldr	r3, [pc, #276]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	2b0c      	cmp	r3, #12
 8004a8a:	d1ee      	bne.n	8004a6a <HAL_RCC_ClockConfig+0x12a>
 8004a8c:	e027      	b.n	8004ade <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d11d      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a96:	e00a      	b.n	8004aae <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a98:	f7fc fc44 	bl	8001324 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e06d      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aae:	4b3a      	ldr	r3, [pc, #232]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d1ee      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x158>
 8004aba:	e010      	b.n	8004ade <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004abc:	f7fc fc32 	bl	8001324 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e05b      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ad2:	4b31      	ldr	r3, [pc, #196]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 030c 	and.w	r3, r3, #12
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1ee      	bne.n	8004abc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ade:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d219      	bcs.n	8004b20 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d105      	bne.n	8004afe <HAL_RCC_ClockConfig+0x1be>
 8004af2:	4b28      	ldr	r3, [pc, #160]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a27      	ldr	r2, [pc, #156]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004af8:	f043 0304 	orr.w	r3, r3, #4
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	4b25      	ldr	r3, [pc, #148]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 0201 	bic.w	r2, r3, #1
 8004b06:	4923      	ldr	r1, [pc, #140]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0e:	4b21      	ldr	r3, [pc, #132]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e034      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b2c:	4b1a      	ldr	r3, [pc, #104]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4917      	ldr	r1, [pc, #92]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	490f      	ldr	r1, [pc, #60]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b5e:	f000 f823 	bl	8004ba8 <HAL_RCC_GetSysClockFreq>
 8004b62:	4602      	mov	r2, r0
 8004b64:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	490b      	ldr	r1, [pc, #44]	; (8004b9c <HAL_RCC_ClockConfig+0x25c>)
 8004b70:	5ccb      	ldrb	r3, [r1, r3]
 8004b72:	fa22 f303 	lsr.w	r3, r2, r3
 8004b76:	4a0a      	ldr	r2, [pc, #40]	; (8004ba0 <HAL_RCC_ClockConfig+0x260>)
 8004b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <HAL_RCC_ClockConfig+0x264>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fc fb84 	bl	800128c <HAL_InitTick>
 8004b84:	4603      	mov	r3, r0
 8004b86:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b88:	7afb      	ldrb	r3, [r7, #11]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40023c00 	.word	0x40023c00
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	0800a000 	.word	0x0800a000
 8004ba0:	20000000 	.word	0x20000000
 8004ba4:	20000004 	.word	0x20000004

08004ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bac:	b08e      	sub	sp, #56	; 0x38
 8004bae:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004bb0:	4b58      	ldr	r3, [pc, #352]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	f003 030c 	and.w	r3, r3, #12
 8004bbc:	2b0c      	cmp	r3, #12
 8004bbe:	d00d      	beq.n	8004bdc <HAL_RCC_GetSysClockFreq+0x34>
 8004bc0:	2b0c      	cmp	r3, #12
 8004bc2:	f200 8092 	bhi.w	8004cea <HAL_RCC_GetSysClockFreq+0x142>
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d002      	beq.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x28>
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d003      	beq.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x2e>
 8004bce:	e08c      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bd0:	4b51      	ldr	r3, [pc, #324]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x170>)
 8004bd2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004bd4:	e097      	b.n	8004d06 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bd6:	4b51      	ldr	r3, [pc, #324]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x174>)
 8004bd8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004bda:	e094      	b.n	8004d06 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bde:	0c9b      	lsrs	r3, r3, #18
 8004be0:	f003 020f 	and.w	r2, r3, #15
 8004be4:	4b4e      	ldr	r3, [pc, #312]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x178>)
 8004be6:	5c9b      	ldrb	r3, [r3, r2]
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bec:	0d9b      	lsrs	r3, r3, #22
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bf6:	4b47      	ldr	r3, [pc, #284]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d021      	beq.n	8004c46 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	2200      	movs	r2, #0
 8004c06:	61bb      	str	r3, [r7, #24]
 8004c08:	61fa      	str	r2, [r7, #28]
 8004c0a:	4b44      	ldr	r3, [pc, #272]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x174>)
 8004c0c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004c10:	464a      	mov	r2, r9
 8004c12:	fb03 f202 	mul.w	r2, r3, r2
 8004c16:	2300      	movs	r3, #0
 8004c18:	4644      	mov	r4, r8
 8004c1a:	fb04 f303 	mul.w	r3, r4, r3
 8004c1e:	4413      	add	r3, r2
 8004c20:	4a3e      	ldr	r2, [pc, #248]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x174>)
 8004c22:	4644      	mov	r4, r8
 8004c24:	fba4 0102 	umull	r0, r1, r4, r2
 8004c28:	440b      	add	r3, r1
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	2200      	movs	r2, #0
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	617a      	str	r2, [r7, #20]
 8004c34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c38:	f7fb fcfe 	bl	8000638 <__aeabi_uldivmod>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4613      	mov	r3, r2
 8004c42:	637b      	str	r3, [r7, #52]	; 0x34
 8004c44:	e04e      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	2200      	movs	r2, #0
 8004c4a:	469a      	mov	sl, r3
 8004c4c:	4693      	mov	fp, r2
 8004c4e:	4652      	mov	r2, sl
 8004c50:	465b      	mov	r3, fp
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f04f 0100 	mov.w	r1, #0
 8004c5a:	0159      	lsls	r1, r3, #5
 8004c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c60:	0150      	lsls	r0, r2, #5
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	ebb2 080a 	subs.w	r8, r2, sl
 8004c6a:	eb63 090b 	sbc.w	r9, r3, fp
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c82:	ebb2 0408 	subs.w	r4, r2, r8
 8004c86:	eb63 0509 	sbc.w	r5, r3, r9
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	00eb      	lsls	r3, r5, #3
 8004c94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c98:	00e2      	lsls	r2, r4, #3
 8004c9a:	4614      	mov	r4, r2
 8004c9c:	461d      	mov	r5, r3
 8004c9e:	eb14 030a 	adds.w	r3, r4, sl
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	eb45 030b 	adc.w	r3, r5, fp
 8004ca8:	607b      	str	r3, [r7, #4]
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	028b      	lsls	r3, r1, #10
 8004cba:	4620      	mov	r0, r4
 8004cbc:	4629      	mov	r1, r5
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004cc4:	4601      	mov	r1, r0
 8004cc6:	028a      	lsls	r2, r1, #10
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	2200      	movs	r2, #0
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	60fa      	str	r2, [r7, #12]
 8004cd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cd8:	f7fb fcae 	bl	8000638 <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8004ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ce8:	e00d      	b.n	8004d06 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004cea:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	0b5b      	lsrs	r3, r3, #13
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3738      	adds	r7, #56	; 0x38
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d12:	bf00      	nop
 8004d14:	40023800 	.word	0x40023800
 8004d18:	00f42400 	.word	0x00f42400
 8004d1c:	00b71b00 	.word	0x00b71b00
 8004d20:	08009ff4 	.word	0x08009ff4

08004d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d28:	4b02      	ldr	r3, [pc, #8]	; (8004d34 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr
 8004d34:	20000000 	.word	0x20000000

08004d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d3c:	f7ff fff2 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d40:	4602      	mov	r2, r0
 8004d42:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	4903      	ldr	r1, [pc, #12]	; (8004d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d4e:	5ccb      	ldrb	r3, [r1, r3]
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	0800a010 	.word	0x0800a010

08004d60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004d6c:	4b29      	ldr	r3, [pc, #164]	; (8004e14 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d12c      	bne.n	8004dd2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d78:	4b26      	ldr	r3, [pc, #152]	; (8004e14 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004d84:	4b24      	ldr	r3, [pc, #144]	; (8004e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	e016      	b.n	8004dbe <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d90:	4b20      	ldr	r3, [pc, #128]	; (8004e14 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	4a1f      	ldr	r2, [pc, #124]	; (8004e14 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	6253      	str	r3, [r2, #36]	; 0x24
 8004d9c:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004da8:	4b1b      	ldr	r3, [pc, #108]	; (8004e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004db0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004db2:	4b18      	ldr	r3, [pc, #96]	; (8004e14 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	4a17      	ldr	r2, [pc, #92]	; (8004e14 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dbc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004dc4:	d105      	bne.n	8004dd2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004dcc:	d101      	bne.n	8004dd2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004dce:	2301      	movs	r3, #1
 8004dd0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d105      	bne.n	8004de4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004dd8:	4b10      	ldr	r3, [pc, #64]	; (8004e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a0f      	ldr	r2, [pc, #60]	; (8004e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dde:	f043 0304 	orr.w	r3, r3, #4
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f023 0201 	bic.w	r2, r3, #1
 8004dec:	490b      	ldr	r1, [pc, #44]	; (8004e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004df4:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d001      	beq.n	8004e06 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40023800 	.word	0x40023800
 8004e18:	40007000 	.word	0x40007000
 8004e1c:	40023c00 	.word	0x40023c00

08004e20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e06e      	b.n	8004f10 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d108      	bne.n	8004e4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e42:	d009      	beq.n	8004e58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	61da      	str	r2, [r3, #28]
 8004e4a:	e005      	b.n	8004e58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fc f918 	bl	80010a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004edc:	ea42 0103 	orr.w	r1, r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	0c1a      	lsrs	r2, r3, #16
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f002 0204 	and.w	r2, r2, #4
 8004efe:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f28:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004f2c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f4c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004f50:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	4013      	ands	r3, r2
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr

08004f78 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f78:	b084      	sub	sp, #16
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	f107 0014 	add.w	r0, r7, #20
 8004f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	b004      	add	sp, #16
 8004fb6:	4770      	bx	lr

08004fb8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b09d      	sub	sp, #116	; 0x74
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fde:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	78db      	ldrb	r3, [r3, #3]
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d81f      	bhi.n	800502a <USB_ActivateEndpoint+0x72>
 8004fea:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <USB_ActivateEndpoint+0x38>)
 8004fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff0:	08005001 	.word	0x08005001
 8004ff4:	0800501d 	.word	0x0800501d
 8004ff8:	08005033 	.word	0x08005033
 8004ffc:	0800500f 	.word	0x0800500f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005000:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005004:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005008:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800500c:	e012      	b.n	8005034 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800500e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005012:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005016:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800501a:	e00b      	b.n	8005034 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800501c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005020:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005024:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005028:	e004      	b.n	8005034 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005030:	e000      	b.n	8005034 <USB_ActivateEndpoint+0x7c>
      break;
 8005032:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	441a      	add	r2, r3
 800503e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800504a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800504e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005052:	b29b      	uxth	r3, r3
 8005054:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	b29b      	uxth	r3, r3
 8005064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506c:	b29a      	uxth	r2, r3
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	b29b      	uxth	r3, r3
 8005074:	4313      	orrs	r3, r2
 8005076:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	441a      	add	r2, r3
 8005084:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800508c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005098:	b29b      	uxth	r3, r3
 800509a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	7b1b      	ldrb	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f040 8178 	bne.w	8005396 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	785b      	ldrb	r3, [r3, #1]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 8084 	beq.w	80051b8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	61bb      	str	r3, [r7, #24]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	4413      	add	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	011a      	lsls	r2, r3, #4
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	88db      	ldrh	r3, [r3, #6]
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	b29b      	uxth	r3, r3
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	827b      	strh	r3, [r7, #18]
 80050f2:	8a7b      	ldrh	r3, [r7, #18]
 80050f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01b      	beq.n	8005134 <USB_ActivateEndpoint+0x17c>
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005112:	823b      	strh	r3, [r7, #16]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	441a      	add	r2, r3
 800511e:	8a3b      	ldrh	r3, [r7, #16]
 8005120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800512c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005130:	b29b      	uxth	r3, r3
 8005132:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	78db      	ldrb	r3, [r3, #3]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d020      	beq.n	800517e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005152:	81bb      	strh	r3, [r7, #12]
 8005154:	89bb      	ldrh	r3, [r7, #12]
 8005156:	f083 0320 	eor.w	r3, r3, #32
 800515a:	81bb      	strh	r3, [r7, #12]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	441a      	add	r2, r3
 8005166:	89bb      	ldrh	r3, [r7, #12]
 8005168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800516c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005178:	b29b      	uxth	r3, r3
 800517a:	8013      	strh	r3, [r2, #0]
 800517c:	e2d5      	b.n	800572a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	b29b      	uxth	r3, r3
 800518c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005194:	81fb      	strh	r3, [r7, #14]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	441a      	add	r2, r3
 80051a0:	89fb      	ldrh	r3, [r7, #14]
 80051a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	8013      	strh	r3, [r2, #0]
 80051b6:	e2b8      	b.n	800572a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	633b      	str	r3, [r7, #48]	; 0x30
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	4413      	add	r3, r2
 80051ca:	633b      	str	r3, [r7, #48]	; 0x30
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	011a      	lsls	r2, r3, #4
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80051da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	88db      	ldrh	r3, [r3, #6]
 80051e0:	085b      	lsrs	r3, r3, #1
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	461a      	mov	r2, r3
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	4413      	add	r3, r2
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	011a      	lsls	r2, r3, #4
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	4413      	add	r3, r2
 800520a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800521a:	b29a      	uxth	r2, r3
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	801a      	strh	r2, [r3, #0]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b3e      	cmp	r3, #62	; 0x3e
 8005226:	d91d      	bls.n	8005264 <USB_ActivateEndpoint+0x2ac>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	095b      	lsrs	r3, r3, #5
 800522e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	f003 031f 	and.w	r3, r3, #31
 8005238:	2b00      	cmp	r3, #0
 800523a:	d102      	bne.n	8005242 <USB_ActivateEndpoint+0x28a>
 800523c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800523e:	3b01      	subs	r3, #1
 8005240:	66bb      	str	r3, [r7, #104]	; 0x68
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	b29a      	uxth	r2, r3
 8005248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800524a:	b29b      	uxth	r3, r3
 800524c:	029b      	lsls	r3, r3, #10
 800524e:	b29b      	uxth	r3, r3
 8005250:	4313      	orrs	r3, r2
 8005252:	b29b      	uxth	r3, r3
 8005254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800525c:	b29a      	uxth	r2, r3
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	801a      	strh	r2, [r3, #0]
 8005262:	e026      	b.n	80052b2 <USB_ActivateEndpoint+0x2fa>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10a      	bne.n	8005282 <USB_ActivateEndpoint+0x2ca>
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	b29b      	uxth	r3, r3
 8005272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800527a:	b29a      	uxth	r2, r3
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	e017      	b.n	80052b2 <USB_ActivateEndpoint+0x2fa>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	085b      	lsrs	r3, r3, #1
 8005288:	66bb      	str	r3, [r7, #104]	; 0x68
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <USB_ActivateEndpoint+0x2e4>
 8005296:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005298:	3301      	adds	r3, #1
 800529a:	66bb      	str	r3, [r7, #104]	; 0x68
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	029b      	lsls	r3, r3, #10
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	4313      	orrs	r3, r2
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	847b      	strh	r3, [r7, #34]	; 0x22
 80052c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01b      	beq.n	8005302 <USB_ActivateEndpoint+0x34a>
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e0:	843b      	strh	r3, [r7, #32]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	441a      	add	r2, r3
 80052ec:	8c3b      	ldrh	r3, [r7, #32]
 80052ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fe:	b29b      	uxth	r3, r3
 8005300:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d124      	bne.n	8005354 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	b29b      	uxth	r3, r3
 8005318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800531c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005320:	83bb      	strh	r3, [r7, #28]
 8005322:	8bbb      	ldrh	r3, [r7, #28]
 8005324:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005328:	83bb      	strh	r3, [r7, #28]
 800532a:	8bbb      	ldrh	r3, [r7, #28]
 800532c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005330:	83bb      	strh	r3, [r7, #28]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	441a      	add	r2, r3
 800533c:	8bbb      	ldrh	r3, [r7, #28]
 800533e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800534a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534e:	b29b      	uxth	r3, r3
 8005350:	8013      	strh	r3, [r2, #0]
 8005352:	e1ea      	b.n	800572a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29b      	uxth	r3, r3
 8005362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	83fb      	strh	r3, [r7, #30]
 800536c:	8bfb      	ldrh	r3, [r7, #30]
 800536e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005372:	83fb      	strh	r3, [r7, #30]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	441a      	add	r2, r3
 800537e:	8bfb      	ldrh	r3, [r7, #30]
 8005380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800538c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005390:	b29b      	uxth	r3, r3
 8005392:	8013      	strh	r3, [r2, #0]
 8005394:	e1c9      	b.n	800572a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	78db      	ldrb	r3, [r3, #3]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d11e      	bne.n	80053dc <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	441a      	add	r2, r3
 80053c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80053c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80053d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	8013      	strh	r3, [r2, #0]
 80053da:	e01d      	b.n	8005418 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80053ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	441a      	add	r2, r3
 8005400:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800540c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005414:	b29b      	uxth	r3, r3
 8005416:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005422:	b29b      	uxth	r3, r3
 8005424:	461a      	mov	r2, r3
 8005426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005428:	4413      	add	r3, r2
 800542a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	011a      	lsls	r2, r3, #4
 8005432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005434:	4413      	add	r3, r2
 8005436:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800543a:	65bb      	str	r3, [r7, #88]	; 0x58
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	891b      	ldrh	r3, [r3, #8]
 8005440:	085b      	lsrs	r3, r3, #1
 8005442:	b29b      	uxth	r3, r3
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	b29a      	uxth	r2, r3
 8005448:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800544a:	801a      	strh	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	657b      	str	r3, [r7, #84]	; 0x54
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005456:	b29b      	uxth	r3, r3
 8005458:	461a      	mov	r2, r3
 800545a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800545c:	4413      	add	r3, r2
 800545e:	657b      	str	r3, [r7, #84]	; 0x54
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	011a      	lsls	r2, r3, #4
 8005466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005468:	4413      	add	r3, r2
 800546a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800546e:	653b      	str	r3, [r7, #80]	; 0x50
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	895b      	ldrh	r3, [r3, #10]
 8005474:	085b      	lsrs	r3, r3, #1
 8005476:	b29b      	uxth	r3, r3
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800547e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f040 8093 	bne.w	80055b0 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800549a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800549e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01b      	beq.n	80054de <USB_ActivateEndpoint+0x526>
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	441a      	add	r2, r3
 80054c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80054ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054da:	b29b      	uxth	r3, r3
 80054dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80054ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80054ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d01b      	beq.n	800552e <USB_ActivateEndpoint+0x576>
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b29b      	uxth	r3, r3
 8005504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	441a      	add	r2, r3
 8005518:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800551a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800551e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005526:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800552a:	b29b      	uxth	r3, r3
 800552c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29b      	uxth	r3, r3
 800553c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005544:	873b      	strh	r3, [r7, #56]	; 0x38
 8005546:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005548:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800554c:	873b      	strh	r3, [r7, #56]	; 0x38
 800554e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005550:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005554:	873b      	strh	r3, [r7, #56]	; 0x38
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	441a      	add	r2, r3
 8005560:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005572:	b29b      	uxth	r3, r3
 8005574:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	b29b      	uxth	r3, r3
 8005584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	441a      	add	r2, r3
 8005598:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800559a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800559e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	8013      	strh	r3, [r2, #0]
 80055ae:	e0bc      	b.n	800572a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80055c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01d      	beq.n	8005608 <USB_ActivateEndpoint+0x650>
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	441a      	add	r2, r3
 80055f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80055f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005604:	b29b      	uxth	r3, r3
 8005606:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005618:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800561c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005620:	2b00      	cmp	r3, #0
 8005622:	d01d      	beq.n	8005660 <USB_ActivateEndpoint+0x6a8>
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	441a      	add	r2, r3
 8005648:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800564c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005658:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800565c:	b29b      	uxth	r3, r3
 800565e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	78db      	ldrb	r3, [r3, #3]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d024      	beq.n	80056b2 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800567e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005682:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005686:	f083 0320 	eor.w	r3, r3, #32
 800568a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	441a      	add	r2, r3
 8005698:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800569c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	8013      	strh	r3, [r2, #0]
 80056b0:	e01d      	b.n	80056ee <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	441a      	add	r2, r3
 80056d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80056da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005704:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	441a      	add	r2, r3
 8005712:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800571a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800571e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005726:	b29b      	uxth	r3, r3
 8005728:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800572a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800572e:	4618      	mov	r0, r3
 8005730:	3774      	adds	r7, #116	; 0x74
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr

08005738 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005738:	b480      	push	{r7}
 800573a:	b08d      	sub	sp, #52	; 0x34
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	7b1b      	ldrb	r3, [r3, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f040 808e 	bne.w	8005868 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	785b      	ldrb	r3, [r3, #1]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d044      	beq.n	80057de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	81bb      	strh	r3, [r7, #12]
 8005762:	89bb      	ldrh	r3, [r7, #12]
 8005764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01b      	beq.n	80057a4 <USB_DeactivateEndpoint+0x6c>
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800577e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005782:	817b      	strh	r3, [r7, #10]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	441a      	add	r2, r3
 800578e:	897b      	ldrh	r3, [r7, #10]
 8005790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800579c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ba:	813b      	strh	r3, [r7, #8]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	441a      	add	r2, r3
 80057c6:	893b      	ldrh	r3, [r7, #8]
 80057c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d8:	b29b      	uxth	r3, r3
 80057da:	8013      	strh	r3, [r2, #0]
 80057dc:	e192      	b.n	8005b04 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	827b      	strh	r3, [r7, #18]
 80057ec:	8a7b      	ldrh	r3, [r7, #18]
 80057ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d01b      	beq.n	800582e <USB_DeactivateEndpoint+0xf6>
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	b29b      	uxth	r3, r3
 8005804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580c:	823b      	strh	r3, [r7, #16]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	441a      	add	r2, r3
 8005818:	8a3b      	ldrh	r3, [r7, #16]
 800581a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800581e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582a:	b29b      	uxth	r3, r3
 800582c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005844:	81fb      	strh	r3, [r7, #14]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	441a      	add	r2, r3
 8005850:	89fb      	ldrh	r3, [r7, #14]
 8005852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800585a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800585e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005862:	b29b      	uxth	r3, r3
 8005864:	8013      	strh	r3, [r2, #0]
 8005866:	e14d      	b.n	8005b04 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f040 80a5 	bne.w	80059bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	843b      	strh	r3, [r7, #32]
 8005880:	8c3b      	ldrh	r3, [r7, #32]
 8005882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d01b      	beq.n	80058c2 <USB_DeactivateEndpoint+0x18a>
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	b29b      	uxth	r3, r3
 8005898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800589c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a0:	83fb      	strh	r3, [r7, #30]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	441a      	add	r2, r3
 80058ac:	8bfb      	ldrh	r3, [r7, #30]
 80058ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058be:	b29b      	uxth	r3, r3
 80058c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	83bb      	strh	r3, [r7, #28]
 80058d0:	8bbb      	ldrh	r3, [r7, #28]
 80058d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d01b      	beq.n	8005912 <USB_DeactivateEndpoint+0x1da>
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f0:	837b      	strh	r3, [r7, #26]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	441a      	add	r2, r3
 80058fc:	8b7b      	ldrh	r3, [r7, #26]
 80058fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800590e:	b29b      	uxth	r3, r3
 8005910:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	b29b      	uxth	r3, r3
 8005920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005928:	833b      	strh	r3, [r7, #24]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	441a      	add	r2, r3
 8005934:	8b3b      	ldrh	r3, [r7, #24]
 8005936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800593a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800593e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005942:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005946:	b29b      	uxth	r3, r3
 8005948:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	b29b      	uxth	r3, r3
 8005958:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800595c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005960:	82fb      	strh	r3, [r7, #22]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	441a      	add	r2, r3
 800596c:	8afb      	ldrh	r3, [r7, #22]
 800596e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800597a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800597e:	b29b      	uxth	r3, r3
 8005980:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	b29b      	uxth	r3, r3
 8005990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005998:	82bb      	strh	r3, [r7, #20]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	441a      	add	r2, r3
 80059a4:	8abb      	ldrh	r3, [r7, #20]
 80059a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	8013      	strh	r3, [r2, #0]
 80059ba:	e0a3      	b.n	8005b04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80059ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d01b      	beq.n	8005a0c <USB_DeactivateEndpoint+0x2d4>
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	441a      	add	r2, r3
 80059f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80059f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005a1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01b      	beq.n	8005a5c <USB_DeactivateEndpoint+0x324>
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3a:	853b      	strh	r3, [r7, #40]	; 0x28
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	441a      	add	r2, r3
 8005a46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a72:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	441a      	add	r2, r3
 8005a7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aaa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	441a      	add	r2, r3
 8005ab6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae2:	847b      	strh	r3, [r7, #34]	; 0x22
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	441a      	add	r2, r3
 8005aee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3734      	adds	r7, #52	; 0x34
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b0c2      	sub	sp, #264	; 0x108
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b1e:	6018      	str	r0, [r3, #0]
 8005b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b28:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	785b      	ldrb	r3, [r3, #1]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	f040 86b7 	bne.w	80068aa <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	699a      	ldr	r2, [r3, #24]
 8005b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d908      	bls.n	8005b6a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b68:	e007      	b.n	8005b7a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	7b1b      	ldrb	r3, [r3, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d13a      	bne.n	8005c00 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6959      	ldr	r1, [r3, #20]
 8005b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	88da      	ldrh	r2, [r3, #6]
 8005ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005bac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005bb0:	6800      	ldr	r0, [r0, #0]
 8005bb2:	f001 fc87 	bl	80074c4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]
 8005bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	011a      	lsls	r2, r3, #4
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	4413      	add	r3, r2
 8005bec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	801a      	strh	r2, [r3, #0]
 8005bfc:	f000 be1f 	b.w	800683e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	78db      	ldrb	r3, [r3, #3]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	f040 8462 	bne.w	80064d6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6a1a      	ldr	r2, [r3, #32]
 8005c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	f240 83df 	bls.w	80063ee <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c56:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	441a      	add	r2, r3
 8005c74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c80:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6a1a      	ldr	r2, [r3, #32]
 8005c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c9c:	1ad2      	subs	r2, r2, r3
 8005c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 81c7 	beq.w	8006060 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8005cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	785b      	ldrb	r3, [r3, #1]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d177      	bne.n	8005dde <USB_EPStartXfer+0x2ce>
 8005cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	4413      	add	r3, r2
 8005d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	011a      	lsls	r2, r3, #4
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	4413      	add	r3, r2
 8005d24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d3e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d40:	d921      	bls.n	8005d86 <USB_EPStartXfer+0x276>
 8005d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d50:	f003 031f 	and.w	r3, r3, #31
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d104      	bne.n	8005d62 <USB_EPStartXfer+0x252>
 8005d58:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	029b      	lsls	r3, r3, #10
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	4313      	orrs	r3, r2
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	801a      	strh	r2, [r3, #0]
 8005d84:	e050      	b.n	8005e28 <USB_EPStartXfer+0x318>
 8005d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10a      	bne.n	8005da4 <USB_EPStartXfer+0x294>
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	801a      	strh	r2, [r3, #0]
 8005da2:	e041      	b.n	8005e28 <USB_EPStartXfer+0x318>
 8005da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d004      	beq.n	8005dc4 <USB_EPStartXfer+0x2b4>
 8005dba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	029b      	lsls	r3, r3, #10
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	801a      	strh	r2, [r3, #0]
 8005ddc:	e024      	b.n	8005e28 <USB_EPStartXfer+0x318>
 8005dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	785b      	ldrb	r3, [r3, #1]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d11c      	bne.n	8005e28 <USB_EPStartXfer+0x318>
 8005dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	461a      	mov	r2, r3
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	4413      	add	r3, r2
 8005e04:	633b      	str	r3, [r7, #48]	; 0x30
 8005e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	011a      	lsls	r2, r3, #4
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e16:	4413      	add	r3, r2
 8005e18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	895b      	ldrh	r3, [r3, #10]
 8005e34:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6959      	ldr	r1, [r3, #20]
 8005e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e4e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e52:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e56:	6800      	ldr	r0, [r0, #0]
 8005e58:	f001 fb34 	bl	80074c4 <USB_WritePMA>
            ep->xfer_buff += len;
 8005e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695a      	ldr	r2, [r3, #20]
 8005e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e6c:	441a      	add	r2, r3
 8005e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6a1a      	ldr	r2, [r3, #32]
 8005e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d90f      	bls.n	8005eb6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6a1a      	ldr	r2, [r3, #32]
 8005ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea6:	1ad2      	subs	r2, r2, r3
 8005ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	621a      	str	r2, [r3, #32]
 8005eb4:	e00e      	b.n	8005ed4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	785b      	ldrb	r3, [r3, #1]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d177      	bne.n	8005fd4 <USB_EPStartXfer+0x4c4>
 8005ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	61bb      	str	r3, [r7, #24]
 8005ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	4413      	add	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
 8005f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	011a      	lsls	r2, r3, #4
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	801a      	strh	r2, [r3, #0]
 8005f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f34:	2b3e      	cmp	r3, #62	; 0x3e
 8005f36:	d921      	bls.n	8005f7c <USB_EPStartXfer+0x46c>
 8005f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f3c:	095b      	lsrs	r3, r3, #5
 8005f3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f46:	f003 031f 	and.w	r3, r3, #31
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d104      	bne.n	8005f58 <USB_EPStartXfer+0x448>
 8005f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f52:	3b01      	subs	r3, #1
 8005f54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	029b      	lsls	r3, r3, #10
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	801a      	strh	r2, [r3, #0]
 8005f7a:	e056      	b.n	800602a <USB_EPStartXfer+0x51a>
 8005f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10a      	bne.n	8005f9a <USB_EPStartXfer+0x48a>
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	801a      	strh	r2, [r3, #0]
 8005f98:	e047      	b.n	800602a <USB_EPStartXfer+0x51a>
 8005f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9e:	085b      	lsrs	r3, r3, #1
 8005fa0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d004      	beq.n	8005fba <USB_EPStartXfer+0x4aa>
 8005fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	029b      	lsls	r3, r3, #10
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	801a      	strh	r2, [r3, #0]
 8005fd2:	e02a      	b.n	800602a <USB_EPStartXfer+0x51a>
 8005fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d122      	bne.n	800602a <USB_EPStartXfer+0x51a>
 8005fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	623b      	str	r3, [r7, #32]
 8005ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	4413      	add	r3, r2
 8006006:	623b      	str	r3, [r7, #32]
 8006008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	011a      	lsls	r2, r3, #4
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	4413      	add	r3, r2
 800601a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800601e:	61fb      	str	r3, [r7, #28]
 8006020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006024:	b29a      	uxth	r2, r3
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800602a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	891b      	ldrh	r3, [r3, #8]
 8006036:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800603a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800603e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6959      	ldr	r1, [r3, #20]
 8006046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800604a:	b29b      	uxth	r3, r3
 800604c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006050:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006054:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006058:	6800      	ldr	r0, [r0, #0]
 800605a:	f001 fa33 	bl	80074c4 <USB_WritePMA>
 800605e:	e3ee      	b.n	800683e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	785b      	ldrb	r3, [r3, #1]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d177      	bne.n	8006160 <USB_EPStartXfer+0x650>
 8006070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006074:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	64bb      	str	r3, [r7, #72]	; 0x48
 800607c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006080:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800608a:	b29b      	uxth	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006090:	4413      	add	r3, r2
 8006092:	64bb      	str	r3, [r7, #72]	; 0x48
 8006094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	011a      	lsls	r2, r3, #4
 80060a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a4:	4413      	add	r3, r2
 80060a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060aa:	647b      	str	r3, [r7, #68]	; 0x44
 80060ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ba:	801a      	strh	r2, [r3, #0]
 80060bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c0:	2b3e      	cmp	r3, #62	; 0x3e
 80060c2:	d921      	bls.n	8006108 <USB_EPStartXfer+0x5f8>
 80060c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c8:	095b      	lsrs	r3, r3, #5
 80060ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80060ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d104      	bne.n	80060e4 <USB_EPStartXfer+0x5d4>
 80060da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060de:	3b01      	subs	r3, #1
 80060e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80060e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	029b      	lsls	r3, r3, #10
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	4313      	orrs	r3, r2
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006100:	b29a      	uxth	r2, r3
 8006102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006104:	801a      	strh	r2, [r3, #0]
 8006106:	e056      	b.n	80061b6 <USB_EPStartXfer+0x6a6>
 8006108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <USB_EPStartXfer+0x616>
 8006110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800611a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800611e:	b29a      	uxth	r2, r3
 8006120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	e047      	b.n	80061b6 <USB_EPStartXfer+0x6a6>
 8006126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800612a:	085b      	lsrs	r3, r3, #1
 800612c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d004      	beq.n	8006146 <USB_EPStartXfer+0x636>
 800613c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006140:	3301      	adds	r3, #1
 8006142:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	b29a      	uxth	r2, r3
 800614c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006150:	b29b      	uxth	r3, r3
 8006152:	029b      	lsls	r3, r3, #10
 8006154:	b29b      	uxth	r3, r3
 8006156:	4313      	orrs	r3, r2
 8006158:	b29a      	uxth	r2, r3
 800615a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	e02a      	b.n	80061b6 <USB_EPStartXfer+0x6a6>
 8006160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d122      	bne.n	80061b6 <USB_EPStartXfer+0x6a6>
 8006170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	653b      	str	r3, [r7, #80]	; 0x50
 800617c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006180:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800618a:	b29b      	uxth	r3, r3
 800618c:	461a      	mov	r2, r3
 800618e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006190:	4413      	add	r3, r2
 8006192:	653b      	str	r3, [r7, #80]	; 0x50
 8006194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	011a      	lsls	r2, r3, #4
 80061a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061a4:	4413      	add	r3, r2
 80061a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80061b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	891b      	ldrh	r3, [r3, #8]
 80061c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6959      	ldr	r1, [r3, #20]
 80061d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80061dc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80061e0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80061e4:	6800      	ldr	r0, [r0, #0]
 80061e6:	f001 f96d 	bl	80074c4 <USB_WritePMA>
            ep->xfer_buff += len;
 80061ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695a      	ldr	r2, [r3, #20]
 80061f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061fa:	441a      	add	r2, r3
 80061fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800620c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6a1a      	ldr	r2, [r3, #32]
 8006214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	429a      	cmp	r2, r3
 8006222:	d90f      	bls.n	8006244 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6a1a      	ldr	r2, [r3, #32]
 8006230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006234:	1ad2      	subs	r2, r2, r3
 8006236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	621a      	str	r2, [r3, #32]
 8006242:	e00e      	b.n	8006262 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2200      	movs	r2, #0
 8006260:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	643b      	str	r3, [r7, #64]	; 0x40
 800626e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	785b      	ldrb	r3, [r3, #1]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d177      	bne.n	800636e <USB_EPStartXfer+0x85e>
 800627e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006282:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	63bb      	str	r3, [r7, #56]	; 0x38
 800628a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006298:	b29b      	uxth	r3, r3
 800629a:	461a      	mov	r2, r3
 800629c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629e:	4413      	add	r3, r2
 80062a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80062a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	011a      	lsls	r2, r3, #4
 80062b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b2:	4413      	add	r3, r2
 80062b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062b8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c8:	801a      	strh	r2, [r3, #0]
 80062ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ce:	2b3e      	cmp	r3, #62	; 0x3e
 80062d0:	d921      	bls.n	8006316 <USB_EPStartXfer+0x806>
 80062d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d6:	095b      	lsrs	r3, r3, #5
 80062d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80062dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e0:	f003 031f 	and.w	r3, r3, #31
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d104      	bne.n	80062f2 <USB_EPStartXfer+0x7e2>
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	3b01      	subs	r3, #1
 80062ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80062f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	029b      	lsls	r3, r3, #10
 8006300:	b29b      	uxth	r3, r3
 8006302:	4313      	orrs	r3, r2
 8006304:	b29b      	uxth	r3, r3
 8006306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800630a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800630e:	b29a      	uxth	r2, r3
 8006310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006312:	801a      	strh	r2, [r3, #0]
 8006314:	e050      	b.n	80063b8 <USB_EPStartXfer+0x8a8>
 8006316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10a      	bne.n	8006334 <USB_EPStartXfer+0x824>
 800631e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800632c:	b29a      	uxth	r2, r3
 800632e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006330:	801a      	strh	r2, [r3, #0]
 8006332:	e041      	b.n	80063b8 <USB_EPStartXfer+0x8a8>
 8006334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800633e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d004      	beq.n	8006354 <USB_EPStartXfer+0x844>
 800634a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634e:	3301      	adds	r3, #1
 8006350:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29a      	uxth	r2, r3
 800635a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635e:	b29b      	uxth	r3, r3
 8006360:	029b      	lsls	r3, r3, #10
 8006362:	b29b      	uxth	r3, r3
 8006364:	4313      	orrs	r3, r2
 8006366:	b29a      	uxth	r2, r3
 8006368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636a:	801a      	strh	r2, [r3, #0]
 800636c:	e024      	b.n	80063b8 <USB_EPStartXfer+0x8a8>
 800636e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	785b      	ldrb	r3, [r3, #1]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d11c      	bne.n	80063b8 <USB_EPStartXfer+0x8a8>
 800637e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006382:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800638c:	b29b      	uxth	r3, r3
 800638e:	461a      	mov	r2, r3
 8006390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006392:	4413      	add	r3, r2
 8006394:	643b      	str	r3, [r7, #64]	; 0x40
 8006396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	011a      	lsls	r2, r3, #4
 80063a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063a6:	4413      	add	r3, r2
 80063a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80063b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	895b      	ldrh	r3, [r3, #10]
 80063c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6959      	ldr	r1, [r3, #20]
 80063d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d8:	b29b      	uxth	r3, r3
 80063da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80063de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80063e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80063e6:	6800      	ldr	r0, [r0, #0]
 80063e8:	f001 f86c 	bl	80074c4 <USB_WritePMA>
 80063ec:	e227      	b.n	800683e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80063ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80063fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006402:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	b29b      	uxth	r3, r3
 800641c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006424:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	441a      	add	r2, r3
 8006442:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800644a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800644e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006456:	b29b      	uxth	r3, r3
 8006458:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800645a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800645e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006474:	b29b      	uxth	r3, r3
 8006476:	461a      	mov	r2, r3
 8006478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800647a:	4413      	add	r3, r2
 800647c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800647e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	011a      	lsls	r2, r3, #4
 800648c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800648e:	4413      	add	r3, r2
 8006490:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006494:	65bb      	str	r3, [r7, #88]	; 0x58
 8006496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800649a:	b29a      	uxth	r2, r3
 800649c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800649e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80064a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	891b      	ldrh	r3, [r3, #8]
 80064ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6959      	ldr	r1, [r3, #20]
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80064c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80064ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80064ce:	6800      	ldr	r0, [r0, #0]
 80064d0:	f000 fff8 	bl	80074c4 <USB_WritePMA>
 80064d4:	e1b3      	b.n	800683e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80064d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6a1a      	ldr	r2, [r3, #32]
 80064e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e6:	1ad2      	subs	r2, r2, r3
 80064e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80064f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 80c6 	beq.w	80066a8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800651c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006520:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	673b      	str	r3, [r7, #112]	; 0x70
 8006528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d177      	bne.n	8006628 <USB_EPStartXfer+0xb18>
 8006538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	66bb      	str	r3, [r7, #104]	; 0x68
 8006544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006548:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006552:	b29b      	uxth	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006558:	4413      	add	r3, r2
 800655a:	66bb      	str	r3, [r7, #104]	; 0x68
 800655c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	011a      	lsls	r2, r3, #4
 800656a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800656c:	4413      	add	r3, r2
 800656e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006572:	667b      	str	r3, [r7, #100]	; 0x64
 8006574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800657e:	b29a      	uxth	r2, r3
 8006580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006588:	2b3e      	cmp	r3, #62	; 0x3e
 800658a:	d921      	bls.n	80065d0 <USB_EPStartXfer+0xac0>
 800658c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006590:	095b      	lsrs	r3, r3, #5
 8006592:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800659a:	f003 031f 	and.w	r3, r3, #31
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d104      	bne.n	80065ac <USB_EPStartXfer+0xa9c>
 80065a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80065a6:	3b01      	subs	r3, #1
 80065a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	029b      	lsls	r3, r3, #10
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	4313      	orrs	r3, r2
 80065be:	b29b      	uxth	r3, r3
 80065c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	e050      	b.n	8006672 <USB_EPStartXfer+0xb62>
 80065d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10a      	bne.n	80065ee <USB_EPStartXfer+0xade>
 80065d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ea:	801a      	strh	r2, [r3, #0]
 80065ec:	e041      	b.n	8006672 <USB_EPStartXfer+0xb62>
 80065ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f2:	085b      	lsrs	r3, r3, #1
 80065f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	d004      	beq.n	800660e <USB_EPStartXfer+0xafe>
 8006604:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006608:	3301      	adds	r3, #1
 800660a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800660e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	b29a      	uxth	r2, r3
 8006614:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006618:	b29b      	uxth	r3, r3
 800661a:	029b      	lsls	r3, r3, #10
 800661c:	b29b      	uxth	r3, r3
 800661e:	4313      	orrs	r3, r2
 8006620:	b29a      	uxth	r2, r3
 8006622:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006624:	801a      	strh	r2, [r3, #0]
 8006626:	e024      	b.n	8006672 <USB_EPStartXfer+0xb62>
 8006628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800662c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	785b      	ldrb	r3, [r3, #1]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d11c      	bne.n	8006672 <USB_EPStartXfer+0xb62>
 8006638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006646:	b29b      	uxth	r3, r3
 8006648:	461a      	mov	r2, r3
 800664a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800664c:	4413      	add	r3, r2
 800664e:	673b      	str	r3, [r7, #112]	; 0x70
 8006650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	011a      	lsls	r2, r3, #4
 800665e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006660:	4413      	add	r3, r2
 8006662:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006666:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800666c:	b29a      	uxth	r2, r3
 800666e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006670:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	895b      	ldrh	r3, [r3, #10]
 800667e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6959      	ldr	r1, [r3, #20]
 800668e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006692:	b29b      	uxth	r3, r3
 8006694:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006698:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800669c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80066a0:	6800      	ldr	r0, [r0, #0]
 80066a2:	f000 ff0f 	bl	80074c4 <USB_WritePMA>
 80066a6:	e0ca      	b.n	800683e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	785b      	ldrb	r3, [r3, #1]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d177      	bne.n	80067a8 <USB_EPStartXfer+0xc98>
 80066b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	461a      	mov	r2, r3
 80066d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066d8:	4413      	add	r3, r2
 80066da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	011a      	lsls	r2, r3, #4
 80066ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066ec:	4413      	add	r3, r2
 80066ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80066f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066fe:	b29a      	uxth	r2, r3
 8006700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006702:	801a      	strh	r2, [r3, #0]
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006708:	2b3e      	cmp	r3, #62	; 0x3e
 800670a:	d921      	bls.n	8006750 <USB_EPStartXfer+0xc40>
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006710:	095b      	lsrs	r3, r3, #5
 8006712:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671a:	f003 031f 	and.w	r3, r3, #31
 800671e:	2b00      	cmp	r3, #0
 8006720:	d104      	bne.n	800672c <USB_EPStartXfer+0xc1c>
 8006722:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006726:	3b01      	subs	r3, #1
 8006728:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800672c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29a      	uxth	r2, r3
 8006732:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006736:	b29b      	uxth	r3, r3
 8006738:	029b      	lsls	r3, r3, #10
 800673a:	b29b      	uxth	r3, r3
 800673c:	4313      	orrs	r3, r2
 800673e:	b29b      	uxth	r3, r3
 8006740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006748:	b29a      	uxth	r2, r3
 800674a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800674c:	801a      	strh	r2, [r3, #0]
 800674e:	e05c      	b.n	800680a <USB_EPStartXfer+0xcfa>
 8006750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10a      	bne.n	800676e <USB_EPStartXfer+0xc5e>
 8006758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b29b      	uxth	r3, r3
 800675e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006766:	b29a      	uxth	r2, r3
 8006768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	e04d      	b.n	800680a <USB_EPStartXfer+0xcfa>
 800676e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006772:	085b      	lsrs	r3, r3, #1
 8006774:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b00      	cmp	r3, #0
 8006782:	d004      	beq.n	800678e <USB_EPStartXfer+0xc7e>
 8006784:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006788:	3301      	adds	r3, #1
 800678a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800678e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	b29a      	uxth	r2, r3
 8006794:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006798:	b29b      	uxth	r3, r3
 800679a:	029b      	lsls	r3, r3, #10
 800679c:	b29b      	uxth	r3, r3
 800679e:	4313      	orrs	r3, r2
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067a4:	801a      	strh	r2, [r3, #0]
 80067a6:	e030      	b.n	800680a <USB_EPStartXfer+0xcfa>
 80067a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	785b      	ldrb	r3, [r3, #1]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d128      	bne.n	800680a <USB_EPStartXfer+0xcfa>
 80067b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067dc:	4413      	add	r3, r2
 80067de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	011a      	lsls	r2, r3, #4
 80067f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067f4:	4413      	add	r3, r2
 80067f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006802:	b29a      	uxth	r2, r3
 8006804:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006808:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800680a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800680e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	891b      	ldrh	r3, [r3, #8]
 8006816:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800681a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800681e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6959      	ldr	r1, [r3, #20]
 8006826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800682a:	b29b      	uxth	r3, r3
 800682c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006830:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006834:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006838:	6800      	ldr	r0, [r0, #0]
 800683a:	f000 fe43 	bl	80074c4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800683e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006842:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800684c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	b29b      	uxth	r3, r3
 800685c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006864:	817b      	strh	r3, [r7, #10]
 8006866:	897b      	ldrh	r3, [r7, #10]
 8006868:	f083 0310 	eor.w	r3, r3, #16
 800686c:	817b      	strh	r3, [r7, #10]
 800686e:	897b      	ldrh	r3, [r7, #10]
 8006870:	f083 0320 	eor.w	r3, r3, #32
 8006874:	817b      	strh	r3, [r7, #10]
 8006876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	441a      	add	r2, r3
 8006890:	897b      	ldrh	r3, [r7, #10]
 8006892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800689a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800689e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	8013      	strh	r3, [r2, #0]
 80068a6:	f000 bcde 	b.w	8007266 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80068aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	7b1b      	ldrb	r3, [r3, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f040 80bb 	bne.w	8006a32 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80068bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	699a      	ldr	r2, [r3, #24]
 80068c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d917      	bls.n	8006908 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80068d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80068e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699a      	ldr	r2, [r3, #24]
 80068f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f8:	1ad2      	subs	r2, r2, r3
 80068fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	619a      	str	r2, [r3, #24]
 8006906:	e00e      	b.n	8006926 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800691c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2200      	movs	r2, #0
 8006924:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800692a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006942:	b29b      	uxth	r3, r3
 8006944:	461a      	mov	r2, r3
 8006946:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800694a:	4413      	add	r3, r2
 800694c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	011a      	lsls	r2, r3, #4
 800695e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006962:	4413      	add	r3, r2
 8006964:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006968:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800696c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006978:	b29a      	uxth	r2, r3
 800697a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800697e:	801a      	strh	r2, [r3, #0]
 8006980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006984:	2b3e      	cmp	r3, #62	; 0x3e
 8006986:	d924      	bls.n	80069d2 <USB_EPStartXfer+0xec2>
 8006988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698c:	095b      	lsrs	r3, r3, #5
 800698e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006996:	f003 031f 	and.w	r3, r3, #31
 800699a:	2b00      	cmp	r3, #0
 800699c:	d104      	bne.n	80069a8 <USB_EPStartXfer+0xe98>
 800699e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069a2:	3b01      	subs	r3, #1
 80069a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	029b      	lsls	r3, r3, #10
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	4313      	orrs	r3, r2
 80069bc:	b29b      	uxth	r3, r3
 80069be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069cc:	801a      	strh	r2, [r3, #0]
 80069ce:	f000 bc10 	b.w	80071f2 <USB_EPStartXfer+0x16e2>
 80069d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10c      	bne.n	80069f4 <USB_EPStartXfer+0xee4>
 80069da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069f0:	801a      	strh	r2, [r3, #0]
 80069f2:	e3fe      	b.n	80071f2 <USB_EPStartXfer+0x16e2>
 80069f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069f8:	085b      	lsrs	r3, r3, #1
 80069fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <USB_EPStartXfer+0xf04>
 8006a0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a0e:	3301      	adds	r3, #1
 8006a10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	029b      	lsls	r3, r3, #10
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	4313      	orrs	r3, r2
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a2e:	801a      	strh	r2, [r3, #0]
 8006a30:	e3df      	b.n	80071f2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	78db      	ldrb	r3, [r3, #3]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	f040 8218 	bne.w	8006e74 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	785b      	ldrb	r3, [r3, #1]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f040 809d 	bne.w	8006b90 <USB_EPStartXfer+0x1080>
 8006a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	011a      	lsls	r2, r3, #4
 8006a8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a92:	4413      	add	r3, r2
 8006a94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006aae:	801a      	strh	r2, [r3, #0]
 8006ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	2b3e      	cmp	r3, #62	; 0x3e
 8006abe:	d92b      	bls.n	8006b18 <USB_EPStartXfer+0x1008>
 8006ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	095b      	lsrs	r3, r3, #5
 8006ace:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 031f 	and.w	r3, r3, #31
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d104      	bne.n	8006af0 <USB_EPStartXfer+0xfe0>
 8006ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aea:	3b01      	subs	r3, #1
 8006aec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006af0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	029b      	lsls	r3, r3, #10
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	4313      	orrs	r3, r2
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b14:	801a      	strh	r2, [r3, #0]
 8006b16:	e070      	b.n	8006bfa <USB_EPStartXfer+0x10ea>
 8006b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10c      	bne.n	8006b42 <USB_EPStartXfer+0x1032>
 8006b28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b3e:	801a      	strh	r2, [r3, #0]
 8006b40:	e05b      	b.n	8006bfa <USB_EPStartXfer+0x10ea>
 8006b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	085b      	lsrs	r3, r3, #1
 8006b50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d004      	beq.n	8006b72 <USB_EPStartXfer+0x1062>
 8006b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	029b      	lsls	r3, r3, #10
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	4313      	orrs	r3, r2
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b8c:	801a      	strh	r2, [r3, #0]
 8006b8e:	e034      	b.n	8006bfa <USB_EPStartXfer+0x10ea>
 8006b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	785b      	ldrb	r3, [r3, #1]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d12c      	bne.n	8006bfa <USB_EPStartXfer+0x10ea>
 8006ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	011a      	lsls	r2, r3, #4
 8006bd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bdc:	4413      	add	r3, r2
 8006bde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006be2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006bf8:	801a      	strh	r2, [r3, #0]
 8006bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	785b      	ldrb	r3, [r3, #1]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f040 809d 	bne.w	8006d54 <USB_EPStartXfer+0x1244>
 8006c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	461a      	mov	r2, r3
 8006c3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c3e:	4413      	add	r3, r2
 8006c40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	011a      	lsls	r2, r3, #4
 8006c52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c56:	4413      	add	r3, r2
 8006c58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c72:	801a      	strh	r2, [r3, #0]
 8006c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	2b3e      	cmp	r3, #62	; 0x3e
 8006c82:	d92b      	bls.n	8006cdc <USB_EPStartXfer+0x11cc>
 8006c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	095b      	lsrs	r3, r3, #5
 8006c92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 031f 	and.w	r3, r3, #31
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d104      	bne.n	8006cb4 <USB_EPStartXfer+0x11a4>
 8006caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	029b      	lsls	r3, r3, #10
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cd8:	801a      	strh	r2, [r3, #0]
 8006cda:	e069      	b.n	8006db0 <USB_EPStartXfer+0x12a0>
 8006cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10c      	bne.n	8006d06 <USB_EPStartXfer+0x11f6>
 8006cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d02:	801a      	strh	r2, [r3, #0]
 8006d04:	e054      	b.n	8006db0 <USB_EPStartXfer+0x12a0>
 8006d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	085b      	lsrs	r3, r3, #1
 8006d14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <USB_EPStartXfer+0x1226>
 8006d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d30:	3301      	adds	r3, #1
 8006d32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	029b      	lsls	r3, r3, #10
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d50:	801a      	strh	r2, [r3, #0]
 8006d52:	e02d      	b.n	8006db0 <USB_EPStartXfer+0x12a0>
 8006d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	785b      	ldrb	r3, [r3, #1]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d125      	bne.n	8006db0 <USB_EPStartXfer+0x12a0>
 8006d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	461a      	mov	r2, r3
 8006d76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	011a      	lsls	r2, r3, #4
 8006d8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d92:	4413      	add	r3, r2
 8006d94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dae:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 8218 	beq.w	80071f2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006de2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d005      	beq.n	8006dfa <USB_EPStartXfer+0x12ea>
 8006dee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10d      	bne.n	8006e16 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006dfa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f040 81f5 	bne.w	80071f2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f040 81ee 	bne.w	80071f2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	441a      	add	r2, r3
 8006e5a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	8013      	strh	r3, [r2, #0]
 8006e72:	e1be      	b.n	80071f2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	78db      	ldrb	r3, [r3, #3]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	f040 81b4 	bne.w	80071ee <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699a      	ldr	r2, [r3, #24]
 8006e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d917      	bls.n	8006ed2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	699a      	ldr	r2, [r3, #24]
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec2:	1ad2      	subs	r2, r2, r3
 8006ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	619a      	str	r2, [r3, #24]
 8006ed0:	e00e      	b.n	8006ef0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2200      	movs	r2, #0
 8006eee:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	785b      	ldrb	r3, [r3, #1]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f040 8085 	bne.w	800700c <USB_EPStartXfer+0x14fc>
 8006f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	461a      	mov	r2, r3
 8006f22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f26:	4413      	add	r3, r2
 8006f28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	011a      	lsls	r2, r3, #4
 8006f3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f3e:	4413      	add	r3, r2
 8006f40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f5a:	801a      	strh	r2, [r3, #0]
 8006f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f60:	2b3e      	cmp	r3, #62	; 0x3e
 8006f62:	d923      	bls.n	8006fac <USB_EPStartXfer+0x149c>
 8006f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f68:	095b      	lsrs	r3, r3, #5
 8006f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f72:	f003 031f 	and.w	r3, r3, #31
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d104      	bne.n	8006f84 <USB_EPStartXfer+0x1474>
 8006f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	029b      	lsls	r3, r3, #10
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	4313      	orrs	r3, r2
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fa8:	801a      	strh	r2, [r3, #0]
 8006faa:	e060      	b.n	800706e <USB_EPStartXfer+0x155e>
 8006fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10c      	bne.n	8006fce <USB_EPStartXfer+0x14be>
 8006fb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fca:	801a      	strh	r2, [r3, #0]
 8006fcc:	e04f      	b.n	800706e <USB_EPStartXfer+0x155e>
 8006fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd2:	085b      	lsrs	r3, r3, #1
 8006fd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <USB_EPStartXfer+0x14de>
 8006fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fe8:	3301      	adds	r3, #1
 8006fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	029b      	lsls	r3, r3, #10
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	4313      	orrs	r3, r2
 8007002:	b29a      	uxth	r2, r3
 8007004:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007008:	801a      	strh	r2, [r3, #0]
 800700a:	e030      	b.n	800706e <USB_EPStartXfer+0x155e>
 800700c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	785b      	ldrb	r3, [r3, #1]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d128      	bne.n	800706e <USB_EPStartXfer+0x155e>
 800701c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800702a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007038:	b29b      	uxth	r3, r3
 800703a:	461a      	mov	r2, r3
 800703c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007040:	4413      	add	r3, r2
 8007042:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800704a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	011a      	lsls	r2, r3, #4
 8007054:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007058:	4413      	add	r3, r2
 800705a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800705e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007066:	b29a      	uxth	r2, r3
 8007068:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007072:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800707c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	785b      	ldrb	r3, [r3, #1]
 8007088:	2b00      	cmp	r3, #0
 800708a:	f040 8085 	bne.w	8007198 <USB_EPStartXfer+0x1688>
 800708e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800709c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	461a      	mov	r2, r3
 80070ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80070b2:	4413      	add	r3, r2
 80070b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80070b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	011a      	lsls	r2, r3, #4
 80070c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80070ca:	4413      	add	r3, r2
 80070cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070e6:	801a      	strh	r2, [r3, #0]
 80070e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ec:	2b3e      	cmp	r3, #62	; 0x3e
 80070ee:	d923      	bls.n	8007138 <USB_EPStartXfer+0x1628>
 80070f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f4:	095b      	lsrs	r3, r3, #5
 80070f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fe:	f003 031f 	and.w	r3, r3, #31
 8007102:	2b00      	cmp	r3, #0
 8007104:	d104      	bne.n	8007110 <USB_EPStartXfer+0x1600>
 8007106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800710a:	3b01      	subs	r3, #1
 800710c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007110:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	b29a      	uxth	r2, r3
 8007118:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800711c:	b29b      	uxth	r3, r3
 800711e:	029b      	lsls	r3, r3, #10
 8007120:	b29b      	uxth	r3, r3
 8007122:	4313      	orrs	r3, r2
 8007124:	b29b      	uxth	r3, r3
 8007126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800712a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800712e:	b29a      	uxth	r2, r3
 8007130:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007134:	801a      	strh	r2, [r3, #0]
 8007136:	e05c      	b.n	80071f2 <USB_EPStartXfer+0x16e2>
 8007138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10c      	bne.n	800715a <USB_EPStartXfer+0x164a>
 8007140:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	b29b      	uxth	r3, r3
 8007148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800714c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007150:	b29a      	uxth	r2, r3
 8007152:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007156:	801a      	strh	r2, [r3, #0]
 8007158:	e04b      	b.n	80071f2 <USB_EPStartXfer+0x16e2>
 800715a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800715e:	085b      	lsrs	r3, r3, #1
 8007160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <USB_EPStartXfer+0x166a>
 8007170:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007174:	3301      	adds	r3, #1
 8007176:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800717a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	b29a      	uxth	r2, r3
 8007182:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007186:	b29b      	uxth	r3, r3
 8007188:	029b      	lsls	r3, r3, #10
 800718a:	b29b      	uxth	r3, r3
 800718c:	4313      	orrs	r3, r2
 800718e:	b29a      	uxth	r2, r3
 8007190:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007194:	801a      	strh	r2, [r3, #0]
 8007196:	e02c      	b.n	80071f2 <USB_EPStartXfer+0x16e2>
 8007198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	785b      	ldrb	r3, [r3, #1]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d124      	bne.n	80071f2 <USB_EPStartXfer+0x16e2>
 80071a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	461a      	mov	r2, r3
 80071ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80071be:	4413      	add	r3, r2
 80071c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	011a      	lsls	r2, r3, #4
 80071d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80071d6:	4413      	add	r3, r2
 80071d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80071ea:	801a      	strh	r2, [r3, #0]
 80071ec:	e001      	b.n	80071f2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e03a      	b.n	8007268 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	b29b      	uxth	r3, r3
 8007210:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007218:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800721c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007220:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007224:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007228:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800722c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007230:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007238:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	441a      	add	r2, r3
 800724e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800725a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800725e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007262:	b29b      	uxth	r3, r3
 8007264:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007272:	b480      	push	{r7}
 8007274:	b085      	sub	sp, #20
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	785b      	ldrb	r3, [r3, #1]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d020      	beq.n	80072c6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	b29b      	uxth	r3, r3
 8007292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800729a:	81bb      	strh	r3, [r7, #12]
 800729c:	89bb      	ldrh	r3, [r7, #12]
 800729e:	f083 0310 	eor.w	r3, r3, #16
 80072a2:	81bb      	strh	r3, [r7, #12]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	441a      	add	r2, r3
 80072ae:	89bb      	ldrh	r3, [r7, #12]
 80072b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	8013      	strh	r3, [r2, #0]
 80072c4:	e01f      	b.n	8007306 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072dc:	81fb      	strh	r3, [r7, #14]
 80072de:	89fb      	ldrh	r3, [r7, #14]
 80072e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80072e4:	81fb      	strh	r3, [r7, #14]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	441a      	add	r2, r3
 80072f0:	89fb      	ldrh	r3, [r7, #14]
 80072f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007302:	b29b      	uxth	r3, r3
 8007304:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	bc80      	pop	{r7}
 8007310:	4770      	bx	lr

08007312 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007312:	b480      	push	{r7}
 8007314:	b087      	sub	sp, #28
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	7b1b      	ldrb	r3, [r3, #12]
 8007320:	2b00      	cmp	r3, #0
 8007322:	f040 809d 	bne.w	8007460 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	785b      	ldrb	r3, [r3, #1]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d04c      	beq.n	80073c8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	823b      	strh	r3, [r7, #16]
 800733c:	8a3b      	ldrh	r3, [r7, #16]
 800733e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	d01b      	beq.n	800737e <USB_EPClearStall+0x6c>
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	881b      	ldrh	r3, [r3, #0]
 8007352:	b29b      	uxth	r3, r3
 8007354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735c:	81fb      	strh	r3, [r7, #14]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	441a      	add	r2, r3
 8007368:	89fb      	ldrh	r3, [r7, #14]
 800736a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800736e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007376:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800737a:	b29b      	uxth	r3, r3
 800737c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	78db      	ldrb	r3, [r3, #3]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d06c      	beq.n	8007460 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	b29b      	uxth	r3, r3
 8007394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800739c:	81bb      	strh	r3, [r7, #12]
 800739e:	89bb      	ldrh	r3, [r7, #12]
 80073a0:	f083 0320 	eor.w	r3, r3, #32
 80073a4:	81bb      	strh	r3, [r7, #12]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	441a      	add	r2, r3
 80073b0:	89bb      	ldrh	r3, [r7, #12]
 80073b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	8013      	strh	r3, [r2, #0]
 80073c6:	e04b      	b.n	8007460 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	82fb      	strh	r3, [r7, #22]
 80073d6:	8afb      	ldrh	r3, [r7, #22]
 80073d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01b      	beq.n	8007418 <USB_EPClearStall+0x106>
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f6:	82bb      	strh	r3, [r7, #20]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	441a      	add	r2, r3
 8007402:	8abb      	ldrh	r3, [r7, #20]
 8007404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800740c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007414:	b29b      	uxth	r3, r3
 8007416:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	b29b      	uxth	r3, r3
 8007426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800742a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742e:	827b      	strh	r3, [r7, #18]
 8007430:	8a7b      	ldrh	r3, [r7, #18]
 8007432:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007436:	827b      	strh	r3, [r7, #18]
 8007438:	8a7b      	ldrh	r3, [r7, #18]
 800743a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800743e:	827b      	strh	r3, [r7, #18]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	441a      	add	r2, r3
 800744a:	8a7b      	ldrh	r3, [r7, #18]
 800744c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745c:	b29b      	uxth	r3, r3
 800745e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	bc80      	pop	{r7}
 800746a:	4770      	bx	lr

0800746c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d103      	bne.n	8007486 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2280      	movs	r2, #128	; 0x80
 8007482:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	bc80      	pop	{r7}
 8007490:	4770      	bx	lr

08007492 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bc80      	pop	{r7}
 80074a4:	4770      	bx	lr

080074a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b085      	sub	sp, #20
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80074b8:	68fb      	ldr	r3, [r7, #12]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	bc80      	pop	{r7}
 80074c2:	4770      	bx	lr

080074c4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b08b      	sub	sp, #44	; 0x2c
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	4611      	mov	r1, r2
 80074d0:	461a      	mov	r2, r3
 80074d2:	460b      	mov	r3, r1
 80074d4:	80fb      	strh	r3, [r7, #6]
 80074d6:	4613      	mov	r3, r2
 80074d8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80074da:	88bb      	ldrh	r3, [r7, #4]
 80074dc:	3301      	adds	r3, #1
 80074de:	085b      	lsrs	r3, r3, #1
 80074e0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80074ea:	88fb      	ldrh	r3, [r7, #6]
 80074ec:	005a      	lsls	r2, r3, #1
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074f6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	627b      	str	r3, [r7, #36]	; 0x24
 80074fc:	e01e      	b.n	800753c <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	3301      	adds	r3, #1
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	021b      	lsls	r3, r3, #8
 800750c:	b21a      	sxth	r2, r3
 800750e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007512:	4313      	orrs	r3, r2
 8007514:	b21b      	sxth	r3, r3
 8007516:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	8a7a      	ldrh	r2, [r7, #18]
 800751c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	3302      	adds	r3, #2
 8007522:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	3302      	adds	r3, #2
 8007528:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	3301      	adds	r3, #1
 800752e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	3301      	adds	r3, #1
 8007534:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	3b01      	subs	r3, #1
 800753a:	627b      	str	r3, [r7, #36]	; 0x24
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1dd      	bne.n	80074fe <USB_WritePMA+0x3a>
  }
}
 8007542:	bf00      	nop
 8007544:	bf00      	nop
 8007546:	372c      	adds	r7, #44	; 0x2c
 8007548:	46bd      	mov	sp, r7
 800754a:	bc80      	pop	{r7}
 800754c:	4770      	bx	lr

0800754e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800754e:	b480      	push	{r7}
 8007550:	b08b      	sub	sp, #44	; 0x2c
 8007552:	af00      	add	r7, sp, #0
 8007554:	60f8      	str	r0, [r7, #12]
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	4611      	mov	r1, r2
 800755a:	461a      	mov	r2, r3
 800755c:	460b      	mov	r3, r1
 800755e:	80fb      	strh	r3, [r7, #6]
 8007560:	4613      	mov	r3, r2
 8007562:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007564:	88bb      	ldrh	r3, [r7, #4]
 8007566:	085b      	lsrs	r3, r3, #1
 8007568:	b29b      	uxth	r3, r3
 800756a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007574:	88fb      	ldrh	r3, [r7, #6]
 8007576:	005a      	lsls	r2, r3, #1
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	4413      	add	r3, r2
 800757c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007580:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	627b      	str	r3, [r7, #36]	; 0x24
 8007586:	e01b      	b.n	80075c0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	b29b      	uxth	r3, r3
 800758e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	3302      	adds	r3, #2
 8007594:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	b2da      	uxtb	r2, r3
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	3301      	adds	r3, #1
 80075a2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	0a1b      	lsrs	r3, r3, #8
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	3301      	adds	r3, #1
 80075b2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	3302      	adds	r3, #2
 80075b8:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	3b01      	subs	r3, #1
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e0      	bne.n	8007588 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80075c6:	88bb      	ldrh	r3, [r7, #4]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d007      	beq.n	80075e2 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	881b      	ldrh	r3, [r3, #0]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	701a      	strb	r2, [r3, #0]
  }
}
 80075e2:	bf00      	nop
 80075e4:	372c      	adds	r7, #44	; 0x2c
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bc80      	pop	{r7}
 80075ea:	4770      	bx	lr

080075ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	460b      	mov	r3, r1
 80075f6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	7c1b      	ldrb	r3, [r3, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d115      	bne.n	8007630 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007608:	2202      	movs	r2, #2
 800760a:	2181      	movs	r1, #129	; 0x81
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 fe40 	bl	8009292 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800761c:	2202      	movs	r2, #2
 800761e:	2101      	movs	r1, #1
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 fe36 	bl	8009292 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800762e:	e012      	b.n	8007656 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007630:	2340      	movs	r3, #64	; 0x40
 8007632:	2202      	movs	r2, #2
 8007634:	2181      	movs	r1, #129	; 0x81
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 fe2b 	bl	8009292 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007642:	2340      	movs	r3, #64	; 0x40
 8007644:	2202      	movs	r2, #2
 8007646:	2101      	movs	r1, #1
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f001 fe22 	bl	8009292 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007656:	2308      	movs	r3, #8
 8007658:	2203      	movs	r2, #3
 800765a:	2182      	movs	r1, #130	; 0x82
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 fe18 	bl	8009292 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007668:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800766c:	f001 ff38 	bl	80094e0 <USBD_static_malloc>
 8007670:	4602      	mov	r2, r0
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800767e:	2b00      	cmp	r3, #0
 8007680:	d102      	bne.n	8007688 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007682:	2301      	movs	r3, #1
 8007684:	73fb      	strb	r3, [r7, #15]
 8007686:	e026      	b.n	80076d6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800768e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2200      	movs	r2, #0
 800769e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	7c1b      	ldrb	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d109      	bne.n	80076c6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076bc:	2101      	movs	r1, #1
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f001 fed8 	bl	8009474 <USBD_LL_PrepareReceive>
 80076c4:	e007      	b.n	80076d6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076cc:	2340      	movs	r3, #64	; 0x40
 80076ce:	2101      	movs	r1, #1
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 fecf 	bl	8009474 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80076f0:	2181      	movs	r1, #129	; 0x81
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 fdf3 	bl	80092de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80076fe:	2101      	movs	r1, #1
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 fdec 	bl	80092de <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800770e:	2182      	movs	r1, #130	; 0x82
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 fde4 	bl	80092de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00e      	beq.n	8007744 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007736:	4618      	mov	r0, r3
 8007738:	f001 fede 	bl	80094f8 <USBD_static_free>
    pdev->pClassData = NULL;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8007744:	7bfb      	ldrb	r3, [r7, #15]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b086      	sub	sp, #24
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800775e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007774:	2b00      	cmp	r3, #0
 8007776:	d039      	beq.n	80077ec <USBD_CDC_Setup+0x9e>
 8007778:	2b20      	cmp	r3, #32
 800777a:	d17f      	bne.n	800787c <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	88db      	ldrh	r3, [r3, #6]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d029      	beq.n	80077d8 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	b25b      	sxtb	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	da11      	bge.n	80077b2 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800779a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	88d2      	ldrh	r2, [r2, #6]
 80077a0:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80077a2:	6939      	ldr	r1, [r7, #16]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	88db      	ldrh	r3, [r3, #6]
 80077a8:	461a      	mov	r2, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 f993 	bl	8008ad6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80077b0:	e06b      	b.n	800788a <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	785a      	ldrb	r2, [r3, #1]
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	88db      	ldrh	r3, [r3, #6]
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80077c8:	6939      	ldr	r1, [r7, #16]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	88db      	ldrh	r3, [r3, #6]
 80077ce:	461a      	mov	r2, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 f9ae 	bl	8008b32 <USBD_CtlPrepareRx>
    break;
 80077d6:	e058      	b.n	800788a <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	683a      	ldr	r2, [r7, #0]
 80077e2:	7850      	ldrb	r0, [r2, #1]
 80077e4:	2200      	movs	r2, #0
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	4798      	blx	r3
    break;
 80077ea:	e04e      	b.n	800788a <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	785b      	ldrb	r3, [r3, #1]
 80077f0:	2b0b      	cmp	r3, #11
 80077f2:	d02e      	beq.n	8007852 <USBD_CDC_Setup+0x104>
 80077f4:	2b0b      	cmp	r3, #11
 80077f6:	dc38      	bgt.n	800786a <USBD_CDC_Setup+0x11c>
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <USBD_CDC_Setup+0xb4>
 80077fc:	2b0a      	cmp	r3, #10
 80077fe:	d014      	beq.n	800782a <USBD_CDC_Setup+0xdc>
 8007800:	e033      	b.n	800786a <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007808:	2b03      	cmp	r3, #3
 800780a:	d107      	bne.n	800781c <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800780c:	f107 030c 	add.w	r3, r7, #12
 8007810:	2202      	movs	r2, #2
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 f95e 	bl	8008ad6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800781a:	e02e      	b.n	800787a <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 f8ef 	bl	8008a02 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007824:	2302      	movs	r3, #2
 8007826:	75fb      	strb	r3, [r7, #23]
      break;
 8007828:	e027      	b.n	800787a <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007830:	2b03      	cmp	r3, #3
 8007832:	d107      	bne.n	8007844 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8007834:	f107 030f 	add.w	r3, r7, #15
 8007838:	2201      	movs	r2, #1
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f001 f94a 	bl	8008ad6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007842:	e01a      	b.n	800787a <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f001 f8db 	bl	8008a02 <USBD_CtlError>
			  ret = USBD_FAIL;
 800784c:	2302      	movs	r3, #2
 800784e:	75fb      	strb	r3, [r7, #23]
      break;
 8007850:	e013      	b.n	800787a <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007858:	2b03      	cmp	r3, #3
 800785a:	d00d      	beq.n	8007878 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f001 f8cf 	bl	8008a02 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007864:	2302      	movs	r3, #2
 8007866:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007868:	e006      	b.n	8007878 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 f8c8 	bl	8008a02 <USBD_CtlError>
      ret = USBD_FAIL;
 8007872:	2302      	movs	r3, #2
 8007874:	75fb      	strb	r3, [r7, #23]
      break;
 8007876:	e000      	b.n	800787a <USBD_CDC_Setup+0x12c>
      break;
 8007878:	bf00      	nop
    }
    break;
 800787a:	e006      	b.n	800788a <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 f8bf 	bl	8008a02 <USBD_CtlError>
    ret = USBD_FAIL;
 8007884:	2302      	movs	r3, #2
 8007886:	75fb      	strb	r3, [r7, #23]
    break;
 8007888:	bf00      	nop
  }

  return ret;
 800788a:	7dfb      	ldrb	r3, [r7, #23]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	460b      	mov	r3, r1
 800789e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80078a6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80078ae:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d03a      	beq.n	8007930 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80078ba:	78fa      	ldrb	r2, [r7, #3]
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	4613      	mov	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	440b      	add	r3, r1
 80078c8:	331c      	adds	r3, #28
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d029      	beq.n	8007924 <USBD_CDC_DataIn+0x90>
 80078d0:	78fa      	ldrb	r2, [r7, #3]
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	4613      	mov	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	440b      	add	r3, r1
 80078de:	331c      	adds	r3, #28
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	78f9      	ldrb	r1, [r7, #3]
 80078e4:	68b8      	ldr	r0, [r7, #8]
 80078e6:	460b      	mov	r3, r1
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	440b      	add	r3, r1
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	4403      	add	r3, r0
 80078f0:	3338      	adds	r3, #56	; 0x38
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80078f8:	fb01 f303 	mul.w	r3, r1, r3
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d110      	bne.n	8007924 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007902:	78fa      	ldrb	r2, [r7, #3]
 8007904:	6879      	ldr	r1, [r7, #4]
 8007906:	4613      	mov	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4413      	add	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	440b      	add	r3, r1
 8007910:	331c      	adds	r3, #28
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8007916:	78f9      	ldrb	r1, [r7, #3]
 8007918:	2300      	movs	r3, #0
 800791a:	2200      	movs	r2, #0
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 fd86 	bl	800942e <USBD_LL_Transmit>
 8007922:	e003      	b.n	800792c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	e000      	b.n	8007932 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007930:	2302      	movs	r3, #2
  }
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	460b      	mov	r3, r1
 8007944:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800794c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800794e:	78fb      	ldrb	r3, [r7, #3]
 8007950:	4619      	mov	r1, r3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f001 fdb1 	bl	80094ba <USBD_LL_GetRxDataSize>
 8007958:	4602      	mov	r2, r0
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00d      	beq.n	8007986 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800797e:	4611      	mov	r1, r2
 8007980:	4798      	blx	r3

    return USBD_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	e000      	b.n	8007988 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007986:	2302      	movs	r3, #2
  }
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800799e:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d015      	beq.n	80079d6 <USBD_CDC_EP0_RxReady+0x46>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80079b0:	2bff      	cmp	r3, #255	; 0xff
 80079b2:	d010      	beq.n	80079d6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80079c2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079ca:	b292      	uxth	r2, r2
 80079cc:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	22ff      	movs	r2, #255	; 0xff
 80079d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2243      	movs	r2, #67	; 0x43
 80079ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80079ee:	4b03      	ldr	r3, [pc, #12]	; (80079fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bc80      	pop	{r7}
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	20000094 	.word	0x20000094

08007a00 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2243      	movs	r2, #67	; 0x43
 8007a0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007a0e:	4b03      	ldr	r3, [pc, #12]	; (8007a1c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bc80      	pop	{r7}
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	20000050 	.word	0x20000050

08007a20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2243      	movs	r2, #67	; 0x43
 8007a2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007a2e:	4b03      	ldr	r3, [pc, #12]	; (8007a3c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bc80      	pop	{r7}
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	200000d8 	.word	0x200000d8

08007a40 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	220a      	movs	r2, #10
 8007a4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007a4e:	4b03      	ldr	r3, [pc, #12]	; (8007a5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bc80      	pop	{r7}
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	2000000c 	.word	0x2000000c

08007a60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d005      	beq.n	8007a80 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bc80      	pop	{r7}
 8007a8a:	4770      	bx	lr

08007a8c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	4613      	mov	r3, r2
 8007a98:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007aa0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007aaa:	88fa      	ldrh	r2, [r7, #6]
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	371c      	adds	r7, #28
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bc80      	pop	{r7}
 8007abc:	4770      	bx	lr

08007abe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b085      	sub	sp, #20
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007ace:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bc80      	pop	{r7}
 8007ae2:	4770      	bx	lr

08007ae4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007af2:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d01c      	beq.n	8007b38 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d115      	bne.n	8007b34 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	2181      	movs	r1, #129	; 0x81
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 fc7f 	bl	800942e <USBD_LL_Transmit>

      return USBD_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	e002      	b.n	8007b3a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e000      	b.n	8007b3a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007b38:	2302      	movs	r3, #2
  }
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b084      	sub	sp, #16
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b50:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d017      	beq.n	8007b8c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	7c1b      	ldrb	r3, [r3, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d109      	bne.n	8007b78 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b6e:	2101      	movs	r1, #1
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 fc7f 	bl	8009474 <USBD_LL_PrepareReceive>
 8007b76:	e007      	b.n	8007b88 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b7e:	2340      	movs	r3, #64	; 0x40
 8007b80:	2101      	movs	r1, #1
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 fc76 	bl	8009474 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	e000      	b.n	8007b8e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007b8c:	2302      	movs	r3, #2
  }
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007baa:	2302      	movs	r3, #2
 8007bac:	e01a      	b.n	8007be4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d003      	beq.n	8007bc0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	79fa      	ldrb	r2, [r7, #7]
 8007bda:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f001 fae3 	bl	80091a8 <USBD_LL_Init>

  return USBD_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d006      	beq.n	8007c0e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	73fb      	strb	r3, [r7, #15]
 8007c0c:	e001      	b.n	8007c12 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007c0e:	2302      	movs	r3, #2
 8007c10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bc80      	pop	{r7}
 8007c1c:	4770      	bx	lr

08007c1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f001 fb18 	bl	800925c <USBD_LL_Start>

  return USBD_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr

08007c4a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007c56:	2302      	movs	r3, #2
 8007c58:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00c      	beq.n	8007c7e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	78fa      	ldrb	r2, [r7, #3]
 8007c6e:	4611      	mov	r1, r2
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	4798      	blx	r3
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	78fa      	ldrb	r2, [r7, #3]
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	4798      	blx	r3
  return USBD_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 fe62 	bl	800898a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007ce2:	f003 031f 	and.w	r3, r3, #31
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d016      	beq.n	8007d18 <USBD_LL_SetupStage+0x6a>
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d81c      	bhi.n	8007d28 <USBD_LL_SetupStage+0x7a>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <USBD_LL_SetupStage+0x4a>
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d008      	beq.n	8007d08 <USBD_LL_SetupStage+0x5a>
 8007cf6:	e017      	b.n	8007d28 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f9c5 	bl	8008090 <USBD_StdDevReq>
    break;
 8007d06:	e01a      	b.n	8007d3e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fa27 	bl	8008164 <USBD_StdItfReq>
    break;
 8007d16:	e012      	b.n	8007d3e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fa67 	bl	80081f4 <USBD_StdEPReq>
    break;
 8007d26:	e00a      	b.n	8007d3e <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007d2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f001 faf0 	bl	800931c <USBD_LL_StallEP>
    break;
 8007d3c:	bf00      	nop
  }

  return USBD_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	460b      	mov	r3, r1
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007d56:	7afb      	ldrb	r3, [r7, #11]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d14b      	bne.n	8007df4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007d62:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d134      	bne.n	8007dd8 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	68da      	ldr	r2, [r3, #12]
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d919      	bls.n	8007dae <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	68da      	ldr	r2, [r3, #12]
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	1ad2      	subs	r2, r2, r3
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	68da      	ldr	r2, [r3, #12]
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d203      	bcs.n	8007d9c <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	e002      	b.n	8007da2 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	461a      	mov	r2, r3
 8007da4:	6879      	ldr	r1, [r7, #4]
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 fee1 	bl	8008b6e <USBD_CtlContinueRx>
 8007dac:	e038      	b.n	8007e20 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d105      	bne.n	8007dd0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 fede 	bl	8008b92 <USBD_CtlSendStatus>
 8007dd6:	e023      	b.n	8007e20 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007dde:	2b05      	cmp	r3, #5
 8007de0:	d11e      	bne.n	8007e20 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8007dea:	2100      	movs	r1, #0
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f001 fa95 	bl	800931c <USBD_LL_StallEP>
 8007df2:	e015      	b.n	8007e20 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00d      	beq.n	8007e1c <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d108      	bne.n	8007e1c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	7afa      	ldrb	r2, [r7, #11]
 8007e14:	4611      	mov	r1, r2
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	4798      	blx	r3
 8007e1a:	e001      	b.n	8007e20 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	e000      	b.n	8007e22 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b086      	sub	sp, #24
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	460b      	mov	r3, r1
 8007e34:	607a      	str	r2, [r7, #4]
 8007e36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007e38:	7afb      	ldrb	r3, [r7, #11]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d17f      	bne.n	8007f3e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3314      	adds	r3, #20
 8007e42:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d15c      	bne.n	8007f08 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d915      	bls.n	8007e86 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	1ad2      	subs	r2, r2, r3
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	461a      	mov	r2, r3
 8007e70:	6879      	ldr	r1, [r7, #4]
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 fe4b 	bl	8008b0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007e78:	2300      	movs	r3, #0
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f001 faf8 	bl	8009474 <USBD_LL_PrepareReceive>
 8007e84:	e04e      	b.n	8007f24 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	6912      	ldr	r2, [r2, #16]
 8007e8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e92:	fb01 f202 	mul.w	r2, r1, r2
 8007e96:	1a9b      	subs	r3, r3, r2
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d11c      	bne.n	8007ed6 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d316      	bcc.n	8007ed6 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	689a      	ldr	r2, [r3, #8]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d20f      	bcs.n	8007ed6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2100      	movs	r1, #0
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 fe27 	bl	8008b0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007ec8:	2300      	movs	r3, #0
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2100      	movs	r1, #0
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f001 fad0 	bl	8009474 <USBD_LL_PrepareReceive>
 8007ed4:	e026      	b.n	8007f24 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d105      	bne.n	8007ef8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007ef8:	2180      	movs	r1, #128	; 0x80
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f001 fa0e 	bl	800931c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 fe59 	bl	8008bb8 <USBD_CtlReceiveStatus>
 8007f06:	e00d      	b.n	8007f24 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	d004      	beq.n	8007f1c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d103      	bne.n	8007f24 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007f1c:	2180      	movs	r1, #128	; 0x80
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f001 f9fc 	bl	800931c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d11d      	bne.n	8007f6a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f7ff fe81 	bl	8007c36 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007f3c:	e015      	b.n	8007f6a <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00d      	beq.n	8007f66 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007f50:	2b03      	cmp	r3, #3
 8007f52:	d108      	bne.n	8007f66 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	7afa      	ldrb	r2, [r7, #11]
 8007f5e:	4611      	mov	r1, r2
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	4798      	blx	r3
 8007f64:	e001      	b.n	8007f6a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f66:	2302      	movs	r3, #2
 8007f68:	e000      	b.n	8007f6c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3718      	adds	r7, #24
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f7c:	2340      	movs	r3, #64	; 0x40
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2100      	movs	r1, #0
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f001 f985 	bl	8009292 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2240      	movs	r2, #64	; 0x40
 8007f94:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f98:	2340      	movs	r3, #64	; 0x40
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2180      	movs	r1, #128	; 0x80
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 f977 	bl	8009292 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2240      	movs	r2, #64	; 0x40
 8007fae:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d009      	beq.n	8007fec <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	6852      	ldr	r2, [r2, #4]
 8007fe4:	b2d2      	uxtb	r2, r2
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	4798      	blx	r3
  }

  return USBD_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b083      	sub	sp, #12
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	460b      	mov	r3, r1
 8008000:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	78fa      	ldrb	r2, [r7, #3]
 8008006:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	bc80      	pop	{r7}
 8008012:	4770      	bx	lr

08008014 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2204      	movs	r2, #4
 800802c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr

0800803c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	bc80      	pop	{r7}
 800805a:	4770      	bx	lr

0800805c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800806a:	2b03      	cmp	r3, #3
 800806c:	d10b      	bne.n	8008086 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d005      	beq.n	8008086 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080a6:	2b40      	cmp	r3, #64	; 0x40
 80080a8:	d005      	beq.n	80080b6 <USBD_StdDevReq+0x26>
 80080aa:	2b40      	cmp	r3, #64	; 0x40
 80080ac:	d84f      	bhi.n	800814e <USBD_StdDevReq+0xbe>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d009      	beq.n	80080c6 <USBD_StdDevReq+0x36>
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	d14b      	bne.n	800814e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	4798      	blx	r3
    break;
 80080c4:	e048      	b.n	8008158 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	785b      	ldrb	r3, [r3, #1]
 80080ca:	2b09      	cmp	r3, #9
 80080cc:	d839      	bhi.n	8008142 <USBD_StdDevReq+0xb2>
 80080ce:	a201      	add	r2, pc, #4	; (adr r2, 80080d4 <USBD_StdDevReq+0x44>)
 80080d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d4:	08008125 	.word	0x08008125
 80080d8:	08008139 	.word	0x08008139
 80080dc:	08008143 	.word	0x08008143
 80080e0:	0800812f 	.word	0x0800812f
 80080e4:	08008143 	.word	0x08008143
 80080e8:	08008107 	.word	0x08008107
 80080ec:	080080fd 	.word	0x080080fd
 80080f0:	08008143 	.word	0x08008143
 80080f4:	0800811b 	.word	0x0800811b
 80080f8:	08008111 	.word	0x08008111
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f9da 	bl	80084b8 <USBD_GetDescriptor>
      break;
 8008104:	e022      	b.n	800814c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 facf 	bl	80086ac <USBD_SetAddress>
      break;
 800810e:	e01d      	b.n	800814c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fb0e 	bl	8008734 <USBD_SetConfig>
      break;
 8008118:	e018      	b.n	800814c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fb97 	bl	8008850 <USBD_GetConfig>
      break;
 8008122:	e013      	b.n	800814c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fbc7 	bl	80088ba <USBD_GetStatus>
      break;
 800812c:	e00e      	b.n	800814c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fbf5 	bl	8008920 <USBD_SetFeature>
      break;
 8008136:	e009      	b.n	800814c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fc04 	bl	8008948 <USBD_ClrFeature>
      break;
 8008140:	e004      	b.n	800814c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fc5c 	bl	8008a02 <USBD_CtlError>
      break;
 800814a:	bf00      	nop
    }
    break;
 800814c:	e004      	b.n	8008158 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fc56 	bl	8008a02 <USBD_CtlError>
    break;
 8008156:	bf00      	nop
  }

  return ret;
 8008158:	7bfb      	ldrb	r3, [r7, #15]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop

08008164 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800817a:	2b40      	cmp	r3, #64	; 0x40
 800817c:	d005      	beq.n	800818a <USBD_StdItfReq+0x26>
 800817e:	2b40      	cmp	r3, #64	; 0x40
 8008180:	d82e      	bhi.n	80081e0 <USBD_StdItfReq+0x7c>
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <USBD_StdItfReq+0x26>
 8008186:	2b20      	cmp	r3, #32
 8008188:	d12a      	bne.n	80081e0 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008190:	3b01      	subs	r3, #1
 8008192:	2b02      	cmp	r3, #2
 8008194:	d81d      	bhi.n	80081d2 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	889b      	ldrh	r3, [r3, #4]
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b01      	cmp	r3, #1
 800819e:	d813      	bhi.n	80081c8 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	4798      	blx	r3
 80081ae:	4603      	mov	r3, r0
 80081b0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	88db      	ldrh	r3, [r3, #6]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d110      	bne.n	80081dc <USBD_StdItfReq+0x78>
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10d      	bne.n	80081dc <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fce6 	bl	8008b92 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80081c6:	e009      	b.n	80081dc <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fc19 	bl	8008a02 <USBD_CtlError>
      break;
 80081d0:	e004      	b.n	80081dc <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fc14 	bl	8008a02 <USBD_CtlError>
      break;
 80081da:	e000      	b.n	80081de <USBD_StdItfReq+0x7a>
      break;
 80081dc:	bf00      	nop
    }
    break;
 80081de:	e004      	b.n	80081ea <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fc0d 	bl	8008a02 <USBD_CtlError>
    break;
 80081e8:	bf00      	nop
  }

  return USBD_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	889b      	ldrh	r3, [r3, #4]
 8008206:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008210:	2b40      	cmp	r3, #64	; 0x40
 8008212:	d007      	beq.n	8008224 <USBD_StdEPReq+0x30>
 8008214:	2b40      	cmp	r3, #64	; 0x40
 8008216:	f200 8144 	bhi.w	80084a2 <USBD_StdEPReq+0x2ae>
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <USBD_StdEPReq+0x40>
 800821e:	2b20      	cmp	r3, #32
 8008220:	f040 813f 	bne.w	80084a2 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
    break;
 8008232:	e13b      	b.n	80084ac <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800823c:	2b20      	cmp	r3, #32
 800823e:	d10a      	bne.n	8008256 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	4798      	blx	r3
 800824e:	4603      	mov	r3, r0
 8008250:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008252:	7bfb      	ldrb	r3, [r7, #15]
 8008254:	e12b      	b.n	80084ae <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	785b      	ldrb	r3, [r3, #1]
 800825a:	2b03      	cmp	r3, #3
 800825c:	d007      	beq.n	800826e <USBD_StdEPReq+0x7a>
 800825e:	2b03      	cmp	r3, #3
 8008260:	f300 8119 	bgt.w	8008496 <USBD_StdEPReq+0x2a2>
 8008264:	2b00      	cmp	r3, #0
 8008266:	d072      	beq.n	800834e <USBD_StdEPReq+0x15a>
 8008268:	2b01      	cmp	r3, #1
 800826a:	d03a      	beq.n	80082e2 <USBD_StdEPReq+0xee>
 800826c:	e113      	b.n	8008496 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008274:	2b02      	cmp	r3, #2
 8008276:	d002      	beq.n	800827e <USBD_StdEPReq+0x8a>
 8008278:	2b03      	cmp	r3, #3
 800827a:	d015      	beq.n	80082a8 <USBD_StdEPReq+0xb4>
 800827c:	e02b      	b.n	80082d6 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800827e:	7bbb      	ldrb	r3, [r7, #14]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00c      	beq.n	800829e <USBD_StdEPReq+0xaa>
 8008284:	7bbb      	ldrb	r3, [r7, #14]
 8008286:	2b80      	cmp	r3, #128	; 0x80
 8008288:	d009      	beq.n	800829e <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800828a:	7bbb      	ldrb	r3, [r7, #14]
 800828c:	4619      	mov	r1, r3
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f001 f844 	bl	800931c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008294:	2180      	movs	r1, #128	; 0x80
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f001 f840 	bl	800931c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800829c:	e020      	b.n	80082e0 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fbae 	bl	8008a02 <USBD_CtlError>
        break;
 80082a6:	e01b      	b.n	80082e0 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	885b      	ldrh	r3, [r3, #2]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10e      	bne.n	80082ce <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00b      	beq.n	80082ce <USBD_StdEPReq+0xda>
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
 80082b8:	2b80      	cmp	r3, #128	; 0x80
 80082ba:	d008      	beq.n	80082ce <USBD_StdEPReq+0xda>
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	88db      	ldrh	r3, [r3, #6]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d104      	bne.n	80082ce <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80082c4:	7bbb      	ldrb	r3, [r7, #14]
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f001 f827 	bl	800931c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fc5f 	bl	8008b92 <USBD_CtlSendStatus>

        break;
 80082d4:	e004      	b.n	80082e0 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fb92 	bl	8008a02 <USBD_CtlError>
        break;
 80082de:	bf00      	nop
      }
      break;
 80082e0:	e0de      	b.n	80084a0 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d002      	beq.n	80082f2 <USBD_StdEPReq+0xfe>
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	d015      	beq.n	800831c <USBD_StdEPReq+0x128>
 80082f0:	e026      	b.n	8008340 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00c      	beq.n	8008312 <USBD_StdEPReq+0x11e>
 80082f8:	7bbb      	ldrb	r3, [r7, #14]
 80082fa:	2b80      	cmp	r3, #128	; 0x80
 80082fc:	d009      	beq.n	8008312 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f001 f80a 	bl	800931c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008308:	2180      	movs	r1, #128	; 0x80
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f001 f806 	bl	800931c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008310:	e01c      	b.n	800834c <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fb74 	bl	8008a02 <USBD_CtlError>
        break;
 800831a:	e017      	b.n	800834c <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	885b      	ldrh	r3, [r3, #2]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d112      	bne.n	800834a <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800832a:	2b00      	cmp	r3, #0
 800832c:	d004      	beq.n	8008338 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800832e:	7bbb      	ldrb	r3, [r7, #14]
 8008330:	4619      	mov	r1, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 f811 	bl	800935a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fc2a 	bl	8008b92 <USBD_CtlSendStatus>
        }
        break;
 800833e:	e004      	b.n	800834a <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fb5d 	bl	8008a02 <USBD_CtlError>
        break;
 8008348:	e000      	b.n	800834c <USBD_StdEPReq+0x158>
        break;
 800834a:	bf00      	nop
      }
      break;
 800834c:	e0a8      	b.n	80084a0 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008354:	2b02      	cmp	r3, #2
 8008356:	d002      	beq.n	800835e <USBD_StdEPReq+0x16a>
 8008358:	2b03      	cmp	r3, #3
 800835a:	d031      	beq.n	80083c0 <USBD_StdEPReq+0x1cc>
 800835c:	e095      	b.n	800848a <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d007      	beq.n	8008374 <USBD_StdEPReq+0x180>
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	2b80      	cmp	r3, #128	; 0x80
 8008368:	d004      	beq.n	8008374 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fb48 	bl	8008a02 <USBD_CtlError>
          break;
 8008372:	e08f      	b.n	8008494 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008374:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008378:	2b00      	cmp	r3, #0
 800837a:	da0b      	bge.n	8008394 <USBD_StdEPReq+0x1a0>
 800837c:	7bbb      	ldrb	r3, [r7, #14]
 800837e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008382:	4613      	mov	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	3310      	adds	r3, #16
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	4413      	add	r3, r2
 8008390:	3304      	adds	r3, #4
 8008392:	e00a      	b.n	80083aa <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800839a:	4613      	mov	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	4413      	add	r3, r2
 80083aa:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2200      	movs	r2, #0
 80083b0:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2202      	movs	r2, #2
 80083b6:	4619      	mov	r1, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fb8c 	bl	8008ad6 <USBD_CtlSendData>
          break;
 80083be:	e069      	b.n	8008494 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80083c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	da11      	bge.n	80083ec <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	f003 020f 	and.w	r2, r3, #15
 80083ce:	6879      	ldr	r1, [r7, #4]
 80083d0:	4613      	mov	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	440b      	add	r3, r1
 80083da:	3318      	adds	r3, #24
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d117      	bne.n	8008412 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fb0c 	bl	8008a02 <USBD_CtlError>
            break;
 80083ea:	e053      	b.n	8008494 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	f003 020f 	and.w	r2, r3, #15
 80083f2:	6879      	ldr	r1, [r7, #4]
 80083f4:	4613      	mov	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	440b      	add	r3, r1
 80083fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d104      	bne.n	8008412 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 faf9 	bl	8008a02 <USBD_CtlError>
            break;
 8008410:	e040      	b.n	8008494 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008412:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008416:	2b00      	cmp	r3, #0
 8008418:	da0b      	bge.n	8008432 <USBD_StdEPReq+0x23e>
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008420:	4613      	mov	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	3310      	adds	r3, #16
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	4413      	add	r3, r2
 800842e:	3304      	adds	r3, #4
 8008430:	e00a      	b.n	8008448 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008432:	7bbb      	ldrb	r3, [r7, #14]
 8008434:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008438:	4613      	mov	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	4413      	add	r3, r2
 8008448:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <USBD_StdEPReq+0x262>
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	2b80      	cmp	r3, #128	; 0x80
 8008454:	d103      	bne.n	800845e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	e00e      	b.n	800847c <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 ff98 	bl	8009398 <USBD_LL_IsStallEP>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2201      	movs	r2, #1
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	e002      	b.n	800847c <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2200      	movs	r2, #0
 800847a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2202      	movs	r2, #2
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fb27 	bl	8008ad6 <USBD_CtlSendData>
          break;
 8008488:	e004      	b.n	8008494 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fab8 	bl	8008a02 <USBD_CtlError>
        break;
 8008492:	bf00      	nop
      }
      break;
 8008494:	e004      	b.n	80084a0 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fab2 	bl	8008a02 <USBD_CtlError>
      break;
 800849e:	bf00      	nop
    }
    break;
 80084a0:	e004      	b.n	80084ac <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 faac 	bl	8008a02 <USBD_CtlError>
    break;
 80084aa:	bf00      	nop
  }

  return ret;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
	...

080084b8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	885b      	ldrh	r3, [r3, #2]
 80084c6:	0a1b      	lsrs	r3, r3, #8
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	3b01      	subs	r3, #1
 80084cc:	2b06      	cmp	r3, #6
 80084ce:	f200 80c9 	bhi.w	8008664 <USBD_GetDescriptor+0x1ac>
 80084d2:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <USBD_GetDescriptor+0x20>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	080084f5 	.word	0x080084f5
 80084dc:	0800850d 	.word	0x0800850d
 80084e0:	0800854d 	.word	0x0800854d
 80084e4:	08008665 	.word	0x08008665
 80084e8:	08008665 	.word	0x08008665
 80084ec:	08008611 	.word	0x08008611
 80084f0:	08008637 	.word	0x08008637
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	7c12      	ldrb	r2, [r2, #16]
 8008500:	f107 010a 	add.w	r1, r7, #10
 8008504:	4610      	mov	r0, r2
 8008506:	4798      	blx	r3
 8008508:	60f8      	str	r0, [r7, #12]
    break;
 800850a:	e0b0      	b.n	800866e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	7c1b      	ldrb	r3, [r3, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10d      	bne.n	8008530 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800851a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851c:	f107 020a 	add.w	r2, r7, #10
 8008520:	4610      	mov	r0, r2
 8008522:	4798      	blx	r3
 8008524:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	3301      	adds	r3, #1
 800852a:	2202      	movs	r2, #2
 800852c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800852e:	e09e      	b.n	800866e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008538:	f107 020a 	add.w	r2, r7, #10
 800853c:	4610      	mov	r0, r2
 800853e:	4798      	blx	r3
 8008540:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3301      	adds	r3, #1
 8008546:	2202      	movs	r2, #2
 8008548:	701a      	strb	r2, [r3, #0]
    break;
 800854a:	e090      	b.n	800866e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	885b      	ldrh	r3, [r3, #2]
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b05      	cmp	r3, #5
 8008554:	d856      	bhi.n	8008604 <USBD_GetDescriptor+0x14c>
 8008556:	a201      	add	r2, pc, #4	; (adr r2, 800855c <USBD_GetDescriptor+0xa4>)
 8008558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855c:	08008575 	.word	0x08008575
 8008560:	0800858d 	.word	0x0800858d
 8008564:	080085a5 	.word	0x080085a5
 8008568:	080085bd 	.word	0x080085bd
 800856c:	080085d5 	.word	0x080085d5
 8008570:	080085ed 	.word	0x080085ed
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	7c12      	ldrb	r2, [r2, #16]
 8008580:	f107 010a 	add.w	r1, r7, #10
 8008584:	4610      	mov	r0, r2
 8008586:	4798      	blx	r3
 8008588:	60f8      	str	r0, [r7, #12]
      break;
 800858a:	e040      	b.n	800860e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	7c12      	ldrb	r2, [r2, #16]
 8008598:	f107 010a 	add.w	r1, r7, #10
 800859c:	4610      	mov	r0, r2
 800859e:	4798      	blx	r3
 80085a0:	60f8      	str	r0, [r7, #12]
      break;
 80085a2:	e034      	b.n	800860e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	7c12      	ldrb	r2, [r2, #16]
 80085b0:	f107 010a 	add.w	r1, r7, #10
 80085b4:	4610      	mov	r0, r2
 80085b6:	4798      	blx	r3
 80085b8:	60f8      	str	r0, [r7, #12]
      break;
 80085ba:	e028      	b.n	800860e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	7c12      	ldrb	r2, [r2, #16]
 80085c8:	f107 010a 	add.w	r1, r7, #10
 80085cc:	4610      	mov	r0, r2
 80085ce:	4798      	blx	r3
 80085d0:	60f8      	str	r0, [r7, #12]
      break;
 80085d2:	e01c      	b.n	800860e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	7c12      	ldrb	r2, [r2, #16]
 80085e0:	f107 010a 	add.w	r1, r7, #10
 80085e4:	4610      	mov	r0, r2
 80085e6:	4798      	blx	r3
 80085e8:	60f8      	str	r0, [r7, #12]
      break;
 80085ea:	e010      	b.n	800860e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	7c12      	ldrb	r2, [r2, #16]
 80085f8:	f107 010a 	add.w	r1, r7, #10
 80085fc:	4610      	mov	r0, r2
 80085fe:	4798      	blx	r3
 8008600:	60f8      	str	r0, [r7, #12]
      break;
 8008602:	e004      	b.n	800860e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f9fb 	bl	8008a02 <USBD_CtlError>
      return;
 800860c:	e04b      	b.n	80086a6 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800860e:	e02e      	b.n	800866e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	7c1b      	ldrb	r3, [r3, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d109      	bne.n	800862c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800861e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008620:	f107 020a 	add.w	r2, r7, #10
 8008624:	4610      	mov	r0, r2
 8008626:	4798      	blx	r3
 8008628:	60f8      	str	r0, [r7, #12]
      break;
 800862a:	e020      	b.n	800866e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f9e7 	bl	8008a02 <USBD_CtlError>
      return;
 8008634:	e037      	b.n	80086a6 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	7c1b      	ldrb	r3, [r3, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10d      	bne.n	800865a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008646:	f107 020a 	add.w	r2, r7, #10
 800864a:	4610      	mov	r0, r2
 800864c:	4798      	blx	r3
 800864e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3301      	adds	r3, #1
 8008654:	2207      	movs	r2, #7
 8008656:	701a      	strb	r2, [r3, #0]
      break;
 8008658:	e009      	b.n	800866e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f9d0 	bl	8008a02 <USBD_CtlError>
      return;
 8008662:	e020      	b.n	80086a6 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f9cb 	bl	8008a02 <USBD_CtlError>
    return;
 800866c:	e01b      	b.n	80086a6 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800866e:	897b      	ldrh	r3, [r7, #10]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d011      	beq.n	8008698 <USBD_GetDescriptor+0x1e0>
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	88db      	ldrh	r3, [r3, #6]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00d      	beq.n	8008698 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	88da      	ldrh	r2, [r3, #6]
 8008680:	897b      	ldrh	r3, [r7, #10]
 8008682:	4293      	cmp	r3, r2
 8008684:	bf28      	it	cs
 8008686:	4613      	movcs	r3, r2
 8008688:	b29b      	uxth	r3, r3
 800868a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800868c:	897b      	ldrh	r3, [r7, #10]
 800868e:	461a      	mov	r2, r3
 8008690:	68f9      	ldr	r1, [r7, #12]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fa1f 	bl	8008ad6 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	88db      	ldrh	r3, [r3, #6]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d102      	bne.n	80086a6 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fa76 	bl	8008b92 <USBD_CtlSendStatus>
  }
}
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	889b      	ldrh	r3, [r3, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d130      	bne.n	8008720 <USBD_SetAddress+0x74>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	88db      	ldrh	r3, [r3, #6]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d12c      	bne.n	8008720 <USBD_SetAddress+0x74>
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	885b      	ldrh	r3, [r3, #2]
 80086ca:	2b7f      	cmp	r3, #127	; 0x7f
 80086cc:	d828      	bhi.n	8008720 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	885b      	ldrh	r3, [r3, #2]
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80086e0:	2b03      	cmp	r3, #3
 80086e2:	d104      	bne.n	80086ee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f98b 	bl	8008a02 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ec:	e01d      	b.n	800872a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	7bfa      	ldrb	r2, [r7, #15]
 80086f2:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fe78 	bl	80093f0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fa46 	bl	8008b92 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d004      	beq.n	8008716 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008714:	e009      	b.n	800872a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800871e:	e004      	b.n	800872a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f96d 	bl	8008a02 <USBD_CtlError>
  }
}
 8008728:	bf00      	nop
 800872a:	bf00      	nop
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	885b      	ldrh	r3, [r3, #2]
 8008742:	b2da      	uxtb	r2, r3
 8008744:	4b41      	ldr	r3, [pc, #260]	; (800884c <USBD_SetConfig+0x118>)
 8008746:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008748:	4b40      	ldr	r3, [pc, #256]	; (800884c <USBD_SetConfig+0x118>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d904      	bls.n	800875a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f955 	bl	8008a02 <USBD_CtlError>
 8008758:	e075      	b.n	8008846 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008760:	2b02      	cmp	r3, #2
 8008762:	d002      	beq.n	800876a <USBD_SetConfig+0x36>
 8008764:	2b03      	cmp	r3, #3
 8008766:	d023      	beq.n	80087b0 <USBD_SetConfig+0x7c>
 8008768:	e062      	b.n	8008830 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800876a:	4b38      	ldr	r3, [pc, #224]	; (800884c <USBD_SetConfig+0x118>)
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d01a      	beq.n	80087a8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8008772:	4b36      	ldr	r3, [pc, #216]	; (800884c <USBD_SetConfig+0x118>)
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2203      	movs	r2, #3
 8008780:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008784:	4b31      	ldr	r3, [pc, #196]	; (800884c <USBD_SetConfig+0x118>)
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7ff fa5d 	bl	8007c4a <USBD_SetClassConfig>
 8008790:	4603      	mov	r3, r0
 8008792:	2b02      	cmp	r3, #2
 8008794:	d104      	bne.n	80087a0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f932 	bl	8008a02 <USBD_CtlError>
          return;
 800879e:	e052      	b.n	8008846 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f9f6 	bl	8008b92 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80087a6:	e04e      	b.n	8008846 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f9f2 	bl	8008b92 <USBD_CtlSendStatus>
      break;
 80087ae:	e04a      	b.n	8008846 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80087b0:	4b26      	ldr	r3, [pc, #152]	; (800884c <USBD_SetConfig+0x118>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d112      	bne.n	80087de <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2202      	movs	r2, #2
 80087bc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80087c0:	4b22      	ldr	r3, [pc, #136]	; (800884c <USBD_SetConfig+0x118>)
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	461a      	mov	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80087ca:	4b20      	ldr	r3, [pc, #128]	; (800884c <USBD_SetConfig+0x118>)
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7ff fa59 	bl	8007c88 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f9db 	bl	8008b92 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80087dc:	e033      	b.n	8008846 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80087de:	4b1b      	ldr	r3, [pc, #108]	; (800884c <USBD_SetConfig+0x118>)
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d01d      	beq.n	8008828 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	4619      	mov	r1, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f7ff fa47 	bl	8007c88 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80087fa:	4b14      	ldr	r3, [pc, #80]	; (800884c <USBD_SetConfig+0x118>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008804:	4b11      	ldr	r3, [pc, #68]	; (800884c <USBD_SetConfig+0x118>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7ff fa1d 	bl	8007c4a <USBD_SetClassConfig>
 8008810:	4603      	mov	r3, r0
 8008812:	2b02      	cmp	r3, #2
 8008814:	d104      	bne.n	8008820 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f8f2 	bl	8008a02 <USBD_CtlError>
          return;
 800881e:	e012      	b.n	8008846 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 f9b6 	bl	8008b92 <USBD_CtlSendStatus>
      break;
 8008826:	e00e      	b.n	8008846 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f9b2 	bl	8008b92 <USBD_CtlSendStatus>
      break;
 800882e:	e00a      	b.n	8008846 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f8e5 	bl	8008a02 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008838:	4b04      	ldr	r3, [pc, #16]	; (800884c <USBD_SetConfig+0x118>)
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7ff fa22 	bl	8007c88 <USBD_ClrClassConfig>
      break;
 8008844:	bf00      	nop
    }
  }
}
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	200002fc 	.word	0x200002fc

08008850 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	88db      	ldrh	r3, [r3, #6]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d004      	beq.n	800886c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f8cc 	bl	8008a02 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800886a:	e022      	b.n	80088b2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008872:	2b02      	cmp	r3, #2
 8008874:	dc02      	bgt.n	800887c <USBD_GetConfig+0x2c>
 8008876:	2b00      	cmp	r3, #0
 8008878:	dc03      	bgt.n	8008882 <USBD_GetConfig+0x32>
 800887a:	e015      	b.n	80088a8 <USBD_GetConfig+0x58>
 800887c:	2b03      	cmp	r3, #3
 800887e:	d00b      	beq.n	8008898 <USBD_GetConfig+0x48>
 8008880:	e012      	b.n	80088a8 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3308      	adds	r3, #8
 800888c:	2201      	movs	r2, #1
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 f920 	bl	8008ad6 <USBD_CtlSendData>
      break;
 8008896:	e00c      	b.n	80088b2 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	3304      	adds	r3, #4
 800889c:	2201      	movs	r2, #1
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f918 	bl	8008ad6 <USBD_CtlSendData>
      break;
 80088a6:	e004      	b.n	80088b2 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f8a9 	bl	8008a02 <USBD_CtlError>
      break;
 80088b0:	bf00      	nop
}
 80088b2:	bf00      	nop
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80088ca:	3b01      	subs	r3, #1
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d81e      	bhi.n	800890e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	88db      	ldrh	r3, [r3, #6]
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d004      	beq.n	80088e2 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f891 	bl	8008a02 <USBD_CtlError>
      break;
 80088e0:	e01a      	b.n	8008918 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d005      	beq.n	80088fe <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	f043 0202 	orr.w	r2, r3, #2
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	330c      	adds	r3, #12
 8008902:	2202      	movs	r2, #2
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f8e5 	bl	8008ad6 <USBD_CtlSendData>
    break;
 800890c:	e004      	b.n	8008918 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f876 	bl	8008a02 <USBD_CtlError>
    break;
 8008916:	bf00      	nop
  }
}
 8008918:	bf00      	nop
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	885b      	ldrh	r3, [r3, #2]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d106      	bne.n	8008940 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f929 	bl	8008b92 <USBD_CtlSendStatus>
  }

}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008958:	3b01      	subs	r3, #1
 800895a:	2b02      	cmp	r3, #2
 800895c:	d80b      	bhi.n	8008976 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	885b      	ldrh	r3, [r3, #2]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d10c      	bne.n	8008980 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f90f 	bl	8008b92 <USBD_CtlSendStatus>
    }
    break;
 8008974:	e004      	b.n	8008980 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f842 	bl	8008a02 <USBD_CtlError>
    break;
 800897e:	e000      	b.n	8008982 <USBD_ClrFeature+0x3a>
    break;
 8008980:	bf00      	nop
  }
}
 8008982:	bf00      	nop
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800898a:	b480      	push	{r7}
 800898c:	b083      	sub	sp, #12
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	781a      	ldrb	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	785a      	ldrb	r2, [r3, #1]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	3302      	adds	r3, #2
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	3303      	adds	r3, #3
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	021b      	lsls	r3, r3, #8
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	4413      	add	r3, r2
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	3304      	adds	r3, #4
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	3305      	adds	r3, #5
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	021b      	lsls	r3, r3, #8
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	4413      	add	r3, r2
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	3306      	adds	r3, #6
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	3307      	adds	r3, #7
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	021b      	lsls	r3, r3, #8
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	4413      	add	r3, r2
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	80da      	strh	r2, [r3, #6]

}
 80089f8:	bf00      	nop
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bc80      	pop	{r7}
 8008a00:	4770      	bx	lr

08008a02 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b082      	sub	sp, #8
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008a0c:	2180      	movs	r1, #128	; 0x80
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fc84 	bl	800931c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008a14:	2100      	movs	r1, #0
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fc80 	bl	800931c <USBD_LL_StallEP>
}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d032      	beq.n	8008aa0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f000 f834 	bl	8008aa8 <USBD_GetLen>
 8008a40:	4603      	mov	r3, r0
 8008a42:	3301      	adds	r3, #1
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	75fa      	strb	r2, [r7, #23]
 8008a54:	461a      	mov	r2, r3
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	4413      	add	r3, r2
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	7812      	ldrb	r2, [r2, #0]
 8008a5e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008a60:	7dfb      	ldrb	r3, [r7, #23]
 8008a62:	1c5a      	adds	r2, r3, #1
 8008a64:	75fa      	strb	r2, [r7, #23]
 8008a66:	461a      	mov	r2, r3
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	2203      	movs	r2, #3
 8008a6e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008a70:	e012      	b.n	8008a98 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	60fa      	str	r2, [r7, #12]
 8008a78:	7dfa      	ldrb	r2, [r7, #23]
 8008a7a:	1c51      	adds	r1, r2, #1
 8008a7c:	75f9      	strb	r1, [r7, #23]
 8008a7e:	4611      	mov	r1, r2
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	440a      	add	r2, r1
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
 8008a8a:	1c5a      	adds	r2, r3, #1
 8008a8c:	75fa      	strb	r2, [r7, #23]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	4413      	add	r3, r2
 8008a94:	2200      	movs	r2, #0
 8008a96:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1e8      	bne.n	8008a72 <USBD_GetString+0x4e>
    }
  }
}
 8008aa0:	bf00      	nop
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8008ab4:	e005      	b.n	8008ac2 <USBD_GetLen+0x1a>
    {
        len++;
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1f5      	bne.n	8008ab6 <USBD_GetLen+0xe>
    }

    return len;
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bc80      	pop	{r7}
 8008ad4:	4770      	bx	lr

08008ad6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	60f8      	str	r0, [r7, #12]
 8008ade:	60b9      	str	r1, [r7, #8]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008aec:	88fa      	ldrh	r2, [r7, #6]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008af2:	88fa      	ldrh	r2, [r7, #6]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008af8:	88fb      	ldrh	r3, [r7, #6]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	2100      	movs	r1, #0
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f000 fc95 	bl	800942e <USBD_LL_Transmit>

  return USBD_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008b1c:	88fb      	ldrh	r3, [r7, #6]
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	2100      	movs	r1, #0
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 fc83 	bl	800942e <USBD_LL_Transmit>

  return USBD_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2203      	movs	r2, #3
 8008b44:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008b48:	88fa      	ldrh	r2, [r7, #6]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008b50:	88fa      	ldrh	r2, [r7, #6]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008b58:	88fb      	ldrh	r3, [r7, #6]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f000 fc88 	bl	8009474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	60f8      	str	r0, [r7, #12]
 8008b76:	60b9      	str	r1, [r7, #8]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b7c:	88fb      	ldrh	r3, [r7, #6]
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	2100      	movs	r1, #0
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 fc76 	bl	8009474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b082      	sub	sp, #8
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2204      	movs	r2, #4
 8008b9e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fc40 	bl	800942e <USBD_LL_Transmit>

  return USBD_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2205      	movs	r2, #5
 8008bc4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008bc8:	2300      	movs	r3, #0
 8008bca:	2200      	movs	r2, #0
 8008bcc:	2100      	movs	r1, #0
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fc50 	bl	8009474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
	...

08008be0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008be4:	2200      	movs	r2, #0
 8008be6:	4912      	ldr	r1, [pc, #72]	; (8008c30 <MX_USB_DEVICE_Init+0x50>)
 8008be8:	4812      	ldr	r0, [pc, #72]	; (8008c34 <MX_USB_DEVICE_Init+0x54>)
 8008bea:	f7fe ffd4 	bl	8007b96 <USBD_Init>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008bf4:	f7f8 fa1e 	bl	8001034 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008bf8:	490f      	ldr	r1, [pc, #60]	; (8008c38 <MX_USB_DEVICE_Init+0x58>)
 8008bfa:	480e      	ldr	r0, [pc, #56]	; (8008c34 <MX_USB_DEVICE_Init+0x54>)
 8008bfc:	f7fe fff6 	bl	8007bec <USBD_RegisterClass>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c06:	f7f8 fa15 	bl	8001034 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008c0a:	490c      	ldr	r1, [pc, #48]	; (8008c3c <MX_USB_DEVICE_Init+0x5c>)
 8008c0c:	4809      	ldr	r0, [pc, #36]	; (8008c34 <MX_USB_DEVICE_Init+0x54>)
 8008c0e:	f7fe ff27 	bl	8007a60 <USBD_CDC_RegisterInterface>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008c18:	f7f8 fa0c 	bl	8001034 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008c1c:	4805      	ldr	r0, [pc, #20]	; (8008c34 <MX_USB_DEVICE_Init+0x54>)
 8008c1e:	f7fe fffe 	bl	8007c1e <USBD_Start>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c28:	f7f8 fa04 	bl	8001034 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c2c:	bf00      	nop
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	2000012c 	.word	0x2000012c
 8008c34:	20000300 	.word	0x20000300
 8008c38:	20000018 	.word	0x20000018
 8008c3c:	2000011c 	.word	0x2000011c

08008c40 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c44:	2200      	movs	r2, #0
 8008c46:	4905      	ldr	r1, [pc, #20]	; (8008c5c <CDC_Init_FS+0x1c>)
 8008c48:	4805      	ldr	r0, [pc, #20]	; (8008c60 <CDC_Init_FS+0x20>)
 8008c4a:	f7fe ff1f 	bl	8007a8c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c4e:	4905      	ldr	r1, [pc, #20]	; (8008c64 <CDC_Init_FS+0x24>)
 8008c50:	4803      	ldr	r0, [pc, #12]	; (8008c60 <CDC_Init_FS+0x20>)
 8008c52:	f7fe ff34 	bl	8007abe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c56:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	20000984 	.word	0x20000984
 8008c60:	20000300 	.word	0x20000300
 8008c64:	2000059c 	.word	0x2000059c

08008c68 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bc80      	pop	{r7}
 8008c74:	4770      	bx	lr
	...

08008c78 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	6039      	str	r1, [r7, #0]
 8008c82:	71fb      	strb	r3, [r7, #7]
 8008c84:	4613      	mov	r3, r2
 8008c86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	2b23      	cmp	r3, #35	; 0x23
 8008c8c:	d84a      	bhi.n	8008d24 <CDC_Control_FS+0xac>
 8008c8e:	a201      	add	r2, pc, #4	; (adr r2, 8008c94 <CDC_Control_FS+0x1c>)
 8008c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c94:	08008d25 	.word	0x08008d25
 8008c98:	08008d25 	.word	0x08008d25
 8008c9c:	08008d25 	.word	0x08008d25
 8008ca0:	08008d25 	.word	0x08008d25
 8008ca4:	08008d25 	.word	0x08008d25
 8008ca8:	08008d25 	.word	0x08008d25
 8008cac:	08008d25 	.word	0x08008d25
 8008cb0:	08008d25 	.word	0x08008d25
 8008cb4:	08008d25 	.word	0x08008d25
 8008cb8:	08008d25 	.word	0x08008d25
 8008cbc:	08008d25 	.word	0x08008d25
 8008cc0:	08008d25 	.word	0x08008d25
 8008cc4:	08008d25 	.word	0x08008d25
 8008cc8:	08008d25 	.word	0x08008d25
 8008ccc:	08008d25 	.word	0x08008d25
 8008cd0:	08008d25 	.word	0x08008d25
 8008cd4:	08008d25 	.word	0x08008d25
 8008cd8:	08008d25 	.word	0x08008d25
 8008cdc:	08008d25 	.word	0x08008d25
 8008ce0:	08008d25 	.word	0x08008d25
 8008ce4:	08008d25 	.word	0x08008d25
 8008ce8:	08008d25 	.word	0x08008d25
 8008cec:	08008d25 	.word	0x08008d25
 8008cf0:	08008d25 	.word	0x08008d25
 8008cf4:	08008d25 	.word	0x08008d25
 8008cf8:	08008d25 	.word	0x08008d25
 8008cfc:	08008d25 	.word	0x08008d25
 8008d00:	08008d25 	.word	0x08008d25
 8008d04:	08008d25 	.word	0x08008d25
 8008d08:	08008d25 	.word	0x08008d25
 8008d0c:	08008d25 	.word	0x08008d25
 8008d10:	08008d25 	.word	0x08008d25
 8008d14:	08008d25 	.word	0x08008d25
 8008d18:	08008d25 	.word	0x08008d25
 8008d1c:	08008d25 	.word	0x08008d25
 8008d20:	08008d25 	.word	0x08008d25
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d24:	bf00      	nop
  }

  return (USBD_OK);
 8008d26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bc80      	pop	{r7}
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop

08008d34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	480e      	ldr	r0, [pc, #56]	; (8008d7c <CDC_Receive_FS+0x48>)
 8008d42:	f7fe febc 	bl	8007abe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d46:	480d      	ldr	r0, [pc, #52]	; (8008d7c <CDC_Receive_FS+0x48>)
 8008d48:	f7fe fefb 	bl	8007b42 <USBD_CDC_ReceivePacket>

  for(uint32_t i = 0; i< *Len; i++){
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	60fb      	str	r3, [r7, #12]
 8008d50:	e009      	b.n	8008d66 <CDC_Receive_FS+0x32>
  	  //byte = Buf[i];
  	  usb_recv(Buf[i]);
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4413      	add	r3, r2
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f001 f88a 	bl	8009e74 <usb_recv>
  for(uint32_t i = 0; i< *Len; i++){
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	3301      	adds	r3, #1
 8008d64:	60fb      	str	r3, [r7, #12]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d3f0      	bcc.n	8008d52 <CDC_Receive_FS+0x1e>
    }

  return (USBD_OK);
 8008d70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	20000300 	.word	0x20000300

08008d80 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	460b      	mov	r3, r1
 8008d8a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008d90:	4b0d      	ldr	r3, [pc, #52]	; (8008dc8 <CDC_Transmit_FS+0x48>)
 8008d92:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d96:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e00b      	b.n	8008dbe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008da6:	887b      	ldrh	r3, [r7, #2]
 8008da8:	461a      	mov	r2, r3
 8008daa:	6879      	ldr	r1, [r7, #4]
 8008dac:	4806      	ldr	r0, [pc, #24]	; (8008dc8 <CDC_Transmit_FS+0x48>)
 8008dae:	f7fe fe6d 	bl	8007a8c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008db2:	4805      	ldr	r0, [pc, #20]	; (8008dc8 <CDC_Transmit_FS+0x48>)
 8008db4:	f7fe fe96 	bl	8007ae4 <USBD_CDC_TransmitPacket>
 8008db8:	4603      	mov	r3, r0
 8008dba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20000300 	.word	0x20000300

08008dcc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	6039      	str	r1, [r7, #0]
 8008dd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2212      	movs	r2, #18
 8008ddc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008dde:	4b03      	ldr	r3, [pc, #12]	; (8008dec <USBD_FS_DeviceDescriptor+0x20>)
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bc80      	pop	{r7}
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	20000148 	.word	0x20000148

08008df0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	4603      	mov	r3, r0
 8008df8:	6039      	str	r1, [r7, #0]
 8008dfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2204      	movs	r2, #4
 8008e00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e02:	4b03      	ldr	r3, [pc, #12]	; (8008e10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bc80      	pop	{r7}
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	2000015c 	.word	0x2000015c

08008e14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	6039      	str	r1, [r7, #0]
 8008e1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e20:	79fb      	ldrb	r3, [r7, #7]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d105      	bne.n	8008e32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	4907      	ldr	r1, [pc, #28]	; (8008e48 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e2a:	4808      	ldr	r0, [pc, #32]	; (8008e4c <USBD_FS_ProductStrDescriptor+0x38>)
 8008e2c:	f7ff fdfa 	bl	8008a24 <USBD_GetString>
 8008e30:	e004      	b.n	8008e3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	4904      	ldr	r1, [pc, #16]	; (8008e48 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e36:	4805      	ldr	r0, [pc, #20]	; (8008e4c <USBD_FS_ProductStrDescriptor+0x38>)
 8008e38:	f7ff fdf4 	bl	8008a24 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e3c:	4b02      	ldr	r3, [pc, #8]	; (8008e48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	20000d6c 	.word	0x20000d6c
 8008e4c:	08009fac 	.word	0x08009fac

08008e50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	4603      	mov	r3, r0
 8008e58:	6039      	str	r1, [r7, #0]
 8008e5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	4904      	ldr	r1, [pc, #16]	; (8008e70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e60:	4804      	ldr	r0, [pc, #16]	; (8008e74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e62:	f7ff fddf 	bl	8008a24 <USBD_GetString>
  return USBD_StrDesc;
 8008e66:	4b02      	ldr	r3, [pc, #8]	; (8008e70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	20000d6c 	.word	0x20000d6c
 8008e74:	08009fc4 	.word	0x08009fc4

08008e78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	4603      	mov	r3, r0
 8008e80:	6039      	str	r1, [r7, #0]
 8008e82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	221a      	movs	r2, #26
 8008e88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e8a:	f000 f843 	bl	8008f14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e8e:	4b02      	ldr	r3, [pc, #8]	; (8008e98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	20000160 	.word	0x20000160

08008e9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	6039      	str	r1, [r7, #0]
 8008ea6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ea8:	79fb      	ldrb	r3, [r7, #7]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d105      	bne.n	8008eba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	4907      	ldr	r1, [pc, #28]	; (8008ed0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008eb2:	4808      	ldr	r0, [pc, #32]	; (8008ed4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008eb4:	f7ff fdb6 	bl	8008a24 <USBD_GetString>
 8008eb8:	e004      	b.n	8008ec4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	4904      	ldr	r1, [pc, #16]	; (8008ed0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ebe:	4805      	ldr	r0, [pc, #20]	; (8008ed4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ec0:	f7ff fdb0 	bl	8008a24 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ec4:	4b02      	ldr	r3, [pc, #8]	; (8008ed0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	20000d6c 	.word	0x20000d6c
 8008ed4:	08009fd8 	.word	0x08009fd8

08008ed8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	6039      	str	r1, [r7, #0]
 8008ee2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d105      	bne.n	8008ef6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	4907      	ldr	r1, [pc, #28]	; (8008f0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008eee:	4808      	ldr	r0, [pc, #32]	; (8008f10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ef0:	f7ff fd98 	bl	8008a24 <USBD_GetString>
 8008ef4:	e004      	b.n	8008f00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	4904      	ldr	r1, [pc, #16]	; (8008f0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008efa:	4805      	ldr	r0, [pc, #20]	; (8008f10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008efc:	f7ff fd92 	bl	8008a24 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f00:	4b02      	ldr	r3, [pc, #8]	; (8008f0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20000d6c 	.word	0x20000d6c
 8008f10:	08009fe4 	.word	0x08009fe4

08008f14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f1a:	4b0f      	ldr	r3, [pc, #60]	; (8008f58 <Get_SerialNum+0x44>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f20:	4b0e      	ldr	r3, [pc, #56]	; (8008f5c <Get_SerialNum+0x48>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f26:	4b0e      	ldr	r3, [pc, #56]	; (8008f60 <Get_SerialNum+0x4c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4413      	add	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d009      	beq.n	8008f4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f3a:	2208      	movs	r2, #8
 8008f3c:	4909      	ldr	r1, [pc, #36]	; (8008f64 <Get_SerialNum+0x50>)
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 f814 	bl	8008f6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f44:	2204      	movs	r2, #4
 8008f46:	4908      	ldr	r1, [pc, #32]	; (8008f68 <Get_SerialNum+0x54>)
 8008f48:	68b8      	ldr	r0, [r7, #8]
 8008f4a:	f000 f80f 	bl	8008f6c <IntToUnicode>
  }
}
 8008f4e:	bf00      	nop
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	1ff80050 	.word	0x1ff80050
 8008f5c:	1ff80054 	.word	0x1ff80054
 8008f60:	1ff80058 	.word	0x1ff80058
 8008f64:	20000162 	.word	0x20000162
 8008f68:	20000172 	.word	0x20000172

08008f6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	4613      	mov	r3, r2
 8008f78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f7e:	2300      	movs	r3, #0
 8008f80:	75fb      	strb	r3, [r7, #23]
 8008f82:	e027      	b.n	8008fd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	0f1b      	lsrs	r3, r3, #28
 8008f88:	2b09      	cmp	r3, #9
 8008f8a:	d80b      	bhi.n	8008fa4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	0f1b      	lsrs	r3, r3, #28
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	005b      	lsls	r3, r3, #1
 8008f96:	4619      	mov	r1, r3
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	440b      	add	r3, r1
 8008f9c:	3230      	adds	r2, #48	; 0x30
 8008f9e:	b2d2      	uxtb	r2, r2
 8008fa0:	701a      	strb	r2, [r3, #0]
 8008fa2:	e00a      	b.n	8008fba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	0f1b      	lsrs	r3, r3, #28
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	7dfb      	ldrb	r3, [r7, #23]
 8008fac:	005b      	lsls	r3, r3, #1
 8008fae:	4619      	mov	r1, r3
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	440b      	add	r3, r1
 8008fb4:	3237      	adds	r2, #55	; 0x37
 8008fb6:	b2d2      	uxtb	r2, r2
 8008fb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	011b      	lsls	r3, r3, #4
 8008fbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008fc0:	7dfb      	ldrb	r3, [r7, #23]
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	4413      	add	r3, r2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008fce:	7dfb      	ldrb	r3, [r7, #23]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	75fb      	strb	r3, [r7, #23]
 8008fd4:	7dfa      	ldrb	r2, [r7, #23]
 8008fd6:	79fb      	ldrb	r3, [r7, #7]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d3d3      	bcc.n	8008f84 <IntToUnicode+0x18>
  }
}
 8008fdc:	bf00      	nop
 8008fde:	bf00      	nop
 8008fe0:	371c      	adds	r7, #28
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bc80      	pop	{r7}
 8008fe6:	4770      	bx	lr

08008fe8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8008ff4:	78fb      	ldrb	r3, [r7, #3]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d106      	bne.n	8009008 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8008ffa:	4b09      	ldr	r3, [pc, #36]	; (8009020 <HAL_PCDEx_SetConnectionState+0x38>)
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	4a08      	ldr	r2, [pc, #32]	; (8009020 <HAL_PCDEx_SetConnectionState+0x38>)
 8009000:	f043 0301 	orr.w	r3, r3, #1
 8009004:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8009006:	e005      	b.n	8009014 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8009008:	4b05      	ldr	r3, [pc, #20]	; (8009020 <HAL_PCDEx_SetConnectionState+0x38>)
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	4a04      	ldr	r2, [pc, #16]	; (8009020 <HAL_PCDEx_SetConnectionState+0x38>)
 800900e:	f023 0301 	bic.w	r3, r3, #1
 8009012:	6053      	str	r3, [r2, #4]
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	bc80      	pop	{r7}
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	40010000 	.word	0x40010000

08009024 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a0d      	ldr	r2, [pc, #52]	; (8009068 <HAL_PCD_MspInit+0x44>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d113      	bne.n	800905e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009036:	4b0d      	ldr	r3, [pc, #52]	; (800906c <HAL_PCD_MspInit+0x48>)
 8009038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903a:	4a0c      	ldr	r2, [pc, #48]	; (800906c <HAL_PCD_MspInit+0x48>)
 800903c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009040:	6253      	str	r3, [r2, #36]	; 0x24
 8009042:	4b0a      	ldr	r3, [pc, #40]	; (800906c <HAL_PCD_MspInit+0x48>)
 8009044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009046:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800904e:	2200      	movs	r2, #0
 8009050:	2100      	movs	r1, #0
 8009052:	2014      	movs	r0, #20
 8009054:	f7f8 ff0b 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009058:	2014      	movs	r0, #20
 800905a:	f7f8 ff24 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800905e:	bf00      	nop
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	40005c00 	.word	0x40005c00
 800906c:	40023800 	.word	0x40023800

08009070 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009084:	4619      	mov	r1, r3
 8009086:	4610      	mov	r0, r2
 8009088:	f7fe fe11 	bl	8007cae <USBD_LL_SetupStage>
}
 800908c:	bf00      	nop
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	460b      	mov	r3, r1
 800909e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80090a6:	78fa      	ldrb	r2, [r7, #3]
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	4613      	mov	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	00db      	lsls	r3, r3, #3
 80090b2:	440b      	add	r3, r1
 80090b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	78fb      	ldrb	r3, [r7, #3]
 80090bc:	4619      	mov	r1, r3
 80090be:	f7fe fe43 	bl	8007d48 <USBD_LL_DataOutStage>
}
 80090c2:	bf00      	nop
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	460b      	mov	r3, r1
 80090d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80090dc:	78fa      	ldrb	r2, [r7, #3]
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	4613      	mov	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	00db      	lsls	r3, r3, #3
 80090e8:	440b      	add	r3, r1
 80090ea:	333c      	adds	r3, #60	; 0x3c
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	78fb      	ldrb	r3, [r7, #3]
 80090f0:	4619      	mov	r1, r3
 80090f2:	f7fe fe9a 	bl	8007e2a <USBD_LL_DataInStage>
}
 80090f6:	bf00      	nop
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800910c:	4618      	mov	r0, r3
 800910e:	f7fe ffa5 	bl	800805c <USBD_LL_SOF>
}
 8009112:	bf00      	nop
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b084      	sub	sp, #16
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009122:	2301      	movs	r3, #1
 8009124:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	2b02      	cmp	r3, #2
 800912c:	d001      	beq.n	8009132 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800912e:	f7f7 ff81 	bl	8001034 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009138:	7bfa      	ldrb	r2, [r7, #15]
 800913a:	4611      	mov	r1, r2
 800913c:	4618      	mov	r0, r3
 800913e:	f7fe ff5a 	bl	8007ff6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009148:	4618      	mov	r0, r3
 800914a:	f7fe ff13 	bl	8007f74 <USBD_LL_Reset>
}
 800914e:	bf00      	nop
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
	...

08009158 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe ff54 	bl	8008014 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d005      	beq.n	8009180 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009174:	4b04      	ldr	r3, [pc, #16]	; (8009188 <HAL_PCD_SuspendCallback+0x30>)
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	4a03      	ldr	r2, [pc, #12]	; (8009188 <HAL_PCD_SuspendCallback+0x30>)
 800917a:	f043 0306 	orr.w	r3, r3, #6
 800917e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	e000ed00 	.word	0xe000ed00

0800918c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe ff4e 	bl	800803c <USBD_LL_Resume>
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80091b0:	4a28      	ldr	r2, [pc, #160]	; (8009254 <USBD_LL_Init+0xac>)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a26      	ldr	r2, [pc, #152]	; (8009254 <USBD_LL_Init+0xac>)
 80091bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 80091c0:	4b24      	ldr	r3, [pc, #144]	; (8009254 <USBD_LL_Init+0xac>)
 80091c2:	4a25      	ldr	r2, [pc, #148]	; (8009258 <USBD_LL_Init+0xb0>)
 80091c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80091c6:	4b23      	ldr	r3, [pc, #140]	; (8009254 <USBD_LL_Init+0xac>)
 80091c8:	2208      	movs	r2, #8
 80091ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80091cc:	4b21      	ldr	r3, [pc, #132]	; (8009254 <USBD_LL_Init+0xac>)
 80091ce:	2202      	movs	r2, #2
 80091d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80091d2:	4b20      	ldr	r3, [pc, #128]	; (8009254 <USBD_LL_Init+0xac>)
 80091d4:	2202      	movs	r2, #2
 80091d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80091d8:	4b1e      	ldr	r3, [pc, #120]	; (8009254 <USBD_LL_Init+0xac>)
 80091da:	2200      	movs	r2, #0
 80091dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80091de:	4b1d      	ldr	r3, [pc, #116]	; (8009254 <USBD_LL_Init+0xac>)
 80091e0:	2200      	movs	r2, #0
 80091e2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80091e4:	481b      	ldr	r0, [pc, #108]	; (8009254 <USBD_LL_Init+0xac>)
 80091e6:	f7f9 fba3 	bl	8002930 <HAL_PCD_Init>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80091f0:	f7f7 ff20 	bl	8001034 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80091fa:	2318      	movs	r3, #24
 80091fc:	2200      	movs	r2, #0
 80091fe:	2100      	movs	r1, #0
 8009200:	f7fb f82b 	bl	800425a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800920a:	2358      	movs	r3, #88	; 0x58
 800920c:	2200      	movs	r2, #0
 800920e:	2180      	movs	r1, #128	; 0x80
 8009210:	f7fb f823 	bl	800425a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800921a:	23c0      	movs	r3, #192	; 0xc0
 800921c:	2200      	movs	r2, #0
 800921e:	2181      	movs	r1, #129	; 0x81
 8009220:	f7fb f81b 	bl	800425a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800922a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800922e:	2200      	movs	r2, #0
 8009230:	2101      	movs	r1, #1
 8009232:	f7fb f812 	bl	800425a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800923c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009240:	2200      	movs	r2, #0
 8009242:	2182      	movs	r1, #130	; 0x82
 8009244:	f7fb f809 	bl	800425a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	20000f6c 	.word	0x20000f6c
 8009258:	40005c00 	.word	0x40005c00

0800925c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009272:	4618      	mov	r0, r3
 8009274:	f7f9 fc2e 	bl	8002ad4 <HAL_PCD_Start>
 8009278:	4603      	mov	r3, r0
 800927a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	4618      	mov	r0, r3
 8009280:	f000 f944 	bl	800950c <USBD_Get_USB_Status>
 8009284:	4603      	mov	r3, r0
 8009286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009288:	7bbb      	ldrb	r3, [r7, #14]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	4608      	mov	r0, r1
 800929c:	4611      	mov	r1, r2
 800929e:	461a      	mov	r2, r3
 80092a0:	4603      	mov	r3, r0
 80092a2:	70fb      	strb	r3, [r7, #3]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70bb      	strb	r3, [r7, #2]
 80092a8:	4613      	mov	r3, r2
 80092aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80092ba:	78bb      	ldrb	r3, [r7, #2]
 80092bc:	883a      	ldrh	r2, [r7, #0]
 80092be:	78f9      	ldrb	r1, [r7, #3]
 80092c0:	f7f9 fd27 	bl	8002d12 <HAL_PCD_EP_Open>
 80092c4:	4603      	mov	r3, r0
 80092c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 f91e 	bl	800950c <USBD_Get_USB_Status>
 80092d0:	4603      	mov	r3, r0
 80092d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	460b      	mov	r3, r1
 80092e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80092f8:	78fa      	ldrb	r2, [r7, #3]
 80092fa:	4611      	mov	r1, r2
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7f9 fd65 	bl	8002dcc <HAL_PCD_EP_Close>
 8009302:	4603      	mov	r3, r0
 8009304:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009306:	7bfb      	ldrb	r3, [r7, #15]
 8009308:	4618      	mov	r0, r3
 800930a:	f000 f8ff 	bl	800950c <USBD_Get_USB_Status>
 800930e:	4603      	mov	r3, r0
 8009310:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009312:	7bbb      	ldrb	r3, [r7, #14]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	4611      	mov	r1, r2
 800933a:	4618      	mov	r0, r3
 800933c:	f7f9 fe0d 	bl	8002f5a <HAL_PCD_EP_SetStall>
 8009340:	4603      	mov	r3, r0
 8009342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009344:	7bfb      	ldrb	r3, [r7, #15]
 8009346:	4618      	mov	r0, r3
 8009348:	f000 f8e0 	bl	800950c <USBD_Get_USB_Status>
 800934c:	4603      	mov	r3, r0
 800934e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009350:	7bbb      	ldrb	r3, [r7, #14]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	460b      	mov	r3, r1
 8009364:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009374:	78fa      	ldrb	r2, [r7, #3]
 8009376:	4611      	mov	r1, r2
 8009378:	4618      	mov	r0, r3
 800937a:	f7f9 fe40 	bl	8002ffe <HAL_PCD_EP_ClrStall>
 800937e:	4603      	mov	r3, r0
 8009380:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	4618      	mov	r0, r3
 8009386:	f000 f8c1 	bl	800950c <USBD_Get_USB_Status>
 800938a:	4603      	mov	r3, r0
 800938c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800938e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80093aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80093ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	da0c      	bge.n	80093ce <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80093b4:	78fb      	ldrb	r3, [r7, #3]
 80093b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ba:	68f9      	ldr	r1, [r7, #12]
 80093bc:	1c5a      	adds	r2, r3, #1
 80093be:	4613      	mov	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	00db      	lsls	r3, r3, #3
 80093c6:	440b      	add	r3, r1
 80093c8:	3302      	adds	r3, #2
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	e00b      	b.n	80093e6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093ce:	78fb      	ldrb	r3, [r7, #3]
 80093d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093d4:	68f9      	ldr	r1, [r7, #12]
 80093d6:	4613      	mov	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	00db      	lsls	r3, r3, #3
 80093de:	440b      	add	r3, r1
 80093e0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80093e4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bc80      	pop	{r7}
 80093ee:	4770      	bx	lr

080093f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800940a:	78fa      	ldrb	r2, [r7, #3]
 800940c:	4611      	mov	r1, r2
 800940e:	4618      	mov	r0, r3
 8009410:	f7f9 fc5a 	bl	8002cc8 <HAL_PCD_SetAddress>
 8009414:	4603      	mov	r3, r0
 8009416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	4618      	mov	r0, r3
 800941c:	f000 f876 	bl	800950c <USBD_Get_USB_Status>
 8009420:	4603      	mov	r3, r0
 8009422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009424:	7bbb      	ldrb	r3, [r7, #14]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b086      	sub	sp, #24
 8009432:	af00      	add	r7, sp, #0
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	607a      	str	r2, [r7, #4]
 8009438:	461a      	mov	r2, r3
 800943a:	460b      	mov	r3, r1
 800943c:	72fb      	strb	r3, [r7, #11]
 800943e:	4613      	mov	r3, r2
 8009440:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009450:	893b      	ldrh	r3, [r7, #8]
 8009452:	7af9      	ldrb	r1, [r7, #11]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	f7f9 fd49 	bl	8002eec <HAL_PCD_EP_Transmit>
 800945a:	4603      	mov	r3, r0
 800945c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800945e:	7dfb      	ldrb	r3, [r7, #23]
 8009460:	4618      	mov	r0, r3
 8009462:	f000 f853 	bl	800950c <USBD_Get_USB_Status>
 8009466:	4603      	mov	r3, r0
 8009468:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800946a:	7dbb      	ldrb	r3, [r7, #22]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	607a      	str	r2, [r7, #4]
 800947e:	461a      	mov	r2, r3
 8009480:	460b      	mov	r3, r1
 8009482:	72fb      	strb	r3, [r7, #11]
 8009484:	4613      	mov	r3, r2
 8009486:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009496:	893b      	ldrh	r3, [r7, #8]
 8009498:	7af9      	ldrb	r1, [r7, #11]
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	f7f9 fcde 	bl	8002e5c <HAL_PCD_EP_Receive>
 80094a0:	4603      	mov	r3, r0
 80094a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094a4:	7dfb      	ldrb	r3, [r7, #23]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 f830 	bl	800950c <USBD_Get_USB_Status>
 80094ac:	4603      	mov	r3, r0
 80094ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b082      	sub	sp, #8
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	460b      	mov	r3, r1
 80094c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80094cc:	78fa      	ldrb	r2, [r7, #3]
 80094ce:	4611      	mov	r1, r2
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7f9 fcf4 	bl	8002ebe <HAL_PCD_EP_GetRxCount>
 80094d6:	4603      	mov	r3, r0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094e8:	4b02      	ldr	r3, [pc, #8]	; (80094f4 <USBD_static_malloc+0x14>)
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bc80      	pop	{r7}
 80094f2:	4770      	bx	lr
 80094f4:	20001258 	.word	0x20001258

080094f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]

}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	bc80      	pop	{r7}
 8009508:	4770      	bx	lr
	...

0800950c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	4603      	mov	r3, r0
 8009514:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800951a:	79fb      	ldrb	r3, [r7, #7]
 800951c:	2b03      	cmp	r3, #3
 800951e:	d817      	bhi.n	8009550 <USBD_Get_USB_Status+0x44>
 8009520:	a201      	add	r2, pc, #4	; (adr r2, 8009528 <USBD_Get_USB_Status+0x1c>)
 8009522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009526:	bf00      	nop
 8009528:	08009539 	.word	0x08009539
 800952c:	0800953f 	.word	0x0800953f
 8009530:	08009545 	.word	0x08009545
 8009534:	0800954b 	.word	0x0800954b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	73fb      	strb	r3, [r7, #15]
    break;
 800953c:	e00b      	b.n	8009556 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800953e:	2302      	movs	r3, #2
 8009540:	73fb      	strb	r3, [r7, #15]
    break;
 8009542:	e008      	b.n	8009556 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009544:	2301      	movs	r3, #1
 8009546:	73fb      	strb	r3, [r7, #15]
    break;
 8009548:	e005      	b.n	8009556 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800954a:	2302      	movs	r3, #2
 800954c:	73fb      	strb	r3, [r7, #15]
    break;
 800954e:	e002      	b.n	8009556 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009550:	2302      	movs	r3, #2
 8009552:	73fb      	strb	r3, [r7, #15]
    break;
 8009554:	bf00      	nop
  }
  return usb_status;
 8009556:	7bfb      	ldrb	r3, [r7, #15]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3714      	adds	r7, #20
 800955c:	46bd      	mov	sp, r7
 800955e:	bc80      	pop	{r7}
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop

08009564 <usb_callback>:
// USB Receive logic
/////////////////////////////////////////////////////////////////////////////////



void usb_callback(uint8_t *arr, uint16_t len){
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	460b      	mov	r3, r1
 800956e:	807b      	strh	r3, [r7, #2]


	////////////
	// DEV INFO
	// (STANDART COMMAND)
	if(arr[0] == 0 ){
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d120      	bne.n	80095ba <usb_callback+0x56>

		uint16_t *idBase0 = (uint16_t*)(UID_BASE);
 8009578:	4b4b      	ldr	r3, [pc, #300]	; (80096a8 <usb_callback+0x144>)
 800957a:	617b      	str	r3, [r7, #20]
		uint16_t *idBase1 = (uint16_t*)(UID_BASE + 0x02);
 800957c:	4b4b      	ldr	r3, [pc, #300]	; (80096ac <usb_callback+0x148>)
 800957e:	613b      	str	r3, [r7, #16]
		uint32_t *idBase2 = (uint32_t*)(UID_BASE + 0x04);
 8009580:	4b4b      	ldr	r3, [pc, #300]	; (80096b0 <usb_callback+0x14c>)
 8009582:	60fb      	str	r3, [r7, #12]
		uint32_t *idBase3 = (uint32_t*)(UID_BASE + 0x08);
 8009584:	4b4b      	ldr	r3, [pc, #300]	; (80096b4 <usb_callback+0x150>)
 8009586:	60bb      	str	r3, [r7, #8]

		usb_rst_cursor();
 8009588:	f000 fbd2 	bl	8009d30 <usb_rst_cursor>
		usb_add_uint8(0x00);
 800958c:	2000      	movs	r0, #0
 800958e:	f000 fab5 	bl	8009afc <usb_add_uint8>
		usb_add_uint16(idBase0);
 8009592:	6978      	ldr	r0, [r7, #20]
 8009594:	f000 fad6 	bl	8009b44 <usb_add_uint16>
		usb_add_uint16(idBase1);
 8009598:	6938      	ldr	r0, [r7, #16]
 800959a:	f000 fad3 	bl	8009b44 <usb_add_uint16>
		usb_add_uint32(idBase2);
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f000 fb0a 	bl	8009bb8 <usb_add_uint32>
		usb_add_uint32(idBase3);
 80095a4:	68b8      	ldr	r0, [r7, #8]
 80095a6:	f000 fb07 	bl	8009bb8 <usb_add_uint32>

		usb_add_uint16((uint8_t)DEVICE_CODE);
 80095aa:	2000      	movs	r0, #0
 80095ac:	f000 faca 	bl	8009b44 <usb_add_uint16>
		usb_add_uint8((uint8_t)DEVICE_VER);
 80095b0:	2000      	movs	r0, #0
 80095b2:	f000 faa3 	bl	8009afc <usb_add_uint8>

		usb_send_buff();
 80095b6:	f000 fbc7 	bl	8009d48 <usb_send_buff>
	}



	////////////////Start Convert Single mode
	if(arr[0] == 1 ){
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d11c      	bne.n	80095fc <usb_callback+0x98>

		HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 0);
 80095c2:	2200      	movs	r2, #0
 80095c4:	2180      	movs	r1, #128	; 0x80
 80095c6:	483c      	ldr	r0, [pc, #240]	; (80096b8 <usb_callback+0x154>)
 80095c8:	f7f9 f856 	bl	8002678 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 1);
 80095cc:	2201      	movs	r2, #1
 80095ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80095d2:	483a      	ldr	r0, [pc, #232]	; (80096bc <usb_callback+0x158>)
 80095d4:	f7f9 f850 	bl	8002678 <HAL_GPIO_WritePin>
		continious = 0;
 80095d8:	4b39      	ldr	r3, [pc, #228]	; (80096c0 <usb_callback+0x15c>)
 80095da:	2200      	movs	r2, #0
 80095dc:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_data, ch_count*8);
 80095de:	2270      	movs	r2, #112	; 0x70
 80095e0:	4938      	ldr	r1, [pc, #224]	; (80096c4 <usb_callback+0x160>)
 80095e2:	4839      	ldr	r0, [pc, #228]	; (80096c8 <usb_callback+0x164>)
 80095e4:	f7f8 f810 	bl	8001608 <HAL_ADC_Start_DMA>

		usb_rst_cursor();
 80095e8:	f000 fba2 	bl	8009d30 <usb_rst_cursor>
		usb_add_uint8(0x01);
 80095ec:	2001      	movs	r0, #1
 80095ee:	f000 fa85 	bl	8009afc <usb_add_uint8>
		usb_add_uint8(0);
 80095f2:	2000      	movs	r0, #0
 80095f4:	f000 fa82 	bl	8009afc <usb_add_uint8>

		usb_send_buff();
 80095f8:	f000 fba6 	bl	8009d48 <usb_send_buff>
	}

	////////////////Start Convert Continious mode
	if(arr[0] == 2 ){
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	2b02      	cmp	r3, #2
 8009602:	d117      	bne.n	8009634 <usb_callback+0xd0>

		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 0);
 8009604:	2200      	movs	r2, #0
 8009606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800960a:	482c      	ldr	r0, [pc, #176]	; (80096bc <usb_callback+0x158>)
 800960c:	f7f9 f834 	bl	8002678 <HAL_GPIO_WritePin>
		continious = 1;
 8009610:	4b2b      	ldr	r3, [pc, #172]	; (80096c0 <usb_callback+0x15c>)
 8009612:	2201      	movs	r2, #1
 8009614:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_data, ch_count*8);
 8009616:	2270      	movs	r2, #112	; 0x70
 8009618:	492a      	ldr	r1, [pc, #168]	; (80096c4 <usb_callback+0x160>)
 800961a:	482b      	ldr	r0, [pc, #172]	; (80096c8 <usb_callback+0x164>)
 800961c:	f7f7 fff4 	bl	8001608 <HAL_ADC_Start_DMA>



		usb_rst_cursor();
 8009620:	f000 fb86 	bl	8009d30 <usb_rst_cursor>
		usb_add_uint8(0x02);
 8009624:	2002      	movs	r0, #2
 8009626:	f000 fa69 	bl	8009afc <usb_add_uint8>
		usb_add_uint8(0);
 800962a:	2000      	movs	r0, #0
 800962c:	f000 fa66 	bl	8009afc <usb_add_uint8>

		usb_send_buff();
 8009630:	f000 fb8a 	bl	8009d48 <usb_send_buff>
	}

	//////////////// int/float mode
	if(arr[0] == 3 ){
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b03      	cmp	r3, #3
 800963a:	d115      	bne.n	8009668 <usb_callback+0x104>

		if(arr[1]>0){
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	3301      	adds	r3, #1
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d003      	beq.n	800964e <usb_callback+0xea>
			int_out = 1;
 8009646:	4b21      	ldr	r3, [pc, #132]	; (80096cc <usb_callback+0x168>)
 8009648:	2201      	movs	r2, #1
 800964a:	701a      	strb	r2, [r3, #0]
 800964c:	e002      	b.n	8009654 <usb_callback+0xf0>
		}else{
			int_out = 0;
 800964e:	4b1f      	ldr	r3, [pc, #124]	; (80096cc <usb_callback+0x168>)
 8009650:	2200      	movs	r2, #0
 8009652:	701a      	strb	r2, [r3, #0]
		}

		usb_rst_cursor();
 8009654:	f000 fb6c 	bl	8009d30 <usb_rst_cursor>
		usb_add_uint8(0x03);
 8009658:	2003      	movs	r0, #3
 800965a:	f000 fa4f 	bl	8009afc <usb_add_uint8>
		usb_add_uint8(0);
 800965e:	2000      	movs	r0, #0
 8009660:	f000 fa4c 	bl	8009afc <usb_add_uint8>

		usb_send_buff();
 8009664:	f000 fb70 	bl	8009d48 <usb_send_buff>
	}

	//////////////// adc delay
		if(arr[0] == 4 ){
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	2b04      	cmp	r3, #4
 800966e:	d117      	bne.n	80096a0 <usb_callback+0x13c>

			adc_delay = arr[1]<<8 | arr[2];
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	3301      	adds	r3, #1
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	021b      	lsls	r3, r3, #8
 8009678:	b21a      	sxth	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	3302      	adds	r3, #2
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	b21b      	sxth	r3, r3
 8009682:	4313      	orrs	r3, r2
 8009684:	b21b      	sxth	r3, r3
 8009686:	b29a      	uxth	r2, r3
 8009688:	4b11      	ldr	r3, [pc, #68]	; (80096d0 <usb_callback+0x16c>)
 800968a:	801a      	strh	r2, [r3, #0]

			usb_rst_cursor();
 800968c:	f000 fb50 	bl	8009d30 <usb_rst_cursor>
			usb_add_uint8(0x03);
 8009690:	2003      	movs	r0, #3
 8009692:	f000 fa33 	bl	8009afc <usb_add_uint8>
			usb_add_uint8(0);
 8009696:	2000      	movs	r0, #0
 8009698:	f000 fa30 	bl	8009afc <usb_add_uint8>

			usb_send_buff();
 800969c:	f000 fb54 	bl	8009d48 <usb_send_buff>
		}
}
 80096a0:	bf00      	nop
 80096a2:	3718      	adds	r7, #24
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	1ff80050 	.word	0x1ff80050
 80096ac:	1ff80052 	.word	0x1ff80052
 80096b0:	1ff80054 	.word	0x1ff80054
 80096b4:	1ff80058 	.word	0x1ff80058
 80096b8:	40020400 	.word	0x40020400
 80096bc:	40020800 	.word	0x40020800
 80096c0:	20001558 	.word	0x20001558
 80096c4:	20001478 	.word	0x20001478
 80096c8:	200001a0 	.word	0x200001a0
 80096cc:	2000017a 	.word	0x2000017a
 80096d0:	2000017c 	.word	0x2000017c

080096d4 <calc_voltage_int>:

#define ADC_REFERENCE_VOLTAGE					1.224f
#define ADC_MAX									0x1000//0xFFF

void calc_voltage_int()
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b090      	sub	sp, #64	; 0x40
 80096d8:	af00      	add	r7, sp, #0

	uint32_t vref_adc 	= 0 ;
 80096da:	2300      	movs	r3, #0
 80096dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp 	= 0 ;
 80096de:	2300      	movs	r3, #0
 80096e0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t chf_arr[ch_count-2] = {0};
 80096e2:	1d3b      	adds	r3, r7, #4
 80096e4:	2230      	movs	r2, #48	; 0x30
 80096e6:	2100      	movs	r1, #0
 80096e8:	4618      	mov	r0, r3
 80096ea:	f000 fc4b 	bl	8009f84 <memset>

	for (uint8_t i = 0; i < 8*ch_count; i = i + ch_count) {
 80096ee:	2300      	movs	r3, #0
 80096f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80096f4:	e03e      	b.n	8009774 <calc_voltage_int+0xa0>
		vref_adc 	+= adc_data[i];
 80096f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096fa:	4a48      	ldr	r2, [pc, #288]	; (800981c <calc_voltage_int+0x148>)
 80096fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009700:	461a      	mov	r2, r3
 8009702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009704:	4413      	add	r3, r2
 8009706:	63fb      	str	r3, [r7, #60]	; 0x3c
		temp 		+= adc_data[i+1];
 8009708:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800970c:	3301      	adds	r3, #1
 800970e:	4a43      	ldr	r2, [pc, #268]	; (800981c <calc_voltage_int+0x148>)
 8009710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009714:	461a      	mov	r2, r3
 8009716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009718:	4413      	add	r3, r2
 800971a:	63bb      	str	r3, [r7, #56]	; 0x38
		for (uint8_t j = 2; j <= ch_count; j++ ){
 800971c:	2302      	movs	r3, #2
 800971e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009722:	e01e      	b.n	8009762 <calc_voltage_int+0x8e>
			chf_arr[j-2] += adc_data[i + j];
 8009724:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009728:	3b02      	subs	r3, #2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	3340      	adds	r3, #64	; 0x40
 800972e:	443b      	add	r3, r7
 8009730:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8009734:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8009738:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800973c:	440b      	add	r3, r1
 800973e:	4937      	ldr	r1, [pc, #220]	; (800981c <calc_voltage_int+0x148>)
 8009740:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009744:	4619      	mov	r1, r3
 8009746:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800974a:	3b02      	subs	r3, #2
 800974c:	440a      	add	r2, r1
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	3340      	adds	r3, #64	; 0x40
 8009752:	443b      	add	r3, r7
 8009754:	f843 2c3c 	str.w	r2, [r3, #-60]
		for (uint8_t j = 2; j <= ch_count; j++ ){
 8009758:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800975c:	3301      	adds	r3, #1
 800975e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009762:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009766:	2b0e      	cmp	r3, #14
 8009768:	d9dc      	bls.n	8009724 <calc_voltage_int+0x50>
	for (uint8_t i = 0; i < 8*ch_count; i = i + ch_count) {
 800976a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800976e:	330e      	adds	r3, #14
 8009770:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009774:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009778:	2b6f      	cmp	r3, #111	; 0x6f
 800977a:	d9bc      	bls.n	80096f6 <calc_voltage_int+0x22>
		}

	}

	vref_adc 	= (uint32_t) vref_adc 	/ 8;
 800977c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800977e:	08db      	lsrs	r3, r3, #3
 8009780:	63fb      	str	r3, [r7, #60]	; 0x3c
	temp 		= (uint32_t) temp 	/ 8;
 8009782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009784:	08db      	lsrs	r3, r3, #3
 8009786:	63bb      	str	r3, [r7, #56]	; 0x38
	for (uint8_t j = 0; j < ch_count-2; j++ ){
 8009788:	2300      	movs	r3, #0
 800978a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800978e:	e013      	b.n	80097b8 <calc_voltage_int+0xe4>
		chf_arr[j] = (uint32_t)  chf_arr[j] / 8;
 8009790:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	3340      	adds	r3, #64	; 0x40
 8009798:	443b      	add	r3, r7
 800979a:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800979e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80097a2:	08d2      	lsrs	r2, r2, #3
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	3340      	adds	r3, #64	; 0x40
 80097a8:	443b      	add	r3, r7
 80097aa:	f843 2c3c 	str.w	r2, [r3, #-60]
	for (uint8_t j = 0; j < ch_count-2; j++ ){
 80097ae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80097b2:	3301      	adds	r3, #1
 80097b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80097b8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80097bc:	2b0b      	cmp	r3, #11
 80097be:	d9e7      	bls.n	8009790 <calc_voltage_int+0xbc>


	//voltage = (float) adc_2 * ( (RV_HI + RV_LO) / RV_LO );
	//current = (float) ( adc_3 / (1 + (RA_HI/RA_LO)) ) / R_SHUNT;   //(float)3/3*adc_3
	//power = voltage*current;
	usb_rst_cursor();
 80097c0:	f000 fab6 	bl	8009d30 <usb_rst_cursor>
	usb_add_uint8(0xFC);
 80097c4:	20fc      	movs	r0, #252	; 0xfc
 80097c6:	f000 f999 	bl	8009afc <usb_add_uint8>
	usb_add_uint16(vref_adc);
 80097ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80097cc:	f000 f9ba 	bl	8009b44 <usb_add_uint16>
	usb_add_uint16(temp);
 80097d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097d2:	f000 f9b7 	bl	8009b44 <usb_add_uint16>
	for (uint8_t j = 0; j < ch_count-2; j++ ){
 80097d6:	2300      	movs	r3, #0
 80097d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80097dc:	e00f      	b.n	80097fe <calc_voltage_int+0x12a>
		usb_add_uint16((uint16_t) chf_arr[j]);
 80097de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	3340      	adds	r3, #64	; 0x40
 80097e6:	443b      	add	r3, r7
 80097e8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 f9a8 	bl	8009b44 <usb_add_uint16>
	for (uint8_t j = 0; j < ch_count-2; j++ ){
 80097f4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80097f8:	3301      	adds	r3, #1
 80097fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80097fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009802:	2b0b      	cmp	r3, #11
 8009804:	d9eb      	bls.n	80097de <calc_voltage_int+0x10a>
	}
	usb_send_buff();
 8009806:	f000 fa9f 	bl	8009d48 <usb_send_buff>
	HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 1);
 800980a:	2201      	movs	r2, #1
 800980c:	2180      	movs	r1, #128	; 0x80
 800980e:	4804      	ldr	r0, [pc, #16]	; (8009820 <calc_voltage_int+0x14c>)
 8009810:	f7f8 ff32 	bl	8002678 <HAL_GPIO_WritePin>

}
 8009814:	bf00      	nop
 8009816:	3740      	adds	r7, #64	; 0x40
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	20001478 	.word	0x20001478
 8009820:	40020400 	.word	0x40020400

08009824 <calc_voltage>:

void calc_voltage()
{
 8009824:	b5b0      	push	{r4, r5, r7, lr}
 8009826:	b090      	sub	sp, #64	; 0x40
 8009828:	af00      	add	r7, sp, #0

	float vref_adc 	= 0 ;
 800982a:	f04f 0300 	mov.w	r3, #0
 800982e:	637b      	str	r3, [r7, #52]	; 0x34
	float temp 	= 0 ;
 8009830:	f04f 0300 	mov.w	r3, #0
 8009834:	633b      	str	r3, [r7, #48]	; 0x30
	float chf_arr[ch_count-2] = {0};
 8009836:	463b      	mov	r3, r7
 8009838:	2230      	movs	r2, #48	; 0x30
 800983a:	2100      	movs	r1, #0
 800983c:	4618      	mov	r0, r3
 800983e:	f000 fba1 	bl	8009f84 <memset>

	for (uint8_t i = 0; i < 8*ch_count; i = i + ch_count) {
 8009842:	2300      	movs	r3, #0
 8009844:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009848:	e054      	b.n	80098f4 <calc_voltage+0xd0>
		vref_adc 	+= adc_data[i];
 800984a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800984e:	4a74      	ldr	r2, [pc, #464]	; (8009a20 <calc_voltage+0x1fc>)
 8009850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009854:	4618      	mov	r0, r3
 8009856:	f7f6 fd4b 	bl	80002f0 <__aeabi_i2f>
 800985a:	4602      	mov	r2, r0
 800985c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800985e:	4619      	mov	r1, r3
 8009860:	4610      	mov	r0, r2
 8009862:	f7f6 fc91 	bl	8000188 <__addsf3>
 8009866:	4603      	mov	r3, r0
 8009868:	637b      	str	r3, [r7, #52]	; 0x34
		temp 		+= adc_data[i+1];
 800986a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800986e:	3301      	adds	r3, #1
 8009870:	4a6b      	ldr	r2, [pc, #428]	; (8009a20 <calc_voltage+0x1fc>)
 8009872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009876:	4618      	mov	r0, r3
 8009878:	f7f6 fd3a 	bl	80002f0 <__aeabi_i2f>
 800987c:	4602      	mov	r2, r0
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	4619      	mov	r1, r3
 8009882:	4610      	mov	r0, r2
 8009884:	f7f6 fc80 	bl	8000188 <__addsf3>
 8009888:	4603      	mov	r3, r0
 800988a:	633b      	str	r3, [r7, #48]	; 0x30
		for (uint8_t j = 2; j <= ch_count; j++ ){
 800988c:	2302      	movs	r3, #2
 800988e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009892:	e026      	b.n	80098e2 <calc_voltage+0xbe>
			chf_arr[j-2] += adc_data[i + j];
 8009894:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009898:	3b02      	subs	r3, #2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	3340      	adds	r3, #64	; 0x40
 800989e:	443b      	add	r3, r7
 80098a0:	f853 5c40 	ldr.w	r5, [r3, #-64]
 80098a4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80098a8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80098ac:	4413      	add	r3, r2
 80098ae:	4a5c      	ldr	r2, [pc, #368]	; (8009a20 <calc_voltage+0x1fc>)
 80098b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7f6 fd1b 	bl	80002f0 <__aeabi_i2f>
 80098ba:	4602      	mov	r2, r0
 80098bc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80098c0:	1e9c      	subs	r4, r3, #2
 80098c2:	4611      	mov	r1, r2
 80098c4:	4628      	mov	r0, r5
 80098c6:	f7f6 fc5f 	bl	8000188 <__addsf3>
 80098ca:	4603      	mov	r3, r0
 80098cc:	461a      	mov	r2, r3
 80098ce:	00a3      	lsls	r3, r4, #2
 80098d0:	3340      	adds	r3, #64	; 0x40
 80098d2:	443b      	add	r3, r7
 80098d4:	f843 2c40 	str.w	r2, [r3, #-64]
		for (uint8_t j = 2; j <= ch_count; j++ ){
 80098d8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80098dc:	3301      	adds	r3, #1
 80098de:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80098e2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80098e6:	2b0e      	cmp	r3, #14
 80098e8:	d9d4      	bls.n	8009894 <calc_voltage+0x70>
	for (uint8_t i = 0; i < 8*ch_count; i = i + ch_count) {
 80098ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80098ee:	330e      	adds	r3, #14
 80098f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80098f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80098f8:	2b6f      	cmp	r3, #111	; 0x6f
 80098fa:	d9a6      	bls.n	800984a <calc_voltage+0x26>
		}

	}

	vref_adc 	= vref_adc 	/ 8;
 80098fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098fe:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8009902:	4618      	mov	r0, r3
 8009904:	f7f6 fdfc 	bl	8000500 <__aeabi_fdiv>
 8009908:	4603      	mov	r3, r0
 800990a:	637b      	str	r3, [r7, #52]	; 0x34
	temp 		= temp 	/ 8;
 800990c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8009912:	4618      	mov	r0, r3
 8009914:	f7f6 fdf4 	bl	8000500 <__aeabi_fdiv>
 8009918:	4603      	mov	r3, r0
 800991a:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint8_t j = 0; j < ch_count-2; j++ ){
 800991c:	2300      	movs	r3, #0
 800991e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8009922:	e019      	b.n	8009958 <calc_voltage+0x134>
		chf_arr[j] = chf_arr[j] / 8;
 8009924:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	3340      	adds	r3, #64	; 0x40
 800992c:	443b      	add	r3, r7
 800992e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8009932:	f897 403d 	ldrb.w	r4, [r7, #61]	; 0x3d
 8009936:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800993a:	4618      	mov	r0, r3
 800993c:	f7f6 fde0 	bl	8000500 <__aeabi_fdiv>
 8009940:	4603      	mov	r3, r0
 8009942:	461a      	mov	r2, r3
 8009944:	00a3      	lsls	r3, r4, #2
 8009946:	3340      	adds	r3, #64	; 0x40
 8009948:	443b      	add	r3, r7
 800994a:	f843 2c40 	str.w	r2, [r3, #-64]
	for (uint8_t j = 0; j < ch_count-2; j++ ){
 800994e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009952:	3301      	adds	r3, #1
 8009954:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8009958:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800995c:	2b0b      	cmp	r3, #11
 800995e:	d9e1      	bls.n	8009924 <calc_voltage+0x100>
	}


	vref_adc 	=  ADC_MAX * ADC_REFERENCE_VOLTAGE / vref_adc;
 8009960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009962:	4619      	mov	r1, r3
 8009964:	482f      	ldr	r0, [pc, #188]	; (8009a24 <calc_voltage+0x200>)
 8009966:	f7f6 fdcb 	bl	8000500 <__aeabi_fdiv>
 800996a:	4603      	mov	r3, r0
 800996c:	637b      	str	r3, [r7, #52]	; 0x34

	for (uint8_t j = 0; j < ch_count-2; j++ ){
 800996e:	2300      	movs	r3, #0
 8009970:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8009974:	e020      	b.n	80099b8 <calc_voltage+0x194>
		chf_arr[j] = vref_adc / ADC_MAX * chf_arr[j] ;
 8009976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009978:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800997c:	4618      	mov	r0, r3
 800997e:	f7f6 fdbf 	bl	8000500 <__aeabi_fdiv>
 8009982:	4603      	mov	r3, r0
 8009984:	461a      	mov	r2, r3
 8009986:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	3340      	adds	r3, #64	; 0x40
 800998e:	443b      	add	r3, r7
 8009990:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8009994:	f897 403c 	ldrb.w	r4, [r7, #60]	; 0x3c
 8009998:	4619      	mov	r1, r3
 800999a:	4610      	mov	r0, r2
 800999c:	f7f6 fcfc 	bl	8000398 <__aeabi_fmul>
 80099a0:	4603      	mov	r3, r0
 80099a2:	461a      	mov	r2, r3
 80099a4:	00a3      	lsls	r3, r4, #2
 80099a6:	3340      	adds	r3, #64	; 0x40
 80099a8:	443b      	add	r3, r7
 80099aa:	f843 2c40 	str.w	r2, [r3, #-64]
	for (uint8_t j = 0; j < ch_count-2; j++ ){
 80099ae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80099b2:	3301      	adds	r3, #1
 80099b4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80099b8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80099bc:	2b0b      	cmp	r3, #11
 80099be:	d9da      	bls.n	8009976 <calc_voltage+0x152>


	//voltage = (float) adc_2 * ( (RV_HI + RV_LO) / RV_LO );
	//current = (float) ( adc_3 / (1 + (RA_HI/RA_LO)) ) / R_SHUNT;   //(float)3/3*adc_3
	//power = voltage*current;
	usb_rst_cursor();
 80099c0:	f000 f9b6 	bl	8009d30 <usb_rst_cursor>
	usb_add_uint8(0xFD);
 80099c4:	20fd      	movs	r0, #253	; 0xfd
 80099c6:	f000 f899 	bl	8009afc <usb_add_uint8>
	usb_add_float(&vref_adc);
 80099ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 f952 	bl	8009c78 <usb_add_float>
	usb_add_float(&temp);
 80099d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099d8:	4618      	mov	r0, r3
 80099da:	f000 f94d 	bl	8009c78 <usb_add_float>
	for (uint8_t j = 0; j < ch_count-2; j++ ){
 80099de:	2300      	movs	r3, #0
 80099e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099e4:	e00c      	b.n	8009a00 <calc_voltage+0x1dc>
		usb_add_float(&chf_arr[j]);
 80099e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80099ea:	463a      	mov	r2, r7
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	4618      	mov	r0, r3
 80099f2:	f000 f941 	bl	8009c78 <usb_add_float>
	for (uint8_t j = 0; j < ch_count-2; j++ ){
 80099f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80099fa:	3301      	adds	r3, #1
 80099fc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a00:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009a04:	2b0b      	cmp	r3, #11
 8009a06:	d9ee      	bls.n	80099e6 <calc_voltage+0x1c2>
	}
	usb_send_buff();
 8009a08:	f000 f99e 	bl	8009d48 <usb_send_buff>
	HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 1);
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	2180      	movs	r1, #128	; 0x80
 8009a10:	4805      	ldr	r0, [pc, #20]	; (8009a28 <calc_voltage+0x204>)
 8009a12:	f7f8 fe31 	bl	8002678 <HAL_GPIO_WritePin>
}
 8009a16:	bf00      	nop
 8009a18:	3740      	adds	r7, #64	; 0x40
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	20001478 	.word	0x20001478
 8009a24:	459cac08 	.word	0x459cac08
 8009a28:	40020400 	.word	0x40020400

08009a2c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]

    if(hadc->Instance == ADC1)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a0a      	ldr	r2, [pc, #40]	; (8009a64 <HAL_ADC_ConvCpltCallback+0x38>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d10e      	bne.n	8009a5c <HAL_ADC_ConvCpltCallback+0x30>
    {
        HAL_ADC_Stop_DMA(hadc); // это необязательно
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7f7 fe70 	bl	8001724 <HAL_ADC_Stop_DMA>
        if(int_out > 0){
 8009a44:	4b08      	ldr	r3, [pc, #32]	; (8009a68 <HAL_ADC_ConvCpltCallback+0x3c>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d002      	beq.n	8009a52 <HAL_ADC_ConvCpltCallback+0x26>
        	calc_voltage_int();
 8009a4c:	f7ff fe42 	bl	80096d4 <calc_voltage_int>
 8009a50:	e001      	b.n	8009a56 <HAL_ADC_ConvCpltCallback+0x2a>
        }else{
        	calc_voltage();
 8009a52:	f7ff fee7 	bl	8009824 <calc_voltage>
        }
		adc_ok = 1;
 8009a56:	4b05      	ldr	r3, [pc, #20]	; (8009a6c <HAL_ADC_ConvCpltCallback+0x40>)
 8009a58:	2201      	movs	r2, #1
 8009a5a:	701a      	strb	r2, [r3, #0]
        

    }
}
 8009a5c:	bf00      	nop
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	40012400 	.word	0x40012400
 8009a68:	2000017a 	.word	0x2000017a
 8009a6c:	20001559 	.word	0x20001559

08009a70 <kernel_init>:
/////////////////////////////////////////////////////////////////////////////////
// INIT
/////////////////////////////////////////////////////////////////////////////////


void kernel_init() {
 8009a70:	b580      	push	{r7, lr}
 8009a72:	af00      	add	r7, sp, #0

    //////////////////////////////////
    // Hardware Check

	HAL_Delay(2000);
 8009a74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009a78:	f7f7 fc5e 	bl	8001338 <HAL_Delay>
	HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 1);
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	2180      	movs	r1, #128	; 0x80
 8009a80:	4807      	ldr	r0, [pc, #28]	; (8009aa0 <kernel_init+0x30>)
 8009a82:	f7f8 fdf9 	bl	8002678 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 1);
 8009a86:	2201      	movs	r2, #1
 8009a88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a8c:	4805      	ldr	r0, [pc, #20]	; (8009aa4 <kernel_init+0x34>)
 8009a8e:	f7f8 fdf3 	bl	8002678 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, 0);
 8009a92:	2200      	movs	r2, #0
 8009a94:	2140      	movs	r1, #64	; 0x40
 8009a96:	4802      	ldr	r0, [pc, #8]	; (8009aa0 <kernel_init+0x30>)
 8009a98:	f7f8 fdee 	bl	8002678 <HAL_GPIO_WritePin>

}
 8009a9c:	bf00      	nop
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	40020400 	.word	0x40020400
 8009aa4:	40020800 	.word	0x40020800

08009aa8 <kernel_main>:
// MAIN
/////////////////////////////////////////////////////////////////////////////////



void kernel_main() {
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	af00      	add	r7, sp, #0
	usb_set_callback(&usb_callback);
 8009aac:	480d      	ldr	r0, [pc, #52]	; (8009ae4 <kernel_main+0x3c>)
 8009aae:	f000 f9d3 	bl	8009e58 <usb_set_callback>
	kernel_init();
 8009ab2:	f7ff ffdd 	bl	8009a70 <kernel_init>



    while(1)
    {
		if (adc_ok>0){
 8009ab6:	4b0c      	ldr	r3, [pc, #48]	; (8009ae8 <kernel_main+0x40>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d0fb      	beq.n	8009ab6 <kernel_main+0xe>
			adc_ok = 0;
 8009abe:	4b0a      	ldr	r3, [pc, #40]	; (8009ae8 <kernel_main+0x40>)
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	701a      	strb	r2, [r3, #0]
			if (continious > 0){
 8009ac4:	4b09      	ldr	r3, [pc, #36]	; (8009aec <kernel_main+0x44>)
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d004      	beq.n	8009ad6 <kernel_main+0x2e>
        		HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_data, ch_count*8);
 8009acc:	2270      	movs	r2, #112	; 0x70
 8009ace:	4908      	ldr	r1, [pc, #32]	; (8009af0 <kernel_main+0x48>)
 8009ad0:	4808      	ldr	r0, [pc, #32]	; (8009af4 <kernel_main+0x4c>)
 8009ad2:	f7f7 fd99 	bl	8001608 <HAL_ADC_Start_DMA>
        	}
			HAL_Delay(adc_delay);
 8009ad6:	4b08      	ldr	r3, [pc, #32]	; (8009af8 <kernel_main+0x50>)
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7f7 fc2c 	bl	8001338 <HAL_Delay>
		if (adc_ok>0){
 8009ae0:	e7e9      	b.n	8009ab6 <kernel_main+0xe>
 8009ae2:	bf00      	nop
 8009ae4:	08009565 	.word	0x08009565
 8009ae8:	20001559 	.word	0x20001559
 8009aec:	20001558 	.word	0x20001558
 8009af0:	20001478 	.word	0x20001478
 8009af4:	200001a0 	.word	0x200001a0
 8009af8:	2000017c 	.word	0x2000017c

08009afc <usb_add_uint8>:
USBD_StatusTypeDef last_statius = USBD_FAIL;

//////////////////////////////////////////////
// int val
//////////////////////////////////////////////
uint8_t usb_add_uint8(uint8_t data){
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	4603      	mov	r3, r0
 8009b04:	71fb      	strb	r3, [r7, #7]
	usb_buff[usb_cursor] = data;
 8009b06:	4b0c      	ldr	r3, [pc, #48]	; (8009b38 <usb_add_uint8+0x3c>)
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	4a0b      	ldr	r2, [pc, #44]	; (8009b3c <usb_add_uint8+0x40>)
 8009b0e:	79fb      	ldrb	r3, [r7, #7]
 8009b10:	5453      	strb	r3, [r2, r1]
	usb_cursor++;
 8009b12:	4b09      	ldr	r3, [pc, #36]	; (8009b38 <usb_add_uint8+0x3c>)
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	3301      	adds	r3, #1
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	4b07      	ldr	r3, [pc, #28]	; (8009b38 <usb_add_uint8+0x3c>)
 8009b1c:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009b1e:	4b08      	ldr	r3, [pc, #32]	; (8009b40 <usb_add_uint8+0x44>)
 8009b20:	881b      	ldrh	r3, [r3, #0]
 8009b22:	3301      	adds	r3, #1
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	4b06      	ldr	r3, [pc, #24]	; (8009b40 <usb_add_uint8+0x44>)
 8009b28:	801a      	strh	r2, [r3, #0]
	return usb_cursor; //return next byte number
 8009b2a:	4b03      	ldr	r3, [pc, #12]	; (8009b38 <usb_add_uint8+0x3c>)
 8009b2c:	781b      	ldrb	r3, [r3, #0]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bc80      	pop	{r7}
 8009b36:	4770      	bx	lr
 8009b38:	2000155a 	.word	0x2000155a
 8009b3c:	20001560 	.word	0x20001560
 8009b40:	2000155c 	.word	0x2000155c

08009b44 <usb_add_uint16>:
uint8_t usb_add_uint16(uint16_t data){
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	80fb      	strh	r3, [r7, #6]
	usb_buff[usb_cursor] = data & 0xFF;
 8009b4e:	4b17      	ldr	r3, [pc, #92]	; (8009bac <usb_add_uint16+0x68>)
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	88fb      	ldrh	r3, [r7, #6]
 8009b56:	b2d9      	uxtb	r1, r3
 8009b58:	4b15      	ldr	r3, [pc, #84]	; (8009bb0 <usb_add_uint16+0x6c>)
 8009b5a:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8009b5c:	4b13      	ldr	r3, [pc, #76]	; (8009bac <usb_add_uint16+0x68>)
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	3301      	adds	r3, #1
 8009b62:	b2da      	uxtb	r2, r3
 8009b64:	4b11      	ldr	r3, [pc, #68]	; (8009bac <usb_add_uint16+0x68>)
 8009b66:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009b68:	4b12      	ldr	r3, [pc, #72]	; (8009bb4 <usb_add_uint16+0x70>)
 8009b6a:	881b      	ldrh	r3, [r3, #0]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	4b10      	ldr	r3, [pc, #64]	; (8009bb4 <usb_add_uint16+0x70>)
 8009b72:	801a      	strh	r2, [r3, #0]
	usb_buff[usb_cursor] = data >> 8;
 8009b74:	88fb      	ldrh	r3, [r7, #6]
 8009b76:	0a1b      	lsrs	r3, r3, #8
 8009b78:	b299      	uxth	r1, r3
 8009b7a:	4b0c      	ldr	r3, [pc, #48]	; (8009bac <usb_add_uint16+0x68>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	b2c9      	uxtb	r1, r1
 8009b82:	4b0b      	ldr	r3, [pc, #44]	; (8009bb0 <usb_add_uint16+0x6c>)
 8009b84:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8009b86:	4b09      	ldr	r3, [pc, #36]	; (8009bac <usb_add_uint16+0x68>)
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	4b07      	ldr	r3, [pc, #28]	; (8009bac <usb_add_uint16+0x68>)
 8009b90:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009b92:	4b08      	ldr	r3, [pc, #32]	; (8009bb4 <usb_add_uint16+0x70>)
 8009b94:	881b      	ldrh	r3, [r3, #0]
 8009b96:	3301      	adds	r3, #1
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	4b06      	ldr	r3, [pc, #24]	; (8009bb4 <usb_add_uint16+0x70>)
 8009b9c:	801a      	strh	r2, [r3, #0]
	return usb_cursor;
 8009b9e:	4b03      	ldr	r3, [pc, #12]	; (8009bac <usb_add_uint16+0x68>)
 8009ba0:	781b      	ldrb	r3, [r3, #0]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bc80      	pop	{r7}
 8009baa:	4770      	bx	lr
 8009bac:	2000155a 	.word	0x2000155a
 8009bb0:	20001560 	.word	0x20001560
 8009bb4:	2000155c 	.word	0x2000155c

08009bb8 <usb_add_uint32>:
uint8_t usb_add_uint32(uint32_t data){
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
	usb_buff[usb_cursor] = data 		& 0xFF;
 8009bc0:	4b2a      	ldr	r3, [pc, #168]	; (8009c6c <usb_add_uint32+0xb4>)
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	b2d9      	uxtb	r1, r3
 8009bca:	4b29      	ldr	r3, [pc, #164]	; (8009c70 <usb_add_uint32+0xb8>)
 8009bcc:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8009bce:	4b27      	ldr	r3, [pc, #156]	; (8009c6c <usb_add_uint32+0xb4>)
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	4b25      	ldr	r3, [pc, #148]	; (8009c6c <usb_add_uint32+0xb4>)
 8009bd8:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009bda:	4b26      	ldr	r3, [pc, #152]	; (8009c74 <usb_add_uint32+0xbc>)
 8009bdc:	881b      	ldrh	r3, [r3, #0]
 8009bde:	3301      	adds	r3, #1
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	4b24      	ldr	r3, [pc, #144]	; (8009c74 <usb_add_uint32+0xbc>)
 8009be4:	801a      	strh	r2, [r3, #0]
	usb_buff[usb_cursor] = (data >> 8 )	& 0xFF;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	0a19      	lsrs	r1, r3, #8
 8009bea:	4b20      	ldr	r3, [pc, #128]	; (8009c6c <usb_add_uint32+0xb4>)
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	b2c9      	uxtb	r1, r1
 8009bf2:	4b1f      	ldr	r3, [pc, #124]	; (8009c70 <usb_add_uint32+0xb8>)
 8009bf4:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8009bf6:	4b1d      	ldr	r3, [pc, #116]	; (8009c6c <usb_add_uint32+0xb4>)
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	b2da      	uxtb	r2, r3
 8009bfe:	4b1b      	ldr	r3, [pc, #108]	; (8009c6c <usb_add_uint32+0xb4>)
 8009c00:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009c02:	4b1c      	ldr	r3, [pc, #112]	; (8009c74 <usb_add_uint32+0xbc>)
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	3301      	adds	r3, #1
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	4b1a      	ldr	r3, [pc, #104]	; (8009c74 <usb_add_uint32+0xbc>)
 8009c0c:	801a      	strh	r2, [r3, #0]
	usb_buff[usb_cursor] = (data >> 16)	& 0xFF;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	0c19      	lsrs	r1, r3, #16
 8009c12:	4b16      	ldr	r3, [pc, #88]	; (8009c6c <usb_add_uint32+0xb4>)
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	461a      	mov	r2, r3
 8009c18:	b2c9      	uxtb	r1, r1
 8009c1a:	4b15      	ldr	r3, [pc, #84]	; (8009c70 <usb_add_uint32+0xb8>)
 8009c1c:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8009c1e:	4b13      	ldr	r3, [pc, #76]	; (8009c6c <usb_add_uint32+0xb4>)
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	3301      	adds	r3, #1
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	4b11      	ldr	r3, [pc, #68]	; (8009c6c <usb_add_uint32+0xb4>)
 8009c28:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009c2a:	4b12      	ldr	r3, [pc, #72]	; (8009c74 <usb_add_uint32+0xbc>)
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	4b10      	ldr	r3, [pc, #64]	; (8009c74 <usb_add_uint32+0xbc>)
 8009c34:	801a      	strh	r2, [r3, #0]
	usb_buff[usb_cursor] = data >> 24;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	0e19      	lsrs	r1, r3, #24
 8009c3a:	4b0c      	ldr	r3, [pc, #48]	; (8009c6c <usb_add_uint32+0xb4>)
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	b2c9      	uxtb	r1, r1
 8009c42:	4b0b      	ldr	r3, [pc, #44]	; (8009c70 <usb_add_uint32+0xb8>)
 8009c44:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8009c46:	4b09      	ldr	r3, [pc, #36]	; (8009c6c <usb_add_uint32+0xb4>)
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	b2da      	uxtb	r2, r3
 8009c4e:	4b07      	ldr	r3, [pc, #28]	; (8009c6c <usb_add_uint32+0xb4>)
 8009c50:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009c52:	4b08      	ldr	r3, [pc, #32]	; (8009c74 <usb_add_uint32+0xbc>)
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	3301      	adds	r3, #1
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	4b06      	ldr	r3, [pc, #24]	; (8009c74 <usb_add_uint32+0xbc>)
 8009c5c:	801a      	strh	r2, [r3, #0]
	return usb_cursor;
 8009c5e:	4b03      	ldr	r3, [pc, #12]	; (8009c6c <usb_add_uint32+0xb4>)
 8009c60:	781b      	ldrb	r3, [r3, #0]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bc80      	pop	{r7}
 8009c6a:	4770      	bx	lr
 8009c6c:	2000155a 	.word	0x2000155a
 8009c70:	20001560 	.word	0x20001560
 8009c74:	2000155c 	.word	0x2000155c

08009c78 <usb_add_float>:
}

//////////////////////////////////////////////
// float/double val
//////////////////////////////////////////////
uint8_t usb_add_float(float *data){
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
	union {
		float fVal;
		uint8_t fArr[4];
	} uF_arr;

	uF_arr.fVal = *data;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	60fb      	str	r3, [r7, #12]

	usb_buff[usb_cursor] = uF_arr.fArr[0];
 8009c86:	4b27      	ldr	r3, [pc, #156]	; (8009d24 <usb_add_float+0xac>)
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	7b39      	ldrb	r1, [r7, #12]
 8009c8e:	4b26      	ldr	r3, [pc, #152]	; (8009d28 <usb_add_float+0xb0>)
 8009c90:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8009c92:	4b24      	ldr	r3, [pc, #144]	; (8009d24 <usb_add_float+0xac>)
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	3301      	adds	r3, #1
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	4b22      	ldr	r3, [pc, #136]	; (8009d24 <usb_add_float+0xac>)
 8009c9c:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009c9e:	4b23      	ldr	r3, [pc, #140]	; (8009d2c <usb_add_float+0xb4>)
 8009ca0:	881b      	ldrh	r3, [r3, #0]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	4b21      	ldr	r3, [pc, #132]	; (8009d2c <usb_add_float+0xb4>)
 8009ca8:	801a      	strh	r2, [r3, #0]
	usb_buff[usb_cursor] = uF_arr.fArr[1];
 8009caa:	4b1e      	ldr	r3, [pc, #120]	; (8009d24 <usb_add_float+0xac>)
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	7b79      	ldrb	r1, [r7, #13]
 8009cb2:	4b1d      	ldr	r3, [pc, #116]	; (8009d28 <usb_add_float+0xb0>)
 8009cb4:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8009cb6:	4b1b      	ldr	r3, [pc, #108]	; (8009d24 <usb_add_float+0xac>)
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	b2da      	uxtb	r2, r3
 8009cbe:	4b19      	ldr	r3, [pc, #100]	; (8009d24 <usb_add_float+0xac>)
 8009cc0:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009cc2:	4b1a      	ldr	r3, [pc, #104]	; (8009d2c <usb_add_float+0xb4>)
 8009cc4:	881b      	ldrh	r3, [r3, #0]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	4b18      	ldr	r3, [pc, #96]	; (8009d2c <usb_add_float+0xb4>)
 8009ccc:	801a      	strh	r2, [r3, #0]
	usb_buff[usb_cursor] = uF_arr.fArr[2];
 8009cce:	4b15      	ldr	r3, [pc, #84]	; (8009d24 <usb_add_float+0xac>)
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	7bb9      	ldrb	r1, [r7, #14]
 8009cd6:	4b14      	ldr	r3, [pc, #80]	; (8009d28 <usb_add_float+0xb0>)
 8009cd8:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8009cda:	4b12      	ldr	r3, [pc, #72]	; (8009d24 <usb_add_float+0xac>)
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	b2da      	uxtb	r2, r3
 8009ce2:	4b10      	ldr	r3, [pc, #64]	; (8009d24 <usb_add_float+0xac>)
 8009ce4:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009ce6:	4b11      	ldr	r3, [pc, #68]	; (8009d2c <usb_add_float+0xb4>)
 8009ce8:	881b      	ldrh	r3, [r3, #0]
 8009cea:	3301      	adds	r3, #1
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	4b0f      	ldr	r3, [pc, #60]	; (8009d2c <usb_add_float+0xb4>)
 8009cf0:	801a      	strh	r2, [r3, #0]
	usb_buff[usb_cursor] = uF_arr.fArr[3];
 8009cf2:	4b0c      	ldr	r3, [pc, #48]	; (8009d24 <usb_add_float+0xac>)
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	7bf9      	ldrb	r1, [r7, #15]
 8009cfa:	4b0b      	ldr	r3, [pc, #44]	; (8009d28 <usb_add_float+0xb0>)
 8009cfc:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8009cfe:	4b09      	ldr	r3, [pc, #36]	; (8009d24 <usb_add_float+0xac>)
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	3301      	adds	r3, #1
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	4b07      	ldr	r3, [pc, #28]	; (8009d24 <usb_add_float+0xac>)
 8009d08:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009d0a:	4b08      	ldr	r3, [pc, #32]	; (8009d2c <usb_add_float+0xb4>)
 8009d0c:	881b      	ldrh	r3, [r3, #0]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	4b06      	ldr	r3, [pc, #24]	; (8009d2c <usb_add_float+0xb4>)
 8009d14:	801a      	strh	r2, [r3, #0]

	return usb_cursor;
 8009d16:	4b03      	ldr	r3, [pc, #12]	; (8009d24 <usb_add_float+0xac>)
 8009d18:	781b      	ldrb	r3, [r3, #0]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bc80      	pop	{r7}
 8009d22:	4770      	bx	lr
 8009d24:	2000155a 	.word	0x2000155a
 8009d28:	20001560 	.word	0x20001560
 8009d2c:	2000155c 	.word	0x2000155c

08009d30 <usb_rst_cursor>:
		usb_len++;
	}
	return usb_cursor;
}

void usb_rst_cursor(){
 8009d30:	b480      	push	{r7}
 8009d32:	af00      	add	r7, sp, #0
	usb_cursor = 0;
 8009d34:	4b03      	ldr	r3, [pc, #12]	; (8009d44 <usb_rst_cursor+0x14>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	701a      	strb	r2, [r3, #0]
}
 8009d3a:	bf00      	nop
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bc80      	pop	{r7}
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	2000155a 	.word	0x2000155a

08009d48 <usb_send_buff>:
}

//////////////////////////////////////////////
// send buffer
//////////////////////////////////////////////
USBD_StatusTypeDef usb_send_buff(){
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b0c4      	sub	sp, #272	; 0x110
 8009d4c:	af00      	add	r7, sp, #0
	//////////////////////////////////////////////
	// generate log packet
		uint16_t data_len = 0;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		uint8_t data_packet[260];
		uint16_t len = 0;
 8009d54:	2300      	movs	r3, #0
 8009d56:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		if(usb_cursor == 0){
 8009d5a:	4b36      	ldr	r3, [pc, #216]	; (8009e34 <usb_send_buff+0xec>)
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d104      	bne.n	8009d6c <usb_send_buff+0x24>
			len = 256;
 8009d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d66:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8009d6a:	e003      	b.n	8009d74 <usb_send_buff+0x2c>
		}else{
			len = usb_cursor;
 8009d6c:	4b31      	ldr	r3, [pc, #196]	; (8009e34 <usb_send_buff+0xec>)
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		}
		//uint8_t	data_crc = 0;
		data_len = 0;
 8009d74:	2300      	movs	r3, #0
 8009d76:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		//preamp
		data_packet[0] = 0xAA;
 8009d7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009d82:	22aa      	movs	r2, #170	; 0xaa
 8009d84:	701a      	strb	r2, [r3, #0]
		data_len++;
 8009d86:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		//lenH;
		data_len++;
 8009d90:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009d94:	3301      	adds	r3, #1
 8009d96:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		//lenL;
		data_len++;
 8009d9a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009d9e:	3301      	adds	r3, #1
 8009da0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		/////////////fill packet
		for (uint16_t i = 0; i < len; i++) {
 8009da4:	2300      	movs	r3, #0
 8009da6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8009daa:	e014      	b.n	8009dd6 <usb_send_buff+0x8e>
			data_packet[data_len] = usb_buff[i];
 8009dac:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009db0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009db4:	4920      	ldr	r1, [pc, #128]	; (8009e38 <usb_send_buff+0xf0>)
 8009db6:	5c89      	ldrb	r1, [r1, r2]
 8009db8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8009dbc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8009dc0:	54d1      	strb	r1, [r2, r3]
			data_len++;
 8009dc2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		for (uint16_t i = 0; i < len; i++) {
 8009dcc:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8009dd6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009dda:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d3e4      	bcc.n	8009dac <usb_send_buff+0x64>
		}

		data_packet[1] = data_len>>8;
 8009de2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009de6:	0a1b      	lsrs	r3, r3, #8
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	b2da      	uxtb	r2, r3
 8009dec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009df0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009df4:	705a      	strb	r2, [r3, #1]
		data_packet[2] = data_len & 0xFF;
 8009df6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009dfa:	b2da      	uxtb	r2, r3
 8009dfc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009e00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009e04:	709a      	strb	r2, [r3, #2]
		//data_packet[data_len] = crc8Maxim(data_packet, data_len-1);  //uart sync crc
		data_len++;
 8009e06:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		// [0xAA][len][rssi][snr][data...][crc]
		// в длину пакета crc не входит
		last_statius = CDC_Transmit_FS(data_packet, data_len);
 8009e10:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009e14:	1d3b      	adds	r3, r7, #4
 8009e16:	4611      	mov	r1, r2
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fe ffb1 	bl	8008d80 <CDC_Transmit_FS>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	461a      	mov	r2, r3
 8009e22:	4b06      	ldr	r3, [pc, #24]	; (8009e3c <usb_send_buff+0xf4>)
 8009e24:	701a      	strb	r2, [r3, #0]
		return last_statius;
 8009e26:	4b05      	ldr	r3, [pc, #20]	; (8009e3c <usb_send_buff+0xf4>)
 8009e28:	781b      	ldrb	r3, [r3, #0]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	2000155a 	.word	0x2000155a
 8009e38:	20001560 	.word	0x20001560
 8009e3c:	2000017e 	.word	0x2000017e

08009e40 <usb_def_callback>:
uint8_t usb_rx[256];

uint8_t usb_ln = 0;
uint8_t usb_stp = 0;

void usb_def_callback(uint8_t *arr, uint8_t len){
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	70fb      	strb	r3, [r7, #3]

}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bc80      	pop	{r7}
 8009e54:	4770      	bx	lr
	...

08009e58 <usb_set_callback>:





void usb_set_callback(void (*func)(uint8_t *, uint8_t)){
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
	f_rx = func;
 8009e60:	4a03      	ldr	r2, [pc, #12]	; (8009e70 <usb_set_callback+0x18>)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6013      	str	r3, [r2, #0]
}
 8009e66:	bf00      	nop
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bc80      	pop	{r7}
 8009e6e:	4770      	bx	lr
 8009e70:	20000180 	.word	0x20000180

08009e74 <usb_recv>:
  return (USBD_OK);
  / USER CODE END 6 /
}
************************************************************/

void usb_recv(uint8_t b){
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	71fb      	strb	r3, [r7, #7]

	//preamp
	if(usb_stp == 0){
 8009e7e:	4b2b      	ldr	r3, [pc, #172]	; (8009f2c <usb_recv+0xb8>)
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10d      	bne.n	8009ea2 <usb_recv+0x2e>
		if(b == 0xAA ){
 8009e86:	79fb      	ldrb	r3, [r7, #7]
 8009e88:	2baa      	cmp	r3, #170	; 0xaa
 8009e8a:	d106      	bne.n	8009e9a <usb_recv+0x26>
			usb_stp++;
 8009e8c:	4b27      	ldr	r3, [pc, #156]	; (8009f2c <usb_recv+0xb8>)
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	3301      	adds	r3, #1
 8009e92:	b2da      	uxtb	r2, r3
 8009e94:	4b25      	ldr	r3, [pc, #148]	; (8009f2c <usb_recv+0xb8>)
 8009e96:	701a      	strb	r2, [r3, #0]
		}else{
			usb_stp = 0;
		}
		return;
 8009e98:	e045      	b.n	8009f26 <usb_recv+0xb2>
			usb_stp = 0;
 8009e9a:	4b24      	ldr	r3, [pc, #144]	; (8009f2c <usb_recv+0xb8>)
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	701a      	strb	r2, [r3, #0]
		return;
 8009ea0:	e041      	b.n	8009f26 <usb_recv+0xb2>
	}
	//len
	if(usb_stp == 1){
 8009ea2:	4b22      	ldr	r3, [pc, #136]	; (8009f2c <usb_recv+0xb8>)
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d110      	bne.n	8009ecc <usb_recv+0x58>
		usb_ln = b;
 8009eaa:	4a21      	ldr	r2, [pc, #132]	; (8009f30 <usb_recv+0xbc>)
 8009eac:	79fb      	ldrb	r3, [r7, #7]
 8009eae:	7013      	strb	r3, [r2, #0]
		usb_stp++;
 8009eb0:	4b1e      	ldr	r3, [pc, #120]	; (8009f2c <usb_recv+0xb8>)
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	b2da      	uxtb	r2, r3
 8009eb8:	4b1c      	ldr	r3, [pc, #112]	; (8009f2c <usb_recv+0xb8>)
 8009eba:	701a      	strb	r2, [r3, #0]
		if(usb_ln == 0){
 8009ebc:	4b1c      	ldr	r3, [pc, #112]	; (8009f30 <usb_recv+0xbc>)
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d12d      	bne.n	8009f20 <usb_recv+0xac>
			usb_stp = 0;
 8009ec4:	4b19      	ldr	r3, [pc, #100]	; (8009f2c <usb_recv+0xb8>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	701a      	strb	r2, [r3, #0]
			return;
 8009eca:	e02c      	b.n	8009f26 <usb_recv+0xb2>
		}
		return;
	}
	//data
	if(usb_stp < usb_ln+2){
 8009ecc:	4b18      	ldr	r3, [pc, #96]	; (8009f30 <usb_recv+0xbc>)
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	4a16      	ldr	r2, [pc, #88]	; (8009f2c <usb_recv+0xb8>)
 8009ed4:	7812      	ldrb	r2, [r2, #0]
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	db1e      	blt.n	8009f18 <usb_recv+0xa4>

		usb_rx[usb_stp - 2] = b;
 8009eda:	4b14      	ldr	r3, [pc, #80]	; (8009f2c <usb_recv+0xb8>)
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	3b02      	subs	r3, #2
 8009ee0:	4914      	ldr	r1, [pc, #80]	; (8009f34 <usb_recv+0xc0>)
 8009ee2:	79fa      	ldrb	r2, [r7, #7]
 8009ee4:	54ca      	strb	r2, [r1, r3]
		usb_stp++;
 8009ee6:	4b11      	ldr	r3, [pc, #68]	; (8009f2c <usb_recv+0xb8>)
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	3301      	adds	r3, #1
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	4b0f      	ldr	r3, [pc, #60]	; (8009f2c <usb_recv+0xb8>)
 8009ef0:	701a      	strb	r2, [r3, #0]


		if(usb_stp == usb_ln+2){
 8009ef2:	4b0e      	ldr	r3, [pc, #56]	; (8009f2c <usb_recv+0xb8>)
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	4b0d      	ldr	r3, [pc, #52]	; (8009f30 <usb_recv+0xbc>)
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	3302      	adds	r3, #2
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d110      	bne.n	8009f24 <usb_recv+0xb0>
			usb_stp = 0;
 8009f02:	4b0a      	ldr	r3, [pc, #40]	; (8009f2c <usb_recv+0xb8>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	701a      	strb	r2, [r3, #0]
			f_rx(usb_rx, usb_ln);
 8009f08:	4b0b      	ldr	r3, [pc, #44]	; (8009f38 <usb_recv+0xc4>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a08      	ldr	r2, [pc, #32]	; (8009f30 <usb_recv+0xbc>)
 8009f0e:	7812      	ldrb	r2, [r2, #0]
 8009f10:	4611      	mov	r1, r2
 8009f12:	4808      	ldr	r0, [pc, #32]	; (8009f34 <usb_recv+0xc0>)
 8009f14:	4798      	blx	r3
			//usb_callback();
		}
		return;
 8009f16:	e005      	b.n	8009f24 <usb_recv+0xb0>
	}else{
		//crc
		usb_stp = 0;
 8009f18:	4b04      	ldr	r3, [pc, #16]	; (8009f2c <usb_recv+0xb8>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	701a      	strb	r2, [r3, #0]
 8009f1e:	e002      	b.n	8009f26 <usb_recv+0xb2>
		return;
 8009f20:	bf00      	nop
 8009f22:	e000      	b.n	8009f26 <usb_recv+0xb2>
		return;
 8009f24:	bf00      	nop
	}

}
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	20001761 	.word	0x20001761
 8009f30:	20001760 	.word	0x20001760
 8009f34:	20001660 	.word	0x20001660
 8009f38:	20000180 	.word	0x20000180

08009f3c <__libc_init_array>:
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	2600      	movs	r6, #0
 8009f40:	4d0c      	ldr	r5, [pc, #48]	; (8009f74 <__libc_init_array+0x38>)
 8009f42:	4c0d      	ldr	r4, [pc, #52]	; (8009f78 <__libc_init_array+0x3c>)
 8009f44:	1b64      	subs	r4, r4, r5
 8009f46:	10a4      	asrs	r4, r4, #2
 8009f48:	42a6      	cmp	r6, r4
 8009f4a:	d109      	bne.n	8009f60 <__libc_init_array+0x24>
 8009f4c:	f000 f822 	bl	8009f94 <_init>
 8009f50:	2600      	movs	r6, #0
 8009f52:	4d0a      	ldr	r5, [pc, #40]	; (8009f7c <__libc_init_array+0x40>)
 8009f54:	4c0a      	ldr	r4, [pc, #40]	; (8009f80 <__libc_init_array+0x44>)
 8009f56:	1b64      	subs	r4, r4, r5
 8009f58:	10a4      	asrs	r4, r4, #2
 8009f5a:	42a6      	cmp	r6, r4
 8009f5c:	d105      	bne.n	8009f6a <__libc_init_array+0x2e>
 8009f5e:	bd70      	pop	{r4, r5, r6, pc}
 8009f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f64:	4798      	blx	r3
 8009f66:	3601      	adds	r6, #1
 8009f68:	e7ee      	b.n	8009f48 <__libc_init_array+0xc>
 8009f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f6e:	4798      	blx	r3
 8009f70:	3601      	adds	r6, #1
 8009f72:	e7f2      	b.n	8009f5a <__libc_init_array+0x1e>
 8009f74:	0800a020 	.word	0x0800a020
 8009f78:	0800a020 	.word	0x0800a020
 8009f7c:	0800a020 	.word	0x0800a020
 8009f80:	0800a024 	.word	0x0800a024

08009f84 <memset>:
 8009f84:	4603      	mov	r3, r0
 8009f86:	4402      	add	r2, r0
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d100      	bne.n	8009f8e <memset+0xa>
 8009f8c:	4770      	bx	lr
 8009f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f92:	e7f9      	b.n	8009f88 <memset+0x4>

08009f94 <_init>:
 8009f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f96:	bf00      	nop
 8009f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f9a:	bc08      	pop	{r3}
 8009f9c:	469e      	mov	lr, r3
 8009f9e:	4770      	bx	lr

08009fa0 <_fini>:
 8009fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa2:	bf00      	nop
 8009fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fa6:	bc08      	pop	{r3}
 8009fa8:	469e      	mov	lr, r3
 8009faa:	4770      	bx	lr
